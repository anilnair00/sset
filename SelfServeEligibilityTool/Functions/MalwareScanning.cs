using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using ODE.SSET.Core.Domain;
using ODE.SSET.Core.Domain.Dynamics;
using ODE.SSET.Core.MalwareScanning;
using ODE.SSET.Interfaces;
using ODE.SSET.Interfaces.MalwareScanning;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace ODE.SSET.Functions
{
  public class ExpenseReceipt
    {
        private readonly RuntimeContext _runtimeContext;
        private readonly ISsetOperationsService _ssetOperationsService;

        public ExpenseReceipt(RuntimeContext runtimeContext,
          ISsetOperationsService ssetOperationsService)
        {
          _runtimeContext = runtimeContext;
          _ssetOperationsService = ssetOperationsService;
        }

        [FunctionName(nameof(UploadExpenseReceipt))]
        public async Task<IActionResult> UploadExpenseReceipt(
            [HttpTrigger(AuthorizationLevel.Function, "post")] HttpRequest req,
            CancellationToken cancellationToken,
            ILogger log)
        {
            log.LogInformation($"C# HTTP trigger function processed a request in {_runtimeContext.RuntimeEnvironment}.", cancellationToken);

            try
            {
              #region Validating the inputs

              if (string.IsNullOrEmpty(req.Form["TicketNumber"]))
              {
                return new BadRequestObjectResult("Ticket Number is required!");
              }

              if (req.Form.Files["File"] == null)
              {
                return new BadRequestObjectResult("Please provide file to upload!");
              }

              if (!(req.Form.Files["File"] is IFormFile))
              {
                return new BadRequestObjectResult("Please provide a valid file to upload!");
              }

              if (req.Form.Files.Count > 1)
              {
                return new BadRequestObjectResult("Only one file is allowed to upload!");
              }

              #endregion

              #region Creating the request Object
              var receiptRequest = new ReceiptUploadRequest()
              {
                TicketNumber = req.Form["TicketNumber"],
                File = req.Form.Files["File"]
              };
              #endregion

              #region Upload the receipt/file to the azure storage account for malware scanning
              var response = await _ssetOperationsService.UploadReceiptFileAsync(receiptRequest, cancellationToken);
              return new OkObjectResult(response);
              #endregion

            }catch(System.Exception ex)
            {
              var exception = ex;
              string exceptionMessage = string.Empty;

              while (exception != null)
              {
                exceptionMessage += exception.Message;
                exception = exception.InnerException;
              }

              log.LogError(ex, $"Error {exceptionMessage}.");
              return new BadRequestObjectResult(exceptionMessage);
            }
        }

        [FunctionName(nameof(DeleteExpenseReceipt))]
        public async Task<IActionResult> DeleteExpenseReceipt(
           [HttpTrigger(AuthorizationLevel.Function, "post")] HttpRequest req,
           CancellationToken cancellationToken,
           ILogger log)
        {
          log.LogInformation($"C# HTTP trigger function processed a request in {_runtimeContext.RuntimeEnvironment}.", cancellationToken);

          try
          {
            #region Get the request body

            var options = new JsonSerializerOptions()
            {
              PropertyNameCaseInsensitive = true,

              Converters = {
                  new TypeMappingConverter<IReceiptDeleteRequest, ReceiptDeleteRequest>(),
                },
            };

            IReceiptDeleteRequest receiptDeleteRequest;
            try
            {
              if (req.ContentLength == null || req.ContentLength == 0 )
              {
                return new BadRequestObjectResult("Request body is required!");
              }
              receiptDeleteRequest = await JsonSerializer.DeserializeAsync<IReceiptDeleteRequest>(req.Body, options);

              if (string.IsNullOrEmpty(receiptDeleteRequest.TicketNumber))
              {
                return new BadRequestObjectResult("Ticket Number is required!");
              }
            }
            catch (System.Exception ex)
            {
              var exception = ex;
              string exceptionMessage = string.Empty;

              while (exception != null)
              {
                exceptionMessage += exception.Message;
                exception = exception.InnerException;
              }

              log.LogError(ex, $"Error {exceptionMessage}.");
              return new BadRequestObjectResult(exceptionMessage);
            }

            #endregion

            #region Delete the receipt(s) from the storage account

            var response = await _ssetOperationsService.DeleteReceiptFileAsync(receiptDeleteRequest, cancellationToken);

            #endregion

            #region Return the response

            return new OkObjectResult(response);

            #endregion
          }
          catch (System.Exception ex)
          {
            var exception = ex;
            string exceptionMessage = string.Empty;

            while (exception != null)
            {
              exceptionMessage += exception.Message;
              exception = exception.InnerException;
            }

            log.LogError(ex, $"Error {exceptionMessage}.");
            return new BadRequestObjectResult(exceptionMessage);
          }
        }

        [FunctionName(nameof(GetExpenseReceiptScanResult))]
        public async Task<IActionResult> GetExpenseReceiptScanResult(
            [HttpTrigger(AuthorizationLevel.Function, "get")] HttpRequest req,
            CancellationToken cancellationToken,
            ILogger log)
        {
            log.LogInformation($"C# HTTP trigger function processed a request in {_runtimeContext.RuntimeEnvironment}.", cancellationToken);

            try
            {
              #region Validate Input
              var ticketNumber = req.Query["ticketNumber"].FirstOrDefault();
              var fileName = req.Query["fileName"].FirstOrDefault();
              var deleteFiles = req.Query["deleteFiles"].FirstOrDefault();

              if (string.IsNullOrEmpty(ticketNumber))
              {
                return new BadRequestObjectResult("Ticket Number is required!");
              }

              if (string.IsNullOrEmpty(deleteFiles))
              {
                return new BadRequestObjectResult("Delete Files is required!");
              }

              if (!bool.TryParse(deleteFiles, out _))
              {
                return new BadRequestObjectResult("Delete Files should be a boolean value!");
              }
              #endregion

              #region Creating the request Object
              var request = new ReceiptScanRequest()
              {
                TicketNumber = ticketNumber,
                FileName = fileName,
                DeleteFiles = bool.Parse(deleteFiles)
              };
              #endregion

              #region Return the receipt scan result
              var response = await _ssetOperationsService.GetReceiptScanResponseAsync(request, cancellationToken);
              return new OkObjectResult(response);
              #endregion
            }
            catch (System.Exception ex)
            {
              var exception = ex;
              string exceptionMessage = string.Empty;

              while (exception != null)
              {
                exceptionMessage += exception.Message;
                exception = exception.InnerException;
              }

              log.LogError(ex, $"Error {exceptionMessage}.");
              return new BadRequestObjectResult(exceptionMessage);
            }
        }
    }    
}
