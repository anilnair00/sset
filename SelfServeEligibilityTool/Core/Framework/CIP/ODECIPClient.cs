//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace AirCanada.ODE.CIP.APIClient
{
  using System = global::System;

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IPnrViewerClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfPnrViewerModel> GetPNRAsync(string pnrNumber, string ticketNumber, System.DateTimeOffset? creationDate, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfPnrViewerModel> GetPNRAsync(string pnrNumber, string ticketNumber, System.DateTimeOffset? creationDate, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class PnrViewerClient : IPnrViewerClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public PnrViewerClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfPnrViewerModel> GetPNRAsync(string pnrNumber, string ticketNumber, System.DateTimeOffset? creationDate, string x_SessionId, string x_DeviceId)
    {
      return GetPNRAsync(pnrNumber, ticketNumber, creationDate, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfPnrViewerModel> GetPNRAsync(string pnrNumber, string ticketNumber, System.DateTimeOffset? creationDate, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/pnrviewer/pnr?");
      if (pnrNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PnrNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pnrNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (ticketNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("TicketNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ticketNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (creationDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("CreationDate") + "=").Append(System.Uri.EscapeDataString(creationDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfPnrViewerModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "404")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfPnrViewerModel>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<SearchResultOfPnrViewerModel>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfPnrViewerModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IAircraftTypesClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfAircraftTypeModel> GetAircraftTypesAsync(string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfAircraftTypeModel> GetAircraftTypesAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class AircraftTypesClient : IAircraftTypesClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public AircraftTypesClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfAircraftTypeModel> GetAircraftTypesAsync(string x_SessionId, string x_DeviceId)
    {
      return GetAircraftTypesAsync(x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfAircraftTypeModel> GetAircraftTypesAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/aircrafttypes");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfAircraftTypeModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response2>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfAircraftTypeModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IAirportsClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfAirportModel> SearchAirportsAsync(System.Collections.Generic.IEnumerable<string> airportCodes, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfAirportModel> SearchAirportsAsync(System.Collections.Generic.IEnumerable<string> airportCodes, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class AirportsClient : IAirportsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public AirportsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfAirportModel> SearchAirportsAsync(System.Collections.Generic.IEnumerable<string> airportCodes, string x_SessionId, string x_DeviceId)
    {
      return SearchAirportsAsync(airportCodes, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfAirportModel> SearchAirportsAsync(System.Collections.Generic.IEnumerable<string> airportCodes, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/airports?");
      if (airportCodes != null)
      {
        foreach (var item_ in airportCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("AirportCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfAirportModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response3>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfAirportModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IFlightNumbersClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfFlightNumberModel> SearchFlightNumbersAsync(string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfFlightNumberModel> SearchFlightNumbersAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class FlightNumbersClient : IFlightNumbersClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public FlightNumbersClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfFlightNumberModel> SearchFlightNumbersAsync(string x_SessionId, string x_DeviceId)
    {
      return SearchFlightNumbersAsync(x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfFlightNumberModel> SearchFlightNumbersAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/flightnumbers");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfFlightNumberModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response4>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfFlightNumberModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IFlightsClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfFlightOpsLegWithPassengersModel> SearchFlightOpsLegsAsync(System.DateTimeOffset? scheduledFlightDate, int? flightNumber, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfFlightOpsLegWithPassengersModel> SearchFlightOpsLegsAsync(System.DateTimeOffset? scheduledFlightDate, int? flightNumber, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfFlightOpsCancelledLegWithPassengersModel> SearchFlightOpsCancelledAsync(System.DateTimeOffset? scheduledFlightDate, int? flightNumber, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfFlightOpsCancelledLegWithPassengersModel> SearchFlightOpsCancelledAsync(System.DateTimeOffset? scheduledFlightDate, int? flightNumber, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfFlightSegment> SearchFutureFlightsAsync(string airlineCode, int? flightNumber, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfFlightSegment> SearchFutureFlightsAsync(string airlineCode, int? flightNumber, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class FlightsClient : IFlightsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public FlightsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfFlightOpsLegWithPassengersModel> SearchFlightOpsLegsAsync(System.DateTimeOffset? scheduledFlightDate, int? flightNumber, string x_SessionId, string x_DeviceId)
    {
      return SearchFlightOpsLegsAsync(scheduledFlightDate, flightNumber, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfFlightOpsLegWithPassengersModel> SearchFlightOpsLegsAsync(System.DateTimeOffset? scheduledFlightDate, int? flightNumber, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/flights/flightops?");
      if (scheduledFlightDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ScheduledFlightDate") + "=").Append(System.Uri.EscapeDataString(scheduledFlightDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (flightNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("FlightNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(flightNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfFlightOpsLegWithPassengersModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response5>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfFlightOpsLegWithPassengersModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfFlightOpsCancelledLegWithPassengersModel> SearchFlightOpsCancelledAsync(System.DateTimeOffset? scheduledFlightDate, int? flightNumber, string x_SessionId, string x_DeviceId)
    {
      return SearchFlightOpsCancelledAsync(scheduledFlightDate, flightNumber, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfFlightOpsCancelledLegWithPassengersModel> SearchFlightOpsCancelledAsync(System.DateTimeOffset? scheduledFlightDate, int? flightNumber, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/flights/cancelled/flightops?");
      if (scheduledFlightDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ScheduledFlightDate") + "=").Append(System.Uri.EscapeDataString(scheduledFlightDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (flightNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("FlightNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(flightNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfFlightOpsCancelledLegWithPassengersModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response6>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response6>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfFlightOpsCancelledLegWithPassengersModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfFlightSegment> SearchFutureFlightsAsync(string airlineCode, int? flightNumber, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, string x_SessionId, string x_DeviceId)
    {
      return SearchFutureFlightsAsync(airlineCode, flightNumber, startDate, endDate, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfFlightSegment> SearchFutureFlightsAsync(string airlineCode, int? flightNumber, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/flights/future?");
      if (airlineCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("AirlineCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(airlineCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (flightNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("FlightNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(flightNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (startDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (endDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfFlightSegment>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response7>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfFlightSegment);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IClassificationsClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfDisruptionClassificationModel> GetDelayClassificationsAsync(string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfDisruptionClassificationModel> GetDelayClassificationsAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfLegacyDisruptionClassificationModel> GetCancellationClassificationsAsync(string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfLegacyDisruptionClassificationModel> GetCancellationClassificationsAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class ClassificationsClient : IClassificationsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public ClassificationsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfDisruptionClassificationModel> GetDelayClassificationsAsync(string x_SessionId, string x_DeviceId)
    {
      return GetDelayClassificationsAsync(x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfDisruptionClassificationModel> GetDelayClassificationsAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/classifications/delays");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfDisruptionClassificationModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response8>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response8>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfDisruptionClassificationModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfLegacyDisruptionClassificationModel> GetCancellationClassificationsAsync(string x_SessionId, string x_DeviceId)
    {
      return GetCancellationClassificationsAsync(x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfLegacyDisruptionClassificationModel> GetCancellationClassificationsAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/classifications/cancellations");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfLegacyDisruptionClassificationModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response9>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response9>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfLegacyDisruptionClassificationModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IBookingsClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<OTAAirBookRS> GetPNRAsync(string pnrNumber, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<OTAAirBookRS> GetPNRAsync(string pnrNumber, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class BookingsClient : IBookingsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public BookingsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<OTAAirBookRS> GetPNRAsync(string pnrNumber, string x_SessionId, string x_DeviceId)
    {
      return GetPNRAsync(pnrNumber, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<OTAAirBookRS> GetPNRAsync(string pnrNumber, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/bookings?");
      if (pnrNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("pnrNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pnrNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<OTAAirBookRS>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "404")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response10>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response10>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(OTAAirBookRS);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IItinerariesClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchSnapshotItinerariesAsync(string pnrNumber, System.DateTimeOffset? pnrCreationDate, string ticketNumber, int? snapshotAdvanceDays, string passengerFirstName, string passengerLastName, string passengerLoyaltyAccountNumber, System.DateTimeOffset? scheduledDepartureDateStart, System.DateTimeOffset? scheduledDepartureDateEnd, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchSnapshotItinerariesAsync(string pnrNumber, System.DateTimeOffset? pnrCreationDate, string ticketNumber, int? snapshotAdvanceDays, string passengerFirstName, string passengerLastName, string passengerLoyaltyAccountNumber, System.DateTimeOffset? scheduledDepartureDateStart, System.DateTimeOffset? scheduledDepartureDateEnd, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchPssItinerariesAsync(string pnrNumber, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchPssItinerariesAsync(string pnrNumber, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchAppraisalItinerariesAsync(string pnrNumber, System.DateTimeOffset? pnrCreationDate, string ticketNumber, int? snapshotAdvanceDays, string passengerFirstName, string passengerLastName, string passengerLoyaltyAccountNumber, System.DateTimeOffset? scheduledDepartureDateStart, System.DateTimeOffset? scheduledDepartureDateEnd, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchAppraisalItinerariesAsync(string pnrNumber, System.DateTimeOffset? pnrCreationDate, string ticketNumber, int? snapshotAdvanceDays, string passengerFirstName, string passengerLastName, string passengerLoyaltyAccountNumber, System.DateTimeOffset? scheduledDepartureDateStart, System.DateTimeOffset? scheduledDepartureDateEnd, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<MigratedPnrModel>>> SearchMigratedPNRAsync(string pnrNumber, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<MigratedPnrModel>>> SearchMigratedPNRAsync(string pnrNumber, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfFlightOpsItineraryModel> SearchFlightOpsItinerariesAsync(string pnrNumber, System.DateTimeOffset? pnrCreationDate, string ticketNumber, System.DateTimeOffset? scheduledFlightDate, int? flightNumber, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfFlightOpsItineraryModel> SearchFlightOpsItinerariesAsync(string pnrNumber, System.DateTimeOffset? pnrCreationDate, string ticketNumber, System.DateTimeOffset? scheduledFlightDate, int? flightNumber, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class ItinerariesClient : IItinerariesClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public ItinerariesClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchSnapshotItinerariesAsync(string pnrNumber, System.DateTimeOffset? pnrCreationDate, string ticketNumber, int? snapshotAdvanceDays, string passengerFirstName, string passengerLastName, string passengerLoyaltyAccountNumber, System.DateTimeOffset? scheduledDepartureDateStart, System.DateTimeOffset? scheduledDepartureDateEnd, string x_SessionId, string x_DeviceId)
    {
      return SearchSnapshotItinerariesAsync(pnrNumber, pnrCreationDate, ticketNumber, snapshotAdvanceDays, passengerFirstName, passengerLastName, passengerLoyaltyAccountNumber, scheduledDepartureDateStart, scheduledDepartureDateEnd, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchSnapshotItinerariesAsync(string pnrNumber, System.DateTimeOffset? pnrCreationDate, string ticketNumber, int? snapshotAdvanceDays, string passengerFirstName, string passengerLastName, string passengerLoyaltyAccountNumber, System.DateTimeOffset? scheduledDepartureDateStart, System.DateTimeOffset? scheduledDepartureDateEnd, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/itineraries/snapshot?");
      if (pnrNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PnrNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pnrNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (pnrCreationDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PnrCreationDate") + "=").Append(System.Uri.EscapeDataString(pnrCreationDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (ticketNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("TicketNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ticketNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (snapshotAdvanceDays != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("SnapshotAdvanceDays") + "=").Append(System.Uri.EscapeDataString(ConvertToString(snapshotAdvanceDays, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (passengerFirstName != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PassengerFirstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(passengerFirstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (passengerLastName != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PassengerLastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(passengerLastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (passengerLoyaltyAccountNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PassengerLoyaltyAccountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(passengerLoyaltyAccountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (scheduledDepartureDateStart != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ScheduledDepartureDateStart") + "=").Append(System.Uri.EscapeDataString(scheduledDepartureDateStart.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (scheduledDepartureDateEnd != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ScheduledDepartureDateEnd") + "=").Append(System.Uri.EscapeDataString(scheduledDepartureDateEnd.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfItineraryModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response11>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response11>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfItineraryModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchPssItinerariesAsync(string pnrNumber, string x_SessionId, string x_DeviceId)
    {
      return SearchPssItinerariesAsync(pnrNumber, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchPssItinerariesAsync(string pnrNumber, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/itineraries/pss?");
      if (pnrNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("pnrNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pnrNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfItineraryModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response12>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response12>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfItineraryModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchAppraisalItinerariesAsync(string pnrNumber, System.DateTimeOffset? pnrCreationDate, string ticketNumber, int? snapshotAdvanceDays, string passengerFirstName, string passengerLastName, string passengerLoyaltyAccountNumber, System.DateTimeOffset? scheduledDepartureDateStart, System.DateTimeOffset? scheduledDepartureDateEnd, string x_SessionId, string x_DeviceId)
    {
      return SearchAppraisalItinerariesAsync(pnrNumber, pnrCreationDate, ticketNumber, snapshotAdvanceDays, passengerFirstName, passengerLastName, passengerLoyaltyAccountNumber, scheduledDepartureDateStart, scheduledDepartureDateEnd, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchAppraisalItinerariesAsync(string pnrNumber, System.DateTimeOffset? pnrCreationDate, string ticketNumber, int? snapshotAdvanceDays, string passengerFirstName, string passengerLastName, string passengerLoyaltyAccountNumber, System.DateTimeOffset? scheduledDepartureDateStart, System.DateTimeOffset? scheduledDepartureDateEnd, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/itineraries/appraisals?");
      if (pnrNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PnrNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pnrNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (pnrCreationDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PnrCreationDate") + "=").Append(System.Uri.EscapeDataString(pnrCreationDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (ticketNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("TicketNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ticketNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (snapshotAdvanceDays != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("SnapshotAdvanceDays") + "=").Append(System.Uri.EscapeDataString(ConvertToString(snapshotAdvanceDays, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (passengerFirstName != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PassengerFirstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(passengerFirstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (passengerLastName != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PassengerLastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(passengerLastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (passengerLoyaltyAccountNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PassengerLoyaltyAccountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(passengerLoyaltyAccountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (scheduledDepartureDateStart != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ScheduledDepartureDateStart") + "=").Append(System.Uri.EscapeDataString(scheduledDepartureDateStart.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (scheduledDepartureDateEnd != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ScheduledDepartureDateEnd") + "=").Append(System.Uri.EscapeDataString(scheduledDepartureDateEnd.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfItineraryModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response13>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response13>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfItineraryModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<MigratedPnrModel>>> SearchMigratedPNRAsync(string pnrNumber, string x_SessionId, string x_DeviceId)
    {
      return SearchMigratedPNRAsync(pnrNumber, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<MigratedPnrModel>>> SearchMigratedPNRAsync(string pnrNumber, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/itineraries/migrated?");
      if (pnrNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("pnrNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pnrNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<MigratedPnrModel>>>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response14>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response14>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<MigratedPnrModel>>);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfFlightOpsItineraryModel> SearchFlightOpsItinerariesAsync(string pnrNumber, System.DateTimeOffset? pnrCreationDate, string ticketNumber, System.DateTimeOffset? scheduledFlightDate, int? flightNumber, string x_SessionId, string x_DeviceId)
    {
      return SearchFlightOpsItinerariesAsync(pnrNumber, pnrCreationDate, ticketNumber, scheduledFlightDate, flightNumber, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfFlightOpsItineraryModel> SearchFlightOpsItinerariesAsync(string pnrNumber, System.DateTimeOffset? pnrCreationDate, string ticketNumber, System.DateTimeOffset? scheduledFlightDate, int? flightNumber, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/itineraries/flightops?");
      if (pnrNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PnrNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pnrNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (pnrCreationDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PnrCreationDate") + "=").Append(System.Uri.EscapeDataString(pnrCreationDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (ticketNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("TicketNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ticketNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (scheduledFlightDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ScheduledFlightDate") + "=").Append(System.Uri.EscapeDataString(scheduledFlightDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (flightNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("FlightNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(flightNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfFlightOpsItineraryModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response15>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response15>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfFlightOpsItineraryModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IOriginDestinationsClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<PagedSearchResultOfOriginDestinationRootModel> SearchAppraisalOriginDestinationsAsync(int? top, int? skip, string passengerFirstName, string passengerLastName, string passengerLoyaltyAccountNumber, System.DateTimeOffset? scheduledDepartureDateStart, System.DateTimeOffset? scheduledDepartureDateEnd, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<PagedSearchResultOfOriginDestinationRootModel> SearchAppraisalOriginDestinationsAsync(int? top, int? skip, string passengerFirstName, string passengerLastName, string passengerLoyaltyAccountNumber, System.DateTimeOffset? scheduledDepartureDateStart, System.DateTimeOffset? scheduledDepartureDateEnd, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class OriginDestinationsClient : IOriginDestinationsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public OriginDestinationsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<PagedSearchResultOfOriginDestinationRootModel> SearchAppraisalOriginDestinationsAsync(int? top, int? skip, string passengerFirstName, string passengerLastName, string passengerLoyaltyAccountNumber, System.DateTimeOffset? scheduledDepartureDateStart, System.DateTimeOffset? scheduledDepartureDateEnd, string x_SessionId, string x_DeviceId)
    {
      return SearchAppraisalOriginDestinationsAsync(top, skip, passengerFirstName, passengerLastName, passengerLoyaltyAccountNumber, scheduledDepartureDateStart, scheduledDepartureDateEnd, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<PagedSearchResultOfOriginDestinationRootModel> SearchAppraisalOriginDestinationsAsync(int? top, int? skip, string passengerFirstName, string passengerLastName, string passengerLoyaltyAccountNumber, System.DateTimeOffset? scheduledDepartureDateStart, System.DateTimeOffset? scheduledDepartureDateEnd, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/origindestinations/appraisals?");
      if (top != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("Top") + "=").Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (skip != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (passengerFirstName != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PassengerFirstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(passengerFirstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (passengerLastName != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PassengerLastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(passengerLastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (passengerLoyaltyAccountNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PassengerLoyaltyAccountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(passengerLoyaltyAccountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (scheduledDepartureDateStart != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ScheduledDepartureDateStart") + "=").Append(System.Uri.EscapeDataString(scheduledDepartureDateStart.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (scheduledDepartureDateEnd != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ScheduledDepartureDateEnd") + "=").Append(System.Uri.EscapeDataString(scheduledDepartureDateEnd.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<PagedSearchResultOfOriginDestinationRootModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response16>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response16>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(PagedSearchResultOfOriginDestinationRootModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IIncidentHandlingClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<IncidentResponseModel> CreateIncidentAsync(long? id, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string regime, int? flightNumber, string disruptionCode, string overrideOption, string createdBy, string updatedBy, bool? status, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<IncidentResponseModel> CreateIncidentAsync(long? id, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string regime, int? flightNumber, string disruptionCode, string overrideOption, string createdBy, string updatedBy, bool? status, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfIncidentResponseModel> GetIncidentsAsync(string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfIncidentResponseModel> GetIncidentsAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class IncidentHandlingClient : IIncidentHandlingClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public IncidentHandlingClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<IncidentResponseModel> CreateIncidentAsync(long? id, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string regime, int? flightNumber, string disruptionCode, string overrideOption, string createdBy, string updatedBy, bool? status, string x_SessionId, string x_DeviceId)
    {
      return CreateIncidentAsync(id, dateFrom, dateTo, regime, flightNumber, disruptionCode, overrideOption, createdBy, updatedBy, status, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<IncidentResponseModel> CreateIncidentAsync(long? id, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string regime, int? flightNumber, string disruptionCode, string overrideOption, string createdBy, string updatedBy, bool? status, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/incidenthandling/incident?");
      if (id != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (dateFrom != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DateFrom") + "=").Append(System.Uri.EscapeDataString(dateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (dateTo != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DateTo") + "=").Append(System.Uri.EscapeDataString(dateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (regime != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("Regime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(regime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (flightNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("FlightNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(flightNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (disruptionCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DisruptionCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disruptionCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (overrideOption != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("OverrideOption") + "=").Append(System.Uri.EscapeDataString(ConvertToString(overrideOption, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (createdBy != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("CreatedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(createdBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (updatedBy != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("UpdatedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updatedBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (status != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<IncidentResponseModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(IncidentResponseModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfIncidentResponseModel> GetIncidentsAsync(string x_SessionId, string x_DeviceId)
    {
      return GetIncidentsAsync(x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfIncidentResponseModel> GetIncidentsAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/incidenthandling/searchincidents");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfIncidentResponseModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfIncidentResponseModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IGeneralClient
  {
    /// <summary>Get application information</summary>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<ApplicationInfoModel> GetInfoAsync(string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>Get application information</summary>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<ApplicationInfoModel> GetInfoAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class GeneralClient : IGeneralClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public GeneralClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Get application information</summary>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<ApplicationInfoModel> GetInfoAsync(string x_SessionId, string x_DeviceId)
    {
      return GetInfoAsync(x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>Get application information</summary>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<ApplicationInfoModel> GetInfoAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/info");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ApplicationInfoModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response17>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response17>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(ApplicationInfoModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IExpenseHandlingClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<ExpenseResponseModel> CreateExpenseAsync(int? id, string delayTimeCategory, int? delayTimeMinValueInMins, int? delayTimeMaxValueInMins, int? expenseTypeId, string expenseTypeCode, int? regionId, string region, int? thresholdValue, System.DateTimeOffset? effectiveDate, System.DateTimeOffset? updatedDateTime, string updatedBy, int? status, int? airportCodeId, string airportCode, int? linkId, string currentStatus, System.DateTimeOffset? endEffectiveDate, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<ExpenseResponseModel> CreateExpenseAsync(int? id, string delayTimeCategory, int? delayTimeMinValueInMins, int? delayTimeMaxValueInMins, int? expenseTypeId, string expenseTypeCode, int? regionId, string region, int? thresholdValue, System.DateTimeOffset? effectiveDate, System.DateTimeOffset? updatedDateTime, string updatedBy, int? status, int? airportCodeId, string airportCode, int? linkId, string currentStatus, System.DateTimeOffset? endEffectiveDate, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExpenseResponseModel> GetExpensesAsync(string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExpenseResponseModel> GetExpensesAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class ExpenseHandlingClient : IExpenseHandlingClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public ExpenseHandlingClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<ExpenseResponseModel> CreateExpenseAsync(int? id, string delayTimeCategory, int? delayTimeMinValueInMins, int? delayTimeMaxValueInMins, int? expenseTypeId, string expenseTypeCode, int? regionId, string region, int? thresholdValue, System.DateTimeOffset? effectiveDate, System.DateTimeOffset? updatedDateTime, string updatedBy, int? status, int? airportCodeId, string airportCode, int? linkId, string currentStatus, System.DateTimeOffset? endEffectiveDate, string x_SessionId, string x_DeviceId)
    {
      return CreateExpenseAsync(id, delayTimeCategory, delayTimeMinValueInMins, delayTimeMaxValueInMins, expenseTypeId, expenseTypeCode, regionId, region, thresholdValue, effectiveDate, updatedDateTime, updatedBy, status, airportCodeId, airportCode, linkId, currentStatus, endEffectiveDate, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<ExpenseResponseModel> CreateExpenseAsync(int? id, string delayTimeCategory, int? delayTimeMinValueInMins, int? delayTimeMaxValueInMins, int? expenseTypeId, string expenseTypeCode, int? regionId, string region, int? thresholdValue, System.DateTimeOffset? effectiveDate, System.DateTimeOffset? updatedDateTime, string updatedBy, int? status, int? airportCodeId, string airportCode, int? linkId, string currentStatus, System.DateTimeOffset? endEffectiveDate, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/expensehandling/upsertexpense?");
      if (id != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (delayTimeCategory != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DelayTimeCategory") + "=").Append(System.Uri.EscapeDataString(ConvertToString(delayTimeCategory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (delayTimeMinValueInMins != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DelayTimeMinValueInMins") + "=").Append(System.Uri.EscapeDataString(ConvertToString(delayTimeMinValueInMins, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (delayTimeMaxValueInMins != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DelayTimeMaxValueInMins") + "=").Append(System.Uri.EscapeDataString(ConvertToString(delayTimeMaxValueInMins, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (expenseTypeId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ExpenseTypeId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expenseTypeId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (expenseTypeCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ExpenseTypeCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expenseTypeCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (regionId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("RegionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(regionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (region != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("Region") + "=").Append(System.Uri.EscapeDataString(ConvertToString(region, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (thresholdValue != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ThresholdValue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(thresholdValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (effectiveDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("EffectiveDate") + "=").Append(System.Uri.EscapeDataString(effectiveDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (updatedDateTime != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("UpdatedDateTime") + "=").Append(System.Uri.EscapeDataString(updatedDateTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (updatedBy != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("UpdatedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updatedBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (status != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (airportCodeId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("AirportCodeId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(airportCodeId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (airportCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("AirportCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(airportCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (linkId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("LinkId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(linkId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (currentStatus != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("CurrentStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currentStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (endEffectiveDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("EndEffectiveDate") + "=").Append(System.Uri.EscapeDataString(endEffectiveDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ExpenseResponseModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(ExpenseResponseModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfExpenseResponseModel> GetExpensesAsync(string x_SessionId, string x_DeviceId)
    {
      return GetExpensesAsync(x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfExpenseResponseModel> GetExpensesAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/expensehandling/getexpenses");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfExpenseResponseModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfExpenseResponseModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IClaimAssessmentsClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task SaveClaimAssessmentAsync(string x_SessionId, string x_DeviceId, ClaimAssessmentModel claimAssessment);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task SaveClaimAssessmentAsync(string x_SessionId, string x_DeviceId, ClaimAssessmentModel claimAssessment, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfClaimAssessmentsSummaryModel> GetClaimAssessmentsSummariesAsync(System.DateTimeOffset? reportDate, System.Collections.Generic.IEnumerable<ClaimAssessmentClientIdType> claimAssessmentClientIdType, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfClaimAssessmentsSummaryModel> GetClaimAssessmentsSummariesAsync(System.DateTimeOffset? reportDate, System.Collections.Generic.IEnumerable<ClaimAssessmentClientIdType> claimAssessmentClientIdType, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<ClaimAssessmentsCountModel> GetClaimAssessmentsCountsAsync(System.DateTimeOffset? departureDateStart, System.DateTimeOffset? departureDateEnd, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<ClaimAssessmentsCountModel> GetClaimAssessmentsCountsAsync(System.DateTimeOffset? departureDateStart, System.DateTimeOffset? departureDateEnd, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task TestAppraiseAsync(System.Guid? originDestinationId, System.Guid? passengerId, System.Guid? appraisalBatchId, string pnrNumber, System.DateTimeOffset? pnrCreationDate, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task TestAppraiseAsync(System.Guid? originDestinationId, System.Guid? passengerId, System.Guid? appraisalBatchId, string pnrNumber, System.DateTimeOffset? pnrCreationDate, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class ClaimAssessmentsClient : IClaimAssessmentsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public ClaimAssessmentsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task SaveClaimAssessmentAsync(string x_SessionId, string x_DeviceId, ClaimAssessmentModel claimAssessment)
    {
      return SaveClaimAssessmentAsync(x_SessionId, x_DeviceId, claimAssessment, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task SaveClaimAssessmentAsync(string x_SessionId, string x_DeviceId, ClaimAssessmentModel claimAssessment, System.Threading.CancellationToken cancellationToken)
    {
      if (claimAssessment == null)
        throw new System.ArgumentNullException("claimAssessment");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/claims/assessments");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(claimAssessment, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response18>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response18>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfClaimAssessmentsSummaryModel> GetClaimAssessmentsSummariesAsync(System.DateTimeOffset? reportDate, System.Collections.Generic.IEnumerable<ClaimAssessmentClientIdType> claimAssessmentClientIdType, string x_SessionId, string x_DeviceId)
    {
      return GetClaimAssessmentsSummariesAsync(reportDate, claimAssessmentClientIdType, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfClaimAssessmentsSummaryModel> GetClaimAssessmentsSummariesAsync(System.DateTimeOffset? reportDate, System.Collections.Generic.IEnumerable<ClaimAssessmentClientIdType> claimAssessmentClientIdType, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/claims/assessmentssummaries?");
      if (reportDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ReportDate") + "=").Append(System.Uri.EscapeDataString(reportDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (claimAssessmentClientIdType != null)
      {
        foreach (var item_ in claimAssessmentClientIdType) { urlBuilder_.Append(System.Uri.EscapeDataString("ClaimAssessmentClientIdType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfClaimAssessmentsSummaryModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response19>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response19>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfClaimAssessmentsSummaryModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<ClaimAssessmentsCountModel> GetClaimAssessmentsCountsAsync(System.DateTimeOffset? departureDateStart, System.DateTimeOffset? departureDateEnd, string x_SessionId, string x_DeviceId)
    {
      return GetClaimAssessmentsCountsAsync(departureDateStart, departureDateEnd, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<ClaimAssessmentsCountModel> GetClaimAssessmentsCountsAsync(System.DateTimeOffset? departureDateStart, System.DateTimeOffset? departureDateEnd, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/claims/assessmentscounts?");
      if (departureDateStart != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DepartureDateStart") + "=").Append(System.Uri.EscapeDataString(departureDateStart.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (departureDateEnd != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DepartureDateEnd") + "=").Append(System.Uri.EscapeDataString(departureDateEnd.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ClaimAssessmentsCountModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response20>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response20>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(ClaimAssessmentsCountModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task TestAppraiseAsync(System.Guid? originDestinationId, System.Guid? passengerId, System.Guid? appraisalBatchId, string pnrNumber, System.DateTimeOffset? pnrCreationDate, string x_SessionId, string x_DeviceId)
    {
      return TestAppraiseAsync(originDestinationId, passengerId, appraisalBatchId, pnrNumber, pnrCreationDate, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task TestAppraiseAsync(System.Guid? originDestinationId, System.Guid? passengerId, System.Guid? appraisalBatchId, string pnrNumber, System.DateTimeOffset? pnrCreationDate, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/claims/testappraise?");
      if (originDestinationId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("OriginDestinationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originDestinationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (passengerId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PassengerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(passengerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (appraisalBatchId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("AppraisalBatchId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(appraisalBatchId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (pnrNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PnrNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pnrNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (pnrCreationDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PnrCreationDate") + "=").Append(System.Uri.EscapeDataString(pnrCreationDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response21>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response21>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IClaimsProcessingClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<CompensationRegulationSearchResponse> SearchCompensationRegulationsAsync(System.Collections.Generic.IEnumerable<string> countryCodes, System.DateTimeOffset? effectiveDate, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<CompensationRegulationSearchResponse> SearchCompensationRegulationsAsync(System.Collections.Generic.IEnumerable<string> countryCodes, System.DateTimeOffset? effectiveDate, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<FlightDisruptionResult> GetFlightDisruptionClaimAsync(string airline, int? flightNumber, int? operatingAirlineFlightNumber, System.DateTimeOffset? departureDate, string departureAirport, string arrivalAirport, string firstName, string lastName, string pNR, string ticketNumber, string claimDate, System.Guid? dynamicsCaseId, string dynamicsCaseNumber, int? snapshotAdvanceDays, System.Guid? dynamicsWebRequestId, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<FlightDisruptionResult> GetFlightDisruptionClaimAsync(string airline, int? flightNumber, int? operatingAirlineFlightNumber, System.DateTimeOffset? departureDate, string departureAirport, string arrivalAirport, string firstName, string lastName, string pNR, string ticketNumber, string claimDate, System.Guid? dynamicsCaseId, string dynamicsCaseNumber, int? snapshotAdvanceDays, System.Guid? dynamicsWebRequestId, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<FlightDisruptionResult> GetProactiveFlightDisruptionClaimAsync(System.Guid? originDestinationId, System.Guid? passengerCorrelationId, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<FlightDisruptionResult> GetProactiveFlightDisruptionClaimAsync(System.Guid? originDestinationId, System.Guid? passengerCorrelationId, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class ClaimsProcessingClient : IClaimsProcessingClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public ClaimsProcessingClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<CompensationRegulationSearchResponse> SearchCompensationRegulationsAsync(System.Collections.Generic.IEnumerable<string> countryCodes, System.DateTimeOffset? effectiveDate, string x_SessionId, string x_DeviceId)
    {
      return SearchCompensationRegulationsAsync(countryCodes, effectiveDate, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<CompensationRegulationSearchResponse> SearchCompensationRegulationsAsync(System.Collections.Generic.IEnumerable<string> countryCodes, System.DateTimeOffset? effectiveDate, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/claimsprocessing/compensationregulations?");
      if (countryCodes != null)
      {
        foreach (var item_ in countryCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("CountryCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      if (effectiveDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("EffectiveDate") + "=").Append(System.Uri.EscapeDataString(effectiveDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<CompensationRegulationSearchResponse>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(CompensationRegulationSearchResponse);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<FlightDisruptionResult> GetFlightDisruptionClaimAsync(string airline, int? flightNumber, int? operatingAirlineFlightNumber, System.DateTimeOffset? departureDate, string departureAirport, string arrivalAirport, string firstName, string lastName, string pNR, string ticketNumber, string claimDate, System.Guid? dynamicsCaseId, string dynamicsCaseNumber, int? snapshotAdvanceDays, System.Guid? dynamicsWebRequestId, string x_SessionId, string x_DeviceId)
    {
      return GetFlightDisruptionClaimAsync(airline, flightNumber, operatingAirlineFlightNumber, departureDate, departureAirport, arrivalAirport, firstName, lastName, pNR, ticketNumber, claimDate, dynamicsCaseId, dynamicsCaseNumber, snapshotAdvanceDays, dynamicsWebRequestId, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<FlightDisruptionResult> GetFlightDisruptionClaimAsync(string airline, int? flightNumber, int? operatingAirlineFlightNumber, System.DateTimeOffset? departureDate, string departureAirport, string arrivalAirport, string firstName, string lastName, string pNR, string ticketNumber, string claimDate, System.Guid? dynamicsCaseId, string dynamicsCaseNumber, int? snapshotAdvanceDays, System.Guid? dynamicsWebRequestId, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/claimsprocessing/flightdisruption?");
      if (airline != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("Airline") + "=").Append(System.Uri.EscapeDataString(ConvertToString(airline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (flightNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("FlightNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(flightNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (operatingAirlineFlightNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("OperatingAirlineFlightNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(operatingAirlineFlightNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (departureDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DepartureDate") + "=").Append(System.Uri.EscapeDataString(departureDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (departureAirport != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DepartureAirport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(departureAirport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (arrivalAirport != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ArrivalAirport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(arrivalAirport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (firstName != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("FirstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (lastName != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("LastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (pNR != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PNR") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pNR, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (ticketNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("TicketNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ticketNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (claimDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("ClaimDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(claimDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (dynamicsCaseId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DynamicsCaseId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dynamicsCaseId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (dynamicsCaseNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DynamicsCaseNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dynamicsCaseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (snapshotAdvanceDays != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("SnapshotAdvanceDays") + "=").Append(System.Uri.EscapeDataString(ConvertToString(snapshotAdvanceDays, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (dynamicsWebRequestId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DynamicsWebRequestId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dynamicsWebRequestId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<FlightDisruptionResult>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(FlightDisruptionResult);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<FlightDisruptionResult> GetProactiveFlightDisruptionClaimAsync(System.Guid? originDestinationId, System.Guid? passengerCorrelationId, string x_SessionId, string x_DeviceId)
    {
      return GetProactiveFlightDisruptionClaimAsync(originDestinationId, passengerCorrelationId, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<FlightDisruptionResult> GetProactiveFlightDisruptionClaimAsync(System.Guid? originDestinationId, System.Guid? passengerCorrelationId, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/claimsprocessing/flightdisruption/proactive?");
      if (originDestinationId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("OriginDestinationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originDestinationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (passengerCorrelationId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("PassengerCorrelationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(passengerCorrelationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<FlightDisruptionResult>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(FlightDisruptionResult);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IExposureClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExposureGroupModel> GetExposureGroupsAsync(string departureDateStart, string departureDateEnd, System.Collections.Generic.IEnumerable<int> flightNumber, System.Collections.Generic.IEnumerable<string> departureAirport, System.Collections.Generic.IEnumerable<string> arrivalAirport, System.Collections.Generic.IEnumerable<int> departureIataCode, System.Collections.Generic.IEnumerable<int> subCode, System.Collections.Generic.IEnumerable<int> arrivalIataCode, System.Collections.Generic.IEnumerable<string> cancellationCode, System.Collections.Generic.IEnumerable<string> aircraftType, bool? mslOnly, bool? isOrigin, System.Collections.Generic.IEnumerable<ExposureGroupingType> groupBy, System.Collections.Generic.IEnumerable<ExposureRegimeType> regime, string api_version, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExposureGroupModel> GetExposureGroupsAsync(string departureDateStart, string departureDateEnd, System.Collections.Generic.IEnumerable<int> flightNumber, System.Collections.Generic.IEnumerable<string> departureAirport, System.Collections.Generic.IEnumerable<string> arrivalAirport, System.Collections.Generic.IEnumerable<int> departureIataCode, System.Collections.Generic.IEnumerable<int> subCode, System.Collections.Generic.IEnumerable<int> arrivalIataCode, System.Collections.Generic.IEnumerable<string> cancellationCode, System.Collections.Generic.IEnumerable<string> aircraftType, bool? mslOnly, bool? isOrigin, System.Collections.Generic.IEnumerable<ExposureGroupingType> groupBy, System.Collections.Generic.IEnumerable<ExposureRegimeType> regime, string api_version, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExposureGroupModel> SendExposureQueryAsync(string api_version, string x_SessionId, string x_DeviceId, ExposureQuery query);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExposureGroupModel> SendExposureQueryAsync(string api_version, string x_SessionId, string x_DeviceId, ExposureQuery query, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExposurePassengerModel> GetExposurePassengersAsync(System.DateTimeOffset? departureDate, int? flightNumber, bool? mslOnly, string api_version, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExposurePassengerModel> GetExposurePassengersAsync(System.DateTimeOffset? departureDate, int? flightNumber, bool? mslOnly, string api_version, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class ExposureClient : IExposureClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public ExposureClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfExposureGroupModel> GetExposureGroupsAsync(string departureDateStart, string departureDateEnd, System.Collections.Generic.IEnumerable<int> flightNumber, System.Collections.Generic.IEnumerable<string> departureAirport, System.Collections.Generic.IEnumerable<string> arrivalAirport, System.Collections.Generic.IEnumerable<int> departureIataCode, System.Collections.Generic.IEnumerable<int> subCode, System.Collections.Generic.IEnumerable<int> arrivalIataCode, System.Collections.Generic.IEnumerable<string> cancellationCode, System.Collections.Generic.IEnumerable<string> aircraftType, bool? mslOnly, bool? isOrigin, System.Collections.Generic.IEnumerable<ExposureGroupingType> groupBy, System.Collections.Generic.IEnumerable<ExposureRegimeType> regime, string api_version, string x_SessionId, string x_DeviceId)
    {
      return GetExposureGroupsAsync(departureDateStart, departureDateEnd, flightNumber, departureAirport, arrivalAirport, departureIataCode, subCode, arrivalIataCode, cancellationCode, aircraftType, mslOnly, isOrigin, groupBy, regime, api_version, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfExposureGroupModel> GetExposureGroupsAsync(string departureDateStart, string departureDateEnd, System.Collections.Generic.IEnumerable<int> flightNumber, System.Collections.Generic.IEnumerable<string> departureAirport, System.Collections.Generic.IEnumerable<string> arrivalAirport, System.Collections.Generic.IEnumerable<int> departureIataCode, System.Collections.Generic.IEnumerable<int> subCode, System.Collections.Generic.IEnumerable<int> arrivalIataCode, System.Collections.Generic.IEnumerable<string> cancellationCode, System.Collections.Generic.IEnumerable<string> aircraftType, bool? mslOnly, bool? isOrigin, System.Collections.Generic.IEnumerable<ExposureGroupingType> groupBy, System.Collections.Generic.IEnumerable<ExposureRegimeType> regime, string api_version, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/exposure/groups?");
      if (departureDateStart != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DepartureDateStart") + "=").Append(System.Uri.EscapeDataString(ConvertToString(departureDateStart, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (departureDateEnd != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DepartureDateEnd") + "=").Append(System.Uri.EscapeDataString(ConvertToString(departureDateEnd, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (flightNumber != null)
      {
        foreach (var item_ in flightNumber) { urlBuilder_.Append(System.Uri.EscapeDataString("FlightNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      if (departureAirport != null)
      {
        foreach (var item_ in departureAirport) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartureAirport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      if (arrivalAirport != null)
      {
        foreach (var item_ in arrivalAirport) { urlBuilder_.Append(System.Uri.EscapeDataString("ArrivalAirport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      if (departureIataCode != null)
      {
        foreach (var item_ in departureIataCode) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartureIataCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      if (subCode != null)
      {
        foreach (var item_ in subCode) { urlBuilder_.Append(System.Uri.EscapeDataString("SubCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      if (arrivalIataCode != null)
      {
        foreach (var item_ in arrivalIataCode) { urlBuilder_.Append(System.Uri.EscapeDataString("ArrivalIataCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      if (cancellationCode != null)
      {
        foreach (var item_ in cancellationCode) { urlBuilder_.Append(System.Uri.EscapeDataString("CancellationCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      if (aircraftType != null)
      {
        foreach (var item_ in aircraftType) { urlBuilder_.Append(System.Uri.EscapeDataString("AircraftType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      if (mslOnly != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("MslOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mslOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (isOrigin != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("IsOrigin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOrigin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (groupBy != null)
      {
        foreach (var item_ in groupBy) { urlBuilder_.Append(System.Uri.EscapeDataString("GroupBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      if (regime != null)
      {
        foreach (var item_ in regime) { urlBuilder_.Append(System.Uri.EscapeDataString("Regime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      urlBuilder_.Append(System.Uri.EscapeDataString("api-version") + "=").Append(System.Uri.EscapeDataString(api_version != null ? ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfExposureGroupModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response22>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response22>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfExposureGroupModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfExposureGroupModel> SendExposureQueryAsync(string api_version, string x_SessionId, string x_DeviceId, ExposureQuery query)
    {
      return SendExposureQueryAsync(api_version, x_SessionId, x_DeviceId, query, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfExposureGroupModel> SendExposureQueryAsync(string api_version, string x_SessionId, string x_DeviceId, ExposureQuery query, System.Threading.CancellationToken cancellationToken)
    {
      if (query == null)
        throw new System.ArgumentNullException("query");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/exposure/groups/queries?");
      urlBuilder_.Append(System.Uri.EscapeDataString("api-version") + "=").Append(System.Uri.EscapeDataString(api_version != null ? ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(query, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfExposureGroupModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response23>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response23>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfExposureGroupModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfExposurePassengerModel> GetExposurePassengersAsync(System.DateTimeOffset? departureDate, int? flightNumber, bool? mslOnly, string api_version, string x_SessionId, string x_DeviceId)
    {
      return GetExposurePassengersAsync(departureDate, flightNumber, mslOnly, api_version, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfExposurePassengerModel> GetExposurePassengersAsync(System.DateTimeOffset? departureDate, int? flightNumber, bool? mslOnly, string api_version, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/exposure/passengers?");
      if (departureDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("DepartureDate") + "=").Append(System.Uri.EscapeDataString(departureDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (flightNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("FlightNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(flightNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (mslOnly != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("MslOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mslOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Append(System.Uri.EscapeDataString("api-version") + "=").Append(System.Uri.EscapeDataString(api_version != null ? ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfExposurePassengerModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response24>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response24>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfExposurePassengerModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface ISsetOperationsClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task NotifyAssessmentCaseCreationClickAsync(string x_SessionId, string x_DeviceId, SsetOperationModel ssetOperation);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task NotifyAssessmentCaseCreationClickAsync(string x_SessionId, string x_DeviceId, SsetOperationModel ssetOperation, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfLanguageModel> GetLanguagesAsync(string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfLanguageModel> GetLanguagesAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfTitleModel> GetTitlesAsync(string languageCode, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfTitleModel> GetTitlesAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfRelationshipModel> GetRelationshipsAsync(string languageCode, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfRelationshipModel> GetRelationshipsAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExpenseTypeModel> GetExpenseTypesAsync(string languageCode, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExpenseTypeModel> GetExpenseTypesAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfMealTypeModel> GetMealTypesAsync(string languageCode, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfMealTypeModel> GetMealTypesAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfTransportationTypeModel> GetTransportationTypesAsync(string languageCode, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfTransportationTypeModel> GetTransportationTypesAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfStarAllianceTierModel> GetStarAllianceTiersAsync(string languageCode, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfStarAllianceTierModel> GetStarAllianceTiersAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfCountryModel> GetCountriesAsync(string languageCode, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfCountryModel> GetCountriesAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfProvinceModel> GetProvincesAsync(string languageCode, string countryCode, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfProvinceModel> GetProvincesAsync(string languageCode, string countryCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfAirportModel> GetAirportsAsync(System.Collections.Generic.IEnumerable<string> airportCodes, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfAirportModel> GetAirportsAsync(System.Collections.Generic.IEnumerable<string> airportCodes, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfRegimeModel> GetRegimesAsync(string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfRegimeModel> GetRegimesAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfCurrencyModel> GetCurrenciesAsync(string languageCode, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfCurrencyModel> GetCurrenciesAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchOriginDestinationAsync(string ticketNumber, string lastName, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchOriginDestinationAsync(string ticketNumber, string lastName, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SsetResponse> CreateWebRequestAsync(string x_SessionId, string x_DeviceId, SsetRequest ssetRequest);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SsetResponse> CreateWebRequestAsync(string x_SessionId, string x_DeviceId, SsetRequest ssetRequest, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfOverrideOptionModel> GetOverrideOptionsAsync(string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfOverrideOptionModel> GetOverrideOptionsAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<AzureFileResponse> UploadExpenseDocumentAsync(string x_SessionId, string x_DeviceId, AzureFileRequest azureFileRequest);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<AzureFileResponse> UploadExpenseDocumentAsync(string x_SessionId, string x_DeviceId, AzureFileRequest azureFileRequest, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class SsetOperationsClient : ISsetOperationsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public SsetOperationsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task NotifyAssessmentCaseCreationClickAsync(string x_SessionId, string x_DeviceId, SsetOperationModel ssetOperation)
    {
      return NotifyAssessmentCaseCreationClickAsync(x_SessionId, x_DeviceId, ssetOperation, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task NotifyAssessmentCaseCreationClickAsync(string x_SessionId, string x_DeviceId, SsetOperationModel ssetOperation, System.Threading.CancellationToken cancellationToken)
    {
      if (ssetOperation == null)
        throw new System.ArgumentNullException("ssetOperation");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ssetOperation, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfLanguageModel> GetLanguagesAsync(string x_SessionId, string x_DeviceId)
    {
      return GetLanguagesAsync(x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfLanguageModel> GetLanguagesAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/languages");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfLanguageModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfLanguageModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfTitleModel> GetTitlesAsync(string languageCode, string x_SessionId, string x_DeviceId)
    {
      return GetTitlesAsync(languageCode, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfTitleModel> GetTitlesAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/titles?");
      if (languageCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("languageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfTitleModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfTitleModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfRelationshipModel> GetRelationshipsAsync(string languageCode, string x_SessionId, string x_DeviceId)
    {
      return GetRelationshipsAsync(languageCode, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfRelationshipModel> GetRelationshipsAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/relationships?");
      if (languageCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("languageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfRelationshipModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfRelationshipModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfExpenseTypeModel> GetExpenseTypesAsync(string languageCode, string x_SessionId, string x_DeviceId)
    {
      return GetExpenseTypesAsync(languageCode, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfExpenseTypeModel> GetExpenseTypesAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/expensetypes?");
      if (languageCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("languageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfExpenseTypeModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfExpenseTypeModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfMealTypeModel> GetMealTypesAsync(string languageCode, string x_SessionId, string x_DeviceId)
    {
      return GetMealTypesAsync(languageCode, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfMealTypeModel> GetMealTypesAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/mealtypes?");
      if (languageCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("languageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfMealTypeModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfMealTypeModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfTransportationTypeModel> GetTransportationTypesAsync(string languageCode, string x_SessionId, string x_DeviceId)
    {
      return GetTransportationTypesAsync(languageCode, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfTransportationTypeModel> GetTransportationTypesAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/transportationtypes?");
      if (languageCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("languageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfTransportationTypeModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfTransportationTypeModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfStarAllianceTierModel> GetStarAllianceTiersAsync(string languageCode, string x_SessionId, string x_DeviceId)
    {
      return GetStarAllianceTiersAsync(languageCode, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfStarAllianceTierModel> GetStarAllianceTiersAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/staralliancetiers?");
      if (languageCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("languageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfStarAllianceTierModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfStarAllianceTierModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfCountryModel> GetCountriesAsync(string languageCode, string x_SessionId, string x_DeviceId)
    {
      return GetCountriesAsync(languageCode, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfCountryModel> GetCountriesAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/countries?");
      if (languageCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("languageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfCountryModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfCountryModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfProvinceModel> GetProvincesAsync(string languageCode, string countryCode, string x_SessionId, string x_DeviceId)
    {
      return GetProvincesAsync(languageCode, countryCode, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfProvinceModel> GetProvincesAsync(string languageCode, string countryCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/provinces?");
      if (languageCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("languageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (countryCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("countryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfProvinceModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfProvinceModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfAirportModel> GetAirportsAsync(System.Collections.Generic.IEnumerable<string> airportCodes, string x_SessionId, string x_DeviceId)
    {
      return GetAirportsAsync(airportCodes, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfAirportModel> GetAirportsAsync(System.Collections.Generic.IEnumerable<string> airportCodes, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/airports?");
      if (airportCodes != null)
      {
        foreach (var item_ in airportCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("AirportCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfAirportModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfAirportModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfRegimeModel> GetRegimesAsync(string x_SessionId, string x_DeviceId)
    {
      return GetRegimesAsync(x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfRegimeModel> GetRegimesAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/regimes");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfRegimeModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfRegimeModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfCurrencyModel> GetCurrenciesAsync(string languageCode, string x_SessionId, string x_DeviceId)
    {
      return GetCurrenciesAsync(languageCode, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfCurrencyModel> GetCurrenciesAsync(string languageCode, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/currencies?");
      if (languageCode != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("languageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfCurrencyModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfCurrencyModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchOriginDestinationAsync(string ticketNumber, string lastName, string x_SessionId, string x_DeviceId)
    {
      return SearchOriginDestinationAsync(ticketNumber, lastName, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfItineraryModel> SearchOriginDestinationAsync(string ticketNumber, string lastName, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/searchorigindestination?");
      if (ticketNumber != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("TicketNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ticketNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (lastName != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("LastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfItineraryModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfItineraryModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SsetResponse> CreateWebRequestAsync(string x_SessionId, string x_DeviceId, SsetRequest ssetRequest)
    {
      return CreateWebRequestAsync(x_SessionId, x_DeviceId, ssetRequest, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SsetResponse> CreateWebRequestAsync(string x_SessionId, string x_DeviceId, SsetRequest ssetRequest, System.Threading.CancellationToken cancellationToken)
    {
      if (ssetRequest == null)
        throw new System.ArgumentNullException("ssetRequest");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/dynamicswebrequest");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ssetRequest, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SsetResponse>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SsetResponse);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfOverrideOptionModel> GetOverrideOptionsAsync(string x_SessionId, string x_DeviceId)
    {
      return GetOverrideOptionsAsync(x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfOverrideOptionModel> GetOverrideOptionsAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/overrideoptions");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfOverrideOptionModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfOverrideOptionModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<AzureFileResponse> UploadExpenseDocumentAsync(string x_SessionId, string x_DeviceId, AzureFileRequest azureFileRequest)
    {
      return UploadExpenseDocumentAsync(x_SessionId, x_DeviceId, azureFileRequest, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<AzureFileResponse> UploadExpenseDocumentAsync(string x_SessionId, string x_DeviceId, AzureFileRequest azureFileRequest, System.Threading.CancellationToken cancellationToken)
    {
      if (azureFileRequest == null)
        throw new System.ArgumentNullException("azureFileRequest");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/v1/ssetoperations/uploadexpensedocument");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(azureFileRequest, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<AzureFileResponse>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "400")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ValidationProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(AzureFileResponse);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IBulkDataClient
  {
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExposurePassengerModel> GetBulkPassengerFlightsAsync(string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExposurePassengerModel> GetBulkPassengerFlightsAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExposurePassengerModel> GetBulkPassengerFlightsByDateAsync(System.DateTimeOffset? departureDate, string x_SessionId, string x_DeviceId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<SearchResultOfExposurePassengerModel> GetBulkPassengerFlightsByDateAsync(System.DateTimeOffset? departureDate, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class BulkDataClient : IBulkDataClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public BulkDataClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfExposurePassengerModel> GetBulkPassengerFlightsAsync(string x_SessionId, string x_DeviceId)
    {
      return GetBulkPassengerFlightsAsync(x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfExposurePassengerModel> GetBulkPassengerFlightsAsync(string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/1/bulkdata/passengerflights");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfExposurePassengerModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response25>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response25>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfExposurePassengerModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<SearchResultOfExposurePassengerModel> GetBulkPassengerFlightsByDateAsync(System.DateTimeOffset? departureDate, string x_SessionId, string x_DeviceId)
    {
      return GetBulkPassengerFlightsByDateAsync(departureDate, x_SessionId, x_DeviceId, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="x_SessionId">The unique identifier for the client session id.</param>
    /// <param name="x_DeviceId">The unique identifier for the client device id.</param>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<SearchResultOfExposurePassengerModel> GetBulkPassengerFlightsByDateAsync(System.DateTimeOffset? departureDate, string x_SessionId, string x_DeviceId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/1/bulkdata/passengerflightsbydate?");
      if (departureDate != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("departureDate") + "=").Append(System.Uri.EscapeDataString(departureDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          if (x_SessionId != null)
            request_.Headers.TryAddWithoutValidation("X-SessionId", ConvertToString(x_SessionId, System.Globalization.CultureInfo.InvariantCulture));
          if (x_DeviceId != null)
            request_.Headers.TryAddWithoutValidation("X-DeviceId", ConvertToString(x_DeviceId, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<SearchResultOfExposurePassengerModel>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "500")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response26>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response26>("A server error has occured.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(SearchResultOfExposurePassengerModel);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial interface IClient
  {
    /// <summary>Performs health checks</summary>
    /// <returns>Application is running OK</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<Response27> GetHealthAsync();

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>Performs health checks</summary>
    /// <returns>Application is running OK</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    System.Threading.Tasks.Task<Response27> GetHealthAsync(System.Threading.CancellationToken cancellationToken);

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class Client : IClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public Client(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Performs health checks</summary>
    /// <returns>Application is running OK</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<Response27> GetHealthAsync()
    {
      return GetHealthAsync(System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>Performs health checks</summary>
    /// <returns>Application is running OK</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<Response27> GetHealthAsync(System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("api/health");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response27>(response_, headers_).ConfigureAwait(false);
              return objectResponse_.Object;
            }
            else
            if (status_ == "503")
            {
              var objectResponse_ = await ReadObjectResponseAsync<Response28>(response_, headers_).ConfigureAwait(false);
              throw new ApiException<Response28>("At least one health check reported an issue", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(Response27);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfPnrViewerModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PnrViewerModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfPnrViewerModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfPnrViewerModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PnrViewerModel : ItineraryModel
  {
    [Newtonsoft.Json.JsonProperty("ticketing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PnrViewerTicketingModel> Ticketing { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PnrViewerModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PnrViewerModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PnrViewerTicketingModel
  {
    [Newtonsoft.Json.JsonProperty("createdOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? CreatedOn { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("fareBoxRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PnrViewerTicketingFareBoxRecordModel> FareBoxRecord { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketHeaderRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PnrViewerTicketingTicketHeaderRecordModel> TicketHeaderRecord { get; set; }

    [Newtonsoft.Json.JsonProperty("monetaryInformationRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PnrViewerTicketingMonetaryInformationRecordModel> MonetaryInformationRecord { get; set; }

    [Newtonsoft.Json.JsonProperty("paymentRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PnrViewerTicketingFormOfPaymentRecordModel> PaymentRecords { get; set; }

    [Newtonsoft.Json.JsonProperty("taxFileRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PnrViewerTicketingTaxFileRecordModel> TaxFileRecords { get; set; }

    [Newtonsoft.Json.JsonProperty("couponRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PnrViewerTicketingCouponRecordModel> CouponRecords { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PnrViewerTicketingModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PnrViewerTicketingModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PnrViewerTicketingFareBoxRecordModel
  {
    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("calculation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Calculation { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PnrViewerTicketingFareBoxRecordModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PnrViewerTicketingFareBoxRecordModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PnrViewerTicketingTicketHeaderRecordModel
  {
    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("isEticket", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsEticket { get; set; }

    [Newtonsoft.Json.JsonProperty("endorsementRestriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EndorsementRestriction { get; set; }

    [Newtonsoft.Json.JsonProperty("tourTravelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TourTravelCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PnrViewerTicketingTicketHeaderRecordModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PnrViewerTicketingTicketHeaderRecordModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PnrViewerTicketingMonetaryInformationRecordModel
  {
    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("baseFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? BaseFare { get; set; }

    [Newtonsoft.Json.JsonProperty("baseFareCurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string BaseFareCurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("equivalentFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? EquivalentFare { get; set; }

    [Newtonsoft.Json.JsonProperty("equivalentFareCurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EquivalentFareCurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("totalFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? TotalFare { get; set; }

    [Newtonsoft.Json.JsonProperty("totalFareCurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TotalFareCurrencyCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PnrViewerTicketingMonetaryInformationRecordModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PnrViewerTicketingMonetaryInformationRecordModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PnrViewerTicketingFormOfPaymentRecordModel
  {
    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("expireDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ExpireDate { get; set; }

    [Newtonsoft.Json.JsonProperty("creditCardCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CreditCardCode { get; set; }

    [Newtonsoft.Json.JsonProperty("cardNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CardNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("formOfPaymentIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FormOfPaymentIndicator { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PnrViewerTicketingFormOfPaymentRecordModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PnrViewerTicketingFormOfPaymentRecordModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PnrViewerTicketingTaxFileRecordModel
  {
    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? Amount { get; set; }

    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("taxCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TaxCode { get; set; }

    [Newtonsoft.Json.JsonProperty("transactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TransactionType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PnrViewerTicketingTaxFileRecordModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PnrViewerTicketingTaxFileRecordModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PnrViewerTicketingCouponRecordModel
  {
    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("fareBasisTicketDesignator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FareBasisTicketDesignator { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PnrViewerTicketingCouponRecordModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PnrViewerTicketingCouponRecordModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ItineraryModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("sourceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ItinerarySourceType? SourceType { get; set; }

    [Newtonsoft.Json.JsonProperty("pnrNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PnrNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("resPNRNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ResPNRNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("pnrCreationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? PnrCreationDate { get; set; }

    [Newtonsoft.Json.JsonProperty("passengers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PassengerModel> Passengers { get; set; }

    [Newtonsoft.Json.JsonProperty("segments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SegmentModel> Segments { get; set; }

    [Newtonsoft.Json.JsonProperty("originDestinations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<OriginDestinationModel> OriginDestinations { get; set; }

    [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ErrorCode { get; set; }

    [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ErrorMessage { get; set; }

    [Newtonsoft.Json.JsonProperty("additionalPassengers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PassengerNameModel> AdditionalPassengers { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ItineraryModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ItineraryModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum ItinerarySourceType
  {
    Snapshot = 1,

    Pss = 2,

    Appraisals = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PassengerModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MiddleName { get; set; }

    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastName { get; set; }

    [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? DateOfBirth { get; set; }

    [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EmailAddress { get; set; }

    [Newtonsoft.Json.JsonProperty("genderCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string GenderCode { get; set; }

    [Newtonsoft.Json.JsonProperty("loyaltyAccounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PassengerLoyaltyAccountModel> LoyaltyAccounts { get; set; }

    [Newtonsoft.Json.JsonProperty("segments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PassengerSegmentModel> Segments { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PassengerModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PassengerModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PassengerLoyaltyAccountModel
  {
    [Newtonsoft.Json.JsonProperty("programId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProgramId { get; set; }

    [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AccountNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("tierStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TierStatus { get; set; }

    [Newtonsoft.Json.JsonProperty("acStarAllianceTierStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AcStarAllianceTierStatus { get; set; }

    [Newtonsoft.Json.JsonProperty("acStarAllianceTierDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AcStarAllianceTierDescription { get; set; }

    [Newtonsoft.Json.JsonProperty("acStarAllianceTierDynamicsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? AcStarAllianceTierDynamicsId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PassengerLoyaltyAccountModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PassengerLoyaltyAccountModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PassengerSegmentModel
  {
    [Newtonsoft.Json.JsonProperty("segmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SegmentId { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("isValidFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsValidFormat { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PassengerSegmentModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PassengerSegmentModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SegmentModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("airlineCarrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AirlineCarrierCode { get; set; }

    [Newtonsoft.Json.JsonProperty("operatingAirlineCarrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperatingAirlineCarrierCode { get; set; }

    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? FlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("operatingAirlineFlightNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? OperatingAirlineFlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("scheduledDepartureAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ScheduledDepartureAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("scheduledArrivalAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ScheduledArrivalAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("scheduledDepartureDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ScheduledDepartureDateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("scheduledArrivalDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ScheduledArrivalDateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("numberOfStops", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? NumberOfStops { get; set; }

    [Newtonsoft.Json.JsonProperty("equipmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EquipmentCode { get; set; }

    [Newtonsoft.Json.JsonProperty("equipmentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EquipmentName { get; set; }

    [Newtonsoft.Json.JsonProperty("aircraftType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AircraftType { get; set; }

    [Newtonsoft.Json.JsonProperty("classOfService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ClassOfService { get; set; }

    [Newtonsoft.Json.JsonProperty("scheduledDepartureAirportCityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ScheduledDepartureAirportCityName { get; set; }

    [Newtonsoft.Json.JsonProperty("scheduledArrivalAirportCityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ScheduledArrivalAirportCityName { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SegmentModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SegmentModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class OriginDestinationModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("controlDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ControlDate { get; set; }

    [Newtonsoft.Json.JsonProperty("snapshotAdvanceDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? SnapshotAdvanceDays { get; set; }

    [Newtonsoft.Json.JsonProperty("originDestinationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OriginDestinationType? OriginDestinationCode { get; set; }

    [Newtonsoft.Json.JsonProperty("segmentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> SegmentIds { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static OriginDestinationModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginDestinationModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum OriginDestinationType
  {
    ACOnly = 1,

    Regional = 2,

    ACInc = 3,

    True = 4,

    TrueAndRegional = 6,

    All = 7,

    ACIncOperated = 8,

    TrueCodeshare = 9,

    TrueReverseCodeshare = 10,

    TrueACMarketed = 11,

    TrueACOperated = 12,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PassengerNameModel
  {
    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("passengerFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PassengerFirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("passengerLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PassengerLastName { get; set; }

    [Newtonsoft.Json.JsonProperty("isPrimaryApplicant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsPrimaryApplicant { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PassengerNameModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PassengerNameModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ValidationProblemDetails : ProblemDetails
  {
    [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Errors { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ValidationProblemDetails FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ValidationProblemDetails>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ProblemDetails
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProblemDetails FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfAircraftTypeModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<AircraftTypeModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfAircraftTypeModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfAircraftTypeModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AircraftTypeModel
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Manufacturer { get; set; }

    [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Model { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AircraftTypeModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AircraftTypeModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfAirportModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<AirportModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfAirportModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfAirportModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirportModel
  {
    [Newtonsoft.Json.JsonProperty("airportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AirportCode { get; set; }

    [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountryCode { get; set; }

    [Newtonsoft.Json.JsonProperty("provinceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProvinceCode { get; set; }

    [Newtonsoft.Json.JsonProperty("airportNameEn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AirportNameEn { get; set; }

    [Newtonsoft.Json.JsonProperty("airportNameFr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AirportNameFr { get; set; }

    [Newtonsoft.Json.JsonProperty("cityNameEn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CityNameEn { get; set; }

    [Newtonsoft.Json.JsonProperty("cityNameFr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CityNameFr { get; set; }

    [Newtonsoft.Json.JsonProperty("countryNameEn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountryNameEn { get; set; }

    [Newtonsoft.Json.JsonProperty("countryNameFr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountryNameFr { get; set; }

    [Newtonsoft.Json.JsonProperty("provinceNameEn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProvinceNameEn { get; set; }

    [Newtonsoft.Json.JsonProperty("provinceNameFr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProvinceNameFr { get; set; }

    [Newtonsoft.Json.JsonProperty("shortNameEn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShortNameEn { get; set; }

    [Newtonsoft.Json.JsonProperty("shortNameFr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShortNameFr { get; set; }

    [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TimeZone { get; set; }

    [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Latitude { get; set; }

    [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Longitude { get; set; }

    [Newtonsoft.Json.JsonProperty("retrievedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? RetrievedAt { get; set; }

    [Newtonsoft.Json.JsonProperty("expireAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ExpireAt { get; set; }

    [Newtonsoft.Json.JsonProperty("serviceEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceEnvironment { get; set; }

    [Newtonsoft.Json.JsonProperty("uniqueIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UniqueIdentifier { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicsId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirportModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirportModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfFlightNumberModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightNumberModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfFlightNumberModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfFlightNumberModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightNumberModel
  {
    [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CarrierCode { get; set; }

    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? FlightNumber { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightNumberModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightNumberModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfFlightOpsLegWithPassengersModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsLegWithPassengersModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfFlightOpsLegWithPassengersModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfFlightOpsLegWithPassengersModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightOpsLegWithPassengersModel : FlightOpsFlownLegModel
  {
    [Newtonsoft.Json.JsonProperty("passengers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsPassengerWithPnrModel> Passengers { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightOpsLegWithPassengersModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOpsLegWithPassengersModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightOpsPassengerWithPnrModel : FlightOpsPassengerModel
  {
    [Newtonsoft.Json.JsonProperty("pnrNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PnrNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("pnrCreationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? PnrCreationDate { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightOpsPassengerWithPnrModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOpsPassengerWithPnrModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightOpsPassengerModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastName { get; set; }

    [Newtonsoft.Json.JsonProperty("documentFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentFirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("documentLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentLastName { get; set; }

    [Newtonsoft.Json.JsonProperty("loyaltyAccounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsPassengerLoyaltyAccountModel> LoyaltyAccounts { get; set; }

    [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsPassengerLegModel> Legs { get; set; }

    [Newtonsoft.Json.JsonProperty("cancelledLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsPassengerLegModel> CancelledLegs { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightOpsPassengerModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOpsPassengerModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightOpsPassengerLoyaltyAccountModel
  {
    [Newtonsoft.Json.JsonProperty("programId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProgramId { get; set; }

    [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AccountNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("tierStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TierStatus { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightOpsPassengerLoyaltyAccountModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOpsPassengerLoyaltyAccountModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightOpsPassengerLegModel
  {
    [Newtonsoft.Json.JsonProperty("legId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LegId { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("seatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SeatNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("cabinClassFlown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CabinClassFlown { get; set; }

    [Newtonsoft.Json.JsonProperty("fareClassPurchased", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FareClassPurchased { get; set; }

    [Newtonsoft.Json.JsonProperty("bookingClassPurchased", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string BookingClassPurchased { get; set; }

    [Newtonsoft.Json.JsonProperty("isWithInfant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsWithInfant { get; set; }

    [Newtonsoft.Json.JsonProperty("checkinLocalDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? CheckinLocalDateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("checkinAirportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CheckinAirportCode { get; set; }

    [Newtonsoft.Json.JsonProperty("deniedBoardingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DeniedBoardingType { get; set; }

    [Newtonsoft.Json.JsonProperty("isBoarded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsBoarded { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightOpsPassengerLegModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOpsPassengerLegModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightOpsFlownLegModel : FlightOpsLegModel
  {
    [Newtonsoft.Json.JsonProperty("delayRemarks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DelayRemarks { get; set; }

    [Newtonsoft.Json.JsonProperty("departureDelayMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DepartureDelayMinutes { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalDelayMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ArrivalDelayMinutes { get; set; }

    [Newtonsoft.Json.JsonProperty("delayIataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DelayIataCode { get; set; }

    [Newtonsoft.Json.JsonProperty("delaySubCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DelaySubCode { get; set; }

    [Newtonsoft.Json.JsonProperty("departureDelayIataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DepartureDelayIataCode { get; set; }

    [Newtonsoft.Json.JsonProperty("primaryDelayReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PrimaryDelayReasonCode { get; set; }

    [Newtonsoft.Json.JsonProperty("secondaryDelayReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SecondaryDelayReasonCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightOpsFlownLegModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOpsFlownLegModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightOpsLegModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("flightOpsLegId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? FlightOpsLegId { get; set; }

    [Newtonsoft.Json.JsonProperty("airlineCarrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AirlineCarrierCode { get; set; }

    [Newtonsoft.Json.JsonProperty("operatingAirlineCarrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperatingAirlineCarrierCode { get; set; }

    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? FlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("operatingAirlineFlightNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? OperatingAirlineFlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("flightSequenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? FlightSequenceNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("scheduledDepartureAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ScheduledDepartureAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("scheduledArrivalAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ScheduledArrivalAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("scheduledDepartureDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ScheduledDepartureDateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("scheduledArrivalDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ScheduledArrivalDateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("actualDepartureAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ActualDepartureAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("actualArrivalAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ActualArrivalAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("actualDepartureDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ActualDepartureDateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("actualArrivalDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ActualArrivalDateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("legState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LegState { get; set; }

    [Newtonsoft.Json.JsonProperty("aircraftType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AircraftType { get; set; }

    [Newtonsoft.Json.JsonProperty("operatingRemarks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperatingRemarks { get; set; }

    [Newtonsoft.Json.JsonProperty("disruptedReasonIsSafety", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? DisruptedReasonIsSafety { get; set; }

    [Newtonsoft.Json.JsonProperty("divertedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DivertedIndicator { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightOpsLegModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOpsLegModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfFlightOpsCancelledLegWithPassengersModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsCancelledLegWithPassengersModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfFlightOpsCancelledLegWithPassengersModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfFlightOpsCancelledLegWithPassengersModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightOpsCancelledLegWithPassengersModel : FlightOpsCancelledLegModel
  {
    [Newtonsoft.Json.JsonProperty("passengers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsPassengerWithPnrModel> Passengers { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightOpsCancelledLegWithPassengersModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOpsCancelledLegWithPassengersModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightOpsCancelledLegModel : FlightOpsLegModel
  {
    [Newtonsoft.Json.JsonProperty("primaryCancellationReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PrimaryCancellationReasonCode { get; set; }

    [Newtonsoft.Json.JsonProperty("secondaryCancellationReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SecondaryCancellationReasonCode { get; set; }

    [Newtonsoft.Json.JsonProperty("divertedReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DivertedReasonCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightOpsCancelledLegModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOpsCancelledLegModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfFlightSegment
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightSegment> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfFlightSegment FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfFlightSegment>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightSegment : BaseModelOfFlightSegment
  {
    /// <summary>The marketing airline. This is required for use with scheduled airline messages but may be omitted for requests by tour operators.</summary>
    [Newtonsoft.Json.JsonProperty("marketingFlightDesignator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FlightDesignator MarketingFlightDesignator { get; set; }

    /// <summary>The flight this flight segment is based on.</summary>
    [Newtonsoft.Json.JsonProperty("flight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Flight Flight { get; set; }

    /// <summary>The evaluated flight designator to use based on Flight.OperatingFlightDesignator and MarketingFlightDesignator.</summary>
    [Newtonsoft.Json.JsonProperty("flightDesignator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FlightDesignator FlightDesignator { get; set; }

    /// <summary>Collection of statuses describing the current flight segment.</summary>
    [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightStatusInformation> Statuses { get; set; }

    /// <summary>Collection of different actual dates and times pertaining to the flight segment.</summary>
    [Newtonsoft.Json.JsonProperty("flightDateTimes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightDateTime> FlightDateTimes { get; set; }

    /// <summary>The fare basis code for this flight leg.</summary>
    [Newtonsoft.Json.JsonProperty("fareBasisCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FareBasisCode { get; set; }

    /// <summary>Specific Booking Class for this segment.</summary>
    [Newtonsoft.Json.JsonProperty("bookingClassCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BookingClass BookingClassCode { get; set; }

    /// <summary>A fare component breakpoint.</summary>
    [Newtonsoft.Json.JsonProperty("breakpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Breakpoint { get; set; }

    /// <summary>The duration of the segment.</summary>
    [Newtonsoft.Json.JsonProperty("segmentDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.TimeSpan? SegmentDuration { get; set; }

    /// <summary>The duration of the flight from departure location to destination location for the entire bound.</summary>
    [Newtonsoft.Json.JsonProperty("accumulatedDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.TimeSpan? AccumulatedDuration { get; set; }

    /// <summary>The duration of the bus from departure location to destination location.</summary>
    [Newtonsoft.Json.JsonProperty("journeyDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.TimeSpan? JourneyDuration { get; set; }

    /// <summary>Many airlines link connection flights together by terming them married segments. When two or more segments are married, they must be processed as one unit. The segments must be moved, cancelled, and/or priced together. The value of the marriage group must be the same for all segments.</summary>
    [Newtonsoft.Json.JsonProperty("marriageGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MarriageGroup { get; set; }

    /// <summary>A collection of cabins and their availability counts per booking class.</summary>
    [Newtonsoft.Json.JsonProperty("cabins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CabinType> Cabins { get; set; }

    /// <summary>Free text information that the marketing carrier may send about this flight.</summary>
    [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Comment { get; set; }

    /// <summary>The type of equipment used for the flight.</summary>
    [Newtonsoft.Json.JsonProperty("equipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EquipmentType Equipment { get; set; }

    /// <summary>Number of travelers associated with this segment.</summary>
    [Newtonsoft.Json.JsonProperty("numberInParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? NumberInParty { get; set; }

    /// <summary>Specifies whether a flight segment is eligible for electronic ticketing.</summary>
    [Newtonsoft.Json.JsonProperty("eTicketEligibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ETicketEligibility { get; set; }

    /// <summary>The applicable meal service code for this flight.</summary>
    [Newtonsoft.Json.JsonProperty("mealServiceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MealServiceType MealServiceType { get; set; }

    /// <summary>Indicates whether a stopover is permitted or not</summary>
    [Newtonsoft.Json.JsonProperty("stopoverStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public StopoverStatus StopoverStatus { get; set; }

    /// <summary>The number of days by which the flight's arrival date differs from its departure date (e.g., +1, -1).</summary>
    [Newtonsoft.Json.JsonProperty("dateChangeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DateChangeNumber { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightSegment FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightSegment>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightDesignator : BaseModelOfFlightDesignator
  {
    /// <summary>The carrier (and carrier code) that operates this flight leg.</summary>
    [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Carrier Carrier { get; set; }

    /// <summary>The flight number of this flight leg.</summary>
    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? FlightNumber { get; set; }

    /// <summary>A code assigned by the administrating carrier for operational purposes.</summary>
    [Newtonsoft.Json.JsonProperty("operationalSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationalSuffix { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightDesignator FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightDesignator>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Carrier : BaseModelOfCarrier
  {
    /// <summary>Identifies a company by the company code.</summary>
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code { get; set; }

    /// <summary>Used to provide the company common name.</summary>
    [Newtonsoft.Json.JsonProperty("companyShortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CompanyShortName { get; set; }

    /// <summary>Identifies the context of the identifying code, such as DUNS, IATA or internal code, etc.</summary>
    [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Context { get; set; }

    /// <summary>Identifies a company by name.</summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Content { get; set; }

    /// <summary>If true, the information pertains to the marketing flight. If false, the information pertains to the operating flight.</summary>
    [Newtonsoft.Json.JsonProperty("isMarketing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsMarketing { get; set; }

    /// <summary>If true, indicates that the program is related to a single vendor. If false, indicates that the program is affiliated with a group of related offers accumulating credits.</summary>
    [Newtonsoft.Json.JsonProperty("isSingleVendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsSingleVendor { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Carrier FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Carrier>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfCarrier
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfCarrier FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfCarrier>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FilterOperation : BaseTypeSafeEnumOfFilterOperation
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FilterOperation FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterOperation>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfFilterOperation : BaseModelOfFilterOperation
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfFilterOperation FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfFilterOperation>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfFilterOperation
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfFilterOperation FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfFilterOperation>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class EnvironmentType : BaseTypeSafeEnumOfEnvironmentType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static EnvironmentType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfEnvironmentType : BaseModelOfEnvironmentType
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfEnvironmentType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfEnvironmentType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfEnvironmentType
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfEnvironmentType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfEnvironmentType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfFlightDesignator
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfFlightDesignator FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfFlightDesignator>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Flight : BaseModelOfFlight
  {
    /// <summary>The operating airline of the flight if it is a codeshare flight.</summary>
    [Newtonsoft.Json.JsonProperty("operatingFlightDesignator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FlightDesignator OperatingFlightDesignator { get; set; }

    /// <summary>Collection of different scheduled dates and times pertaining to the flight.</summary>
    [Newtonsoft.Json.JsonProperty("scheduledDateTimes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightDateTime> ScheduledDateTimes { get; set; }

    /// <summary>Departure point of flight segment.</summary>
    [Newtonsoft.Json.JsonProperty("departureAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Airport DepartureAirport { get; set; }

    /// <summary>Arrival point of flight segment.</summary>
    [Newtonsoft.Json.JsonProperty("arrivalAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Airport ArrivalAirport { get; set; }

    /// <summary>The number of stops the flight makes.</summary>
    [Newtonsoft.Json.JsonProperty("stopQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? StopQuantity { get; set; }

    /// <summary>A location where the flight is scheduled to stop en route to its destination for this flight segment.</summary>
    [Newtonsoft.Json.JsonProperty("stopLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Airport StopLocation { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Flight FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Flight>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightDateTime : BaseModelOfFlightDateTime
  {
    [Newtonsoft.Json.JsonProperty("businessSemantic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BusinessSemantic BusinessSemantic { get; set; }

    [Newtonsoft.Json.JsonProperty("timeMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TimeMode TimeMode { get; set; }

    [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? DateTime { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightDateTime FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightDateTime>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class BusinessSemantic : BaseTypeSafeEnumOfBusinessSemantic
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BusinessSemantic FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessSemantic>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfBusinessSemantic : BaseModelOfBusinessSemantic
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfBusinessSemantic FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfBusinessSemantic>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfBusinessSemantic
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfBusinessSemantic FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfBusinessSemantic>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TimeMode : BaseTypeSafeEnumOfTimeMode
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TimeMode FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeMode>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfTimeMode : BaseModelOfTimeMode
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfTimeMode FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfTimeMode>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfTimeMode
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfTimeMode FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfTimeMode>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfFlightDateTime
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfFlightDateTime FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfFlightDateTime>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Airport : BaseModelOfAirport
  {
    /// <summary>Location code used to identify a specific airport.</summary>
    [Newtonsoft.Json.JsonProperty("locationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z0-9]{3,4}")]
    public string LocationCode { get; set; }

    /// <summary>Arrival or departure terminal.</summary>
    [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Terminal { get; set; }

    /// <summary>Arrival or departure gate.</summary>
    [Newtonsoft.Json.JsonProperty("gate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Gate { get; set; }

    /// <summary>Country in which the airport is located.</summary>
    [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Country Country { get; set; }

    /// <summary>Administrative in which the airport is located.</summary>
    [Newtonsoft.Json.JsonProperty("administrativeRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AdministrativeRegion AdministrativeRegion { get; set; }

    /// <summary>TimeZone in which the airport is located.</summary>
    [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DateTimeZone TimeZone { get; set; }

    /// <summary>Exact Longitude and Latitude of the airport.</summary>
    [Newtonsoft.Json.JsonProperty("geographicalCoordinates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public GeoCoordinate GeographicalCoordinates { get; set; }

    /// <summary>Full airport name</summary>
    [Newtonsoft.Json.JsonProperty("airportName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AirportName { get; set; }

    /// <summary>Main city deserved by the airport</summary>
    [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CityName { get; set; }

    /// <summary>Short name of the airport</summary>
    [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShortName { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Airport FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Airport>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Country : BaseTypeSafeEnumOfCountry
  {
    [Newtonsoft.Json.JsonProperty("commonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CommonName { get; set; }

    [Newtonsoft.Json.JsonProperty("officialName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OfficialName { get; set; }

    [Newtonsoft.Json.JsonProperty("isO3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string IsO3 { get; set; }

    [Newtonsoft.Json.JsonProperty("administrativeRegions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<AdministrativeRegion> AdministrativeRegions { get; set; }

    [Newtonsoft.Json.JsonProperty("currencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Currencies { get; set; }

    [Newtonsoft.Json.JsonProperty("callingCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> CallingCodes { get; set; }

    [Newtonsoft.Json.JsonProperty("capital", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Capital { get; set; }

    [Newtonsoft.Json.JsonProperty("alternativeSpellings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> AlternativeSpellings { get; set; }

    [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Region { get; set; }

    [Newtonsoft.Json.JsonProperty("subRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SubRegion { get; set; }

    [Newtonsoft.Json.JsonProperty("landlocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Landlocked { get; set; }

    [Newtonsoft.Json.JsonProperty("area", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Area { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Country FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Country>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AdministrativeRegion : BaseTypeSafeEnumOfAdministrativeRegion
  {
    [Newtonsoft.Json.JsonProperty("commonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CommonName { get; set; }

    [Newtonsoft.Json.JsonProperty("officialName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OfficialName { get; set; }

    [Newtonsoft.Json.JsonProperty("capital", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Capital { get; set; }

    [Newtonsoft.Json.JsonProperty("alternativeSpellings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> AlternativeSpellings { get; set; }

    [Newtonsoft.Json.JsonProperty("area", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Area { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AdministrativeRegion FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AdministrativeRegion>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfAdministrativeRegion : BaseModelOfAdministrativeRegion
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfAdministrativeRegion FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfAdministrativeRegion>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfAdministrativeRegion
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfAdministrativeRegion FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfAdministrativeRegion>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfCountry : BaseModelOfCountry
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfCountry FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfCountry>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfCountry
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfCountry FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfCountry>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class DateTimeZone
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("minOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MinOffset { get; set; }

    [Newtonsoft.Json.JsonProperty("maxOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MaxOffset { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DateTimeZone FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DateTimeZone>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class GeoCoordinate
  {
    [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Latitude { get; set; }

    [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Longitude { get; set; }

    [Newtonsoft.Json.JsonProperty("horizontalAccuracy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? HorizontalAccuracy { get; set; }

    [Newtonsoft.Json.JsonProperty("verticalAccuracy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? VerticalAccuracy { get; set; }

    [Newtonsoft.Json.JsonProperty("speed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Speed { get; set; }

    [Newtonsoft.Json.JsonProperty("course", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Course { get; set; }

    [Newtonsoft.Json.JsonProperty("isUnknown", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsUnknown { get; set; }

    [Newtonsoft.Json.JsonProperty("altitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Altitude { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static GeoCoordinate FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoCoordinate>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfAirport
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfAirport FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfAirport>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfFlight
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfFlight FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfFlight>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightStatusInformation : BaseModelOfFlightStatusInformation
  {
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Status Status { get; set; }

    [Newtonsoft.Json.JsonProperty("indicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FlightStatus Indicator { get; set; }

    [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FlightAction Action { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightStatusInformation FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightStatusInformation>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Status : BaseTypeSafeEnumOfStatus
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Status FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Status>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfStatus : BaseModelOfStatus
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfStatus FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfStatus>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfStatus
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfStatus FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfStatus>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightStatus : BaseTypeSafeEnumOfFlightStatus
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightStatus FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightStatus>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfFlightStatus : BaseModelOfFlightStatus
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfFlightStatus FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfFlightStatus>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfFlightStatus
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfFlightStatus FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfFlightStatus>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightAction : BaseTypeSafeEnumOfFlightAction
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightAction FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightAction>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfFlightAction : BaseModelOfFlightAction
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfFlightAction FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfFlightAction>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfFlightAction
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfFlightAction FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfFlightAction>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfFlightStatusInformation
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfFlightStatusInformation FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfFlightStatusInformation>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class BookingClass : BaseTypeSafeEnumOfBookingClass
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BookingClass FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BookingClass>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfBookingClass : BaseModelOfBookingClass
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfBookingClass FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfBookingClass>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfBookingClass
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfBookingClass FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfBookingClass>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CabinType : BaseTypeSafeEnumOfCabinType
  {
    [Newtonsoft.Json.JsonProperty("cabinDesignator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BookingClass CabinDesignator { get; set; }

    [Newtonsoft.Json.JsonProperty("bookingClasses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<BookingClass> BookingClasses { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CabinType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CabinType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfCabinType : BaseModelOfCabinType
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfCabinType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfCabinType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfCabinType
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfCabinType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfCabinType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class EquipmentType : BaseTypeSafeEnumOfEquipmentType
  {
    [Newtonsoft.Json.JsonProperty("icaoNotation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string IcaoNotation { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static EquipmentType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<EquipmentType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfEquipmentType : BaseModelOfEquipmentType
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfEquipmentType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfEquipmentType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfEquipmentType
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfEquipmentType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfEquipmentType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class MealServiceType : BaseTypeSafeEnumOfMealServiceType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MealServiceType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<MealServiceType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfMealServiceType : BaseModelOfMealServiceType
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfMealServiceType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfMealServiceType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfMealServiceType
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfMealServiceType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfMealServiceType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class StopoverStatus : BaseTypeSafeEnumOfStopoverStatus
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static StopoverStatus FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<StopoverStatus>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseTypeSafeEnumOfStopoverStatus : BaseModelOfStopoverStatus
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseTypeSafeEnumOfStopoverStatus FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseTypeSafeEnumOfStopoverStatus>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfStopoverStatus
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfStopoverStatus FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfStopoverStatus>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class BaseModelOfFlightSegment
  {
    [Newtonsoft.Json.JsonProperty("$id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    /// <summary>Reference Place Holder used as an index for this model.</summary>
    [Newtonsoft.Json.JsonProperty("referencePlaceHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,8}$")]
    public string ReferencePlaceHolder { get; set; }

    /// <summary>Logical operation when filtering data of this type.</summary>
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FilterOperation Operation { get; set; }

    /// <summary>Indicates the required modification to the element.</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EnvironmentType Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseModelOfFlightSegment FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfFlightSegment>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfDisruptionClassificationModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DisruptionClassificationModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfDisruptionClassificationModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfDisruptionClassificationModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DisruptionClassificationModel : LegacyDisruptionClassificationModel
  {
    [Newtonsoft.Json.JsonProperty("iataNumericCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? IataNumericCode { get; set; }

    [Newtonsoft.Json.JsonProperty("iataAlphaCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string IataAlphaCode { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, string> Description { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DisruptionClassificationModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DisruptionClassificationModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class LegacyDisruptionClassificationModel
  {
    [Newtonsoft.Json.JsonProperty("primaryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PrimaryCode { get; set; }

    [Newtonsoft.Json.JsonProperty("secondaryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SecondaryCode { get; set; }

    [Newtonsoft.Json.JsonProperty("controllability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DisruptionControllabilityType? Controllability { get; set; }

    [Newtonsoft.Json.JsonProperty("controllabilityEu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DisruptionControllabilityType? ControllabilityEu { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static LegacyDisruptionClassificationModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<LegacyDisruptionClassificationModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum DisruptionControllabilityType
  {
    Controllable = 0,

    Uncontrollable = 1,

    UncontrollableForSafetyReason = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfLegacyDisruptionClassificationModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<LegacyDisruptionClassificationModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfLegacyDisruptionClassificationModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfLegacyDisruptionClassificationModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class OTAAirBookRS
  {
    [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<WarningType> Warnings { get; set; }

    [Newtonsoft.Json.JsonProperty("airReservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<AirReservationAirReservationType> AirReservation { get; set; }

    [Newtonsoft.Json.JsonProperty("resultCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32)]
    public string ResultCode { get; set; }

    [Newtonsoft.Json.JsonProperty("paymentTypeRefCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32)]
    public string PaymentTypeRefCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static OTAAirBookRS FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<OTAAirBookRS>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class WarningType : ErrorWarningAttributeGroup
  {
    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static WarningType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<WarningType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ErrorWarningAttributeGroup
  {
    [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string ShortText { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ErrorWarningAttributeGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorWarningAttributeGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirReservationAirReservationType : AirReservationType0
  {
    [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object CreateDateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("splitReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SplitReservations> SplitReservations { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirReservationAirReservationType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirReservationAirReservationType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SplitReservations
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SplitReservations FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SplitReservations>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirReservationType0
  {
    [Newtonsoft.Json.JsonProperty("airItinerary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AirItinerary AirItinerary { get; set; }

    [Newtonsoft.Json.JsonProperty("priceInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PriceInfo PriceInfo { get; set; }

    [Newtonsoft.Json.JsonProperty("travelerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TravelerInfo TravelerInfo { get; set; }

    [Newtonsoft.Json.JsonProperty("fulfillment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Fulfillment Fulfillment { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Ticketing> Ticketing { get; set; }

    [Newtonsoft.Json.JsonProperty("bookingReferenceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<BookingReferenceIDUniqueIDType> BookingReferenceID { get; set; }

    [Newtonsoft.Json.JsonProperty("emD_Info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<EMDInfo0> EmD_Info { get; set; }

    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object LastModified { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirReservationType0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirReservationType0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirItinerary : AirItineraryType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirItinerary FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirItinerary>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirItineraryType
  {
    [Newtonsoft.Json.JsonProperty("originDestinationOptions", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<OriginDestinationOptions> OriginDestinationOptions { get; set; } = new System.Collections.ObjectModel.Collection<OriginDestinationOptions>();

    [Newtonsoft.Json.JsonProperty("directionInd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DirectionInd DirectionInd { get; set; }

    [Newtonsoft.Json.JsonProperty("airItineraryRPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string AirItineraryRPH { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirItineraryType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirItineraryType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class OriginDestinationOptions : OriginDestinationOptionType
  {
    [Newtonsoft.Json.JsonProperty("refNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, 99)]
    public int? RefNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static OriginDestinationOptions FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginDestinationOptions>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class OriginDestinationOptionType
  {
    [Newtonsoft.Json.JsonProperty("flightSegment", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<FlightSegment2> FlightSegment { get; set; } = new System.Collections.ObjectModel.Collection<FlightSegment2>();

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static OriginDestinationOptionType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginDestinationOptionType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightSegment2 : FlightSegmentType
  {
    [Newtonsoft.Json.JsonProperty("aC_SegmentDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AC_SegmentDuration { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string Status { get; set; }

    [Newtonsoft.Json.JsonProperty("mealCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public MealCode MealCode { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_JourneyDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^-?P([0-9]+Y)?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+(\.[0-9]+)?S)?)?$")]
    public string AC_JourneyDuration { get; set; }

    [Newtonsoft.Json.JsonProperty("dateChangeNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string DateChangeNbr { get; set; }

    [Newtonsoft.Json.JsonProperty("stopLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<LocationGroup> StopLocation { get; set; }

    [Newtonsoft.Json.JsonProperty("marriageGrp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string MarriageGrp { get; set; }

    [Newtonsoft.Json.JsonProperty("e_TicketEligibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string E_TicketEligibility { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_Breakpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? AC_Breakpoint { get; set; }

    [Newtonsoft.Json.JsonProperty("departureDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DepartureDay DepartureDay { get; set; }

    [Newtonsoft.Json.JsonProperty("bookingClassAvails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<BookingClassAvails> BookingClassAvails { get; set; }

    [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FreeTextType> Comment { get; set; }

    [Newtonsoft.Json.JsonProperty("stopoverInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? StopoverInd { get; set; }

    [Newtonsoft.Json.JsonProperty("numberInParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
    public int? NumberInParty { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_AccumulatedDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string AC_AccumulatedDuration { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightSegment2 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightSegment2>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum MealCode
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Breakfast")]
    Breakfast = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Snack")]
    Snack = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Dinner")]
    Dinner = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Hot Meal")]
    Hot_Meal = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"Lunch")]
    Lunch = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"Refreshments")]
    Refreshments = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"Complimentary Liquor")]
    Complimentary_Liquor = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"Meal")]
    Meal = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"Liquor for Purchase")]
    Liquor_for_Purchase = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"Food for Purchase")]
    Food_for_Purchase = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"Cold Meal")]
    Cold_Meal = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"No Meal Service")]
    No_Meal_Service = 11,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class LocationGroup
  {
    [Newtonsoft.Json.JsonProperty("locationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string LocationCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static LocationGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum DepartureDay
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Mon")]
    Mon = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Tue")]
    Tue = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Wed")]
    Wed = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Thu")]
    Thu = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"Fri")]
    Fri = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"Sat")]
    Sat = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"Sun")]
    Sun = 6,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class BookingClassAvails
  {
    [Newtonsoft.Json.JsonProperty("bookingClassAvail", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<BookFlightSegmentTypeBookingClassAvailBookingClassAvailabilityGroup> BookingClassAvail { get; set; } = new System.Collections.ObjectModel.Collection<BookFlightSegmentTypeBookingClassAvailBookingClassAvailabilityGroup>();

    [Newtonsoft.Json.JsonProperty("cabinType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object CabinType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BookingClassAvails FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BookingClassAvails>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class BookFlightSegmentTypeBookingClassAvailBookingClassAvailabilityGroup : BookingClassAvailabilityGroup0
  {
    [Newtonsoft.Json.JsonProperty("aC_UpgradeEligibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ACUpgradeEligibility AC_UpgradeEligibility { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BookFlightSegmentTypeBookingClassAvailBookingClassAvailabilityGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BookFlightSegmentTypeBookingClassAvailBookingClassAvailabilityGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACUpgradeEligibility
  {
    [Newtonsoft.Json.JsonProperty("custLoyalty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CustLoyalty CustLoyalty { get; set; }

    [Newtonsoft.Json.JsonProperty("upgradeOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<UpgradeOptionsType> UpgradeOptions { get; set; }

    [Newtonsoft.Json.JsonProperty("loyalLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string LoyalLevel { get; set; }

    [Newtonsoft.Json.JsonProperty("eligible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Eligible { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACUpgradeEligibility FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACUpgradeEligibility>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CustLoyalty
  {
    [Newtonsoft.Json.JsonProperty("programID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string ProgramID { get; set; }

    [Newtonsoft.Json.JsonProperty("membershipID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string MembershipID { get; set; }

    [Newtonsoft.Json.JsonProperty("vendorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> VendorCode { get; set; }

    [Newtonsoft.Json.JsonProperty("allianceLoyaltyLevelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string AllianceLoyaltyLevelName { get; set; }

    [Newtonsoft.Json.JsonProperty("loyalLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string LoyalLevel { get; set; }

    [Newtonsoft.Json.JsonProperty("loyalLevelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, 3)]
    public int? LoyalLevelCode { get; set; }

    [Newtonsoft.Json.JsonProperty("singleVendorInd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SingleVendorInd SingleVendorInd { get; set; }

    [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? EffectiveDate { get; set; }

    [Newtonsoft.Json.JsonProperty("expireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? ExpireDate { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CustLoyalty FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CustLoyalty>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum SingleVendorInd
  {
    [System.Runtime.Serialization.EnumMember(Value = @"SingleVndr")]
    SingleVndr = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Alliance")]
    Alliance = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class UpgradeOptionsType
  {
    [Newtonsoft.Json.JsonProperty("upgradeFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public UpgradeFee UpgradeFee { get; set; }

    [Newtonsoft.Json.JsonProperty("upgradeCabin", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UpgradeCabin UpgradeCabin { get; set; }

    [Newtonsoft.Json.JsonProperty("requiredCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? RequiredCredits { get; set; }

    [Newtonsoft.Json.JsonProperty("upgradeClassAvailability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string UpgradeClassAvailability { get; set; }

    [Newtonsoft.Json.JsonProperty("upgradeWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^-?P[0-9]+Y?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+(\.[0-9]+)?S)?)?$")]
    public string UpgradeWindow { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UpgradeOptionsType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UpgradeOptionsType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class UpgradeFee
  {
    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? Amount { get; set; }

    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{3}$")]
    public string CurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
    public int? DecimalPlaces { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UpgradeFee FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UpgradeFee>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum UpgradeCabin
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Premium")]
    Premium = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class BookingClassAvailabilityGroup0
  {
    [Newtonsoft.Json.JsonProperty("resBookDesigCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{1,2}$")]
    public string ResBookDesigCode { get; set; }

    [Newtonsoft.Json.JsonProperty("resBookDesigQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,3}$")]
    public string ResBookDesigQuantity { get; set; }

    [Newtonsoft.Json.JsonProperty("upgradeOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<UpgradeOptions> UpgradeOptions { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BookingClassAvailabilityGroup0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BookingClassAvailabilityGroup0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class UpgradeOptions
  {
    [Newtonsoft.Json.JsonProperty("upgradeFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public UpgradeFee UpgradeFee { get; set; }

    [Newtonsoft.Json.JsonProperty("upgradeCabin", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UpgradeCabin UpgradeCabin { get; set; }

    [Newtonsoft.Json.JsonProperty("requiredCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? RequiredCredits { get; set; }

    [Newtonsoft.Json.JsonProperty("upgradeClassAvailability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string UpgradeClassAvailability { get; set; }

    [Newtonsoft.Json.JsonProperty("upgradeWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^-?P[0-9]+Y?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+(\.[0-9]+)?S)?)?$")]
    public string UpgradeWindow { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UpgradeOptions FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UpgradeOptions>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FreeTextType
  {
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Content { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FreeTextType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FreeTextType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightSegmentType : FlightSegmentBaseType0
  {
    [Newtonsoft.Json.JsonProperty("resBookDesigCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{1,2}$")]
    public string ResBookDesigCode { get; set; }

    [Newtonsoft.Json.JsonProperty("fareBasisCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string FareBasisCode { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_LowerResBookDesigCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{1,2}$")]
    public string AC_LowerResBookDesigCode { get; set; }

    [Newtonsoft.Json.JsonProperty("marketingAirline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MarketingAirline MarketingAirline { get; set; }

    [Newtonsoft.Json.JsonProperty("flightCabin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FlightCabin { get; set; }

    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^([0-9]{1,4}[A-Z]?|OPEN|ARNK)$")]
    public string FlightNumber { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightSegmentType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightSegmentType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class MarketingAirline : MarketingAirline0
  {
    [Newtonsoft.Json.JsonProperty("companyShortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(70)]
    public string CompanyShortName { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("singleVendorInd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SingleVendorInd SingleVendorInd { get; set; }

    [Newtonsoft.Json.JsonProperty("codeContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string CodeContext { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MarketingAirline FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<MarketingAirline>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class MarketingAirline0
  {
    [Newtonsoft.Json.JsonProperty("companyShortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(70)]
    public string CompanyShortName { get; set; }

    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("codeContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string CodeContext { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MarketingAirline0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<MarketingAirline0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightSegmentBaseType0
  {
    [Newtonsoft.Json.JsonProperty("departureAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DepartureAirport DepartureAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ArrivalAirport ArrivalAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("operatingAirline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OperatingAirline OperatingAirline { get; set; }

    [Newtonsoft.Json.JsonProperty("equipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Equipment> Equipment { get; set; }

    [Newtonsoft.Json.JsonProperty("departureDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object DepartureDateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("departureDayOfWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DepartureDayOfWeek { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object ArrivalDateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalDayOfWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ArrivalDayOfWeek { get; set; }

    [Newtonsoft.Json.JsonProperty("stopQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
    public int? StopQuantity { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightSegmentBaseType0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightSegmentBaseType0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DepartureAirport : AirportLocationGroup
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DepartureAirport FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DepartureAirport>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirportLocationGroup
  {
    [Newtonsoft.Json.JsonProperty("locationCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string LocationCode { get; set; }

    [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string Terminal { get; set; }

    [Newtonsoft.Json.JsonProperty("gate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string Gate { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirportLocationGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirportLocationGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ArrivalAirport : AirportLocationGroup
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ArrivalAirport FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ArrivalAirport>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class OperatingAirline : CompanyIDAttributesGroup
  {
    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^([0-9]{1,4}[A-Z]?|OPEN|ARNK)$")]
    public string FlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("marketingInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? MarketingInd { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static OperatingAirline FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<OperatingAirline>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CompanyIDAttributesGroup
  {
    [Newtonsoft.Json.JsonProperty("companyShortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(70)]
    public string CompanyShortName { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("codeContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string CodeContext { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CompanyIDAttributesGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CompanyIDAttributesGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Equipment
  {
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("airEquipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string AirEquipType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Equipment FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Equipment>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum DirectionInd
  {
    [System.Runtime.Serialization.EnumMember(Value = @"OneWay")]
    OneWay = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"OneWayOnly")]
    OneWayOnly = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Return")]
    Return = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Circle")]
    Circle = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"OpenJaw")]
    OpenJaw = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"Other")]
    Other = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"Outbound")]
    Outbound = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"OutboundSeasonRoundtrip")]
    OutboundSeasonRoundtrip = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"Non-directional")]
    Non_directional = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"Inbound")]
    Inbound = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"Roundtrip")]
    Roundtrip = 10,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PriceInfo : AirItineraryPricingInfoTypeBookingOnly
  {
    [Newtonsoft.Json.JsonProperty("repriceRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? RepriceRequired { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PriceInfo FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PriceInfo>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirItineraryPricingInfoTypeBookingOnly
  {
    [Newtonsoft.Json.JsonProperty("aC_Discounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ACDiscounts0> AC_Discounts { get; set; }

    [Newtonsoft.Json.JsonProperty("itinTotalFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ItinTotalFare> ItinTotalFare { get; set; }

    [Newtonsoft.Json.JsonProperty("ptC_FareBreakdowns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PTCFareBreakdowns> PtC_FareBreakdowns { get; set; }

    [Newtonsoft.Json.JsonProperty("fareInfos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FareInfos> FareInfos { get; set; }

    [Newtonsoft.Json.JsonProperty("priceRequestInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PriceRequestInformation PriceRequestInformation { get; set; }

    [Newtonsoft.Json.JsonProperty("participationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string ParticipationLevel { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirItineraryPricingInfoTypeBookingOnly FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirItineraryPricingInfoTypeBookingOnly>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACDiscounts0
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("discount_Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Discount_Name { get; set; }

    [Newtonsoft.Json.JsonProperty("rewardProgram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string RewardProgram { get; set; }

    [Newtonsoft.Json.JsonProperty("discount_Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Discount_Type { get; set; }

    [Newtonsoft.Json.JsonProperty("discount_Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Discount_Value { get; set; }

    [Newtonsoft.Json.JsonProperty("discount_Fare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DiscountFare Discount_Fare { get; set; }

    [Newtonsoft.Json.JsonProperty("remarks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Remarks Remarks { get; set; }

    [Newtonsoft.Json.JsonProperty("redemption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Redemption Redemption { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACDiscounts0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACDiscounts0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DiscountFare
  {
    [Newtonsoft.Json.JsonProperty("aC_TotalFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? AC_TotalFare { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_NonDiscountedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? AC_NonDiscountedAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_NonDiscountedTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? AC_NonDiscountedTotal { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_PromoInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ACPromoInformation> AC_PromoInformation { get; set; }

    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? Amount { get; set; }

    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? DecimalPlaces { get; set; }

    [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Taxes Taxes { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DiscountFare FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DiscountFare>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACPromoInformation
  {
    [Newtonsoft.Json.JsonProperty("promoCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string PromoCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACPromoInformation FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACPromoInformation>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Taxes : CurrencyAmountGroup
  {
    [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<TaxType> Tax { get; set; } = new System.Collections.ObjectModel.Collection<TaxType>();

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Taxes FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Taxes>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TaxType : ChargeUnitGroup
  {
    [Newtonsoft.Json.JsonProperty("taxDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ParagraphType> TaxDescription { get; set; }

    [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Duration { get; set; }

    [Newtonsoft.Json.JsonProperty("sequenceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
    public int? SequenceNbr { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TaxType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ParagraphType
  {
    [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Text Text { get; set; }

    [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Image { get; set; }

    [Newtonsoft.Json.JsonProperty("listItem_Extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ListItemExtension ListItem_Extension { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("paragraphNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
    public int? ParagraphNumber { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ParagraphType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ParagraphType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Text : FormattedTextTextType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Text FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Text>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FormattedTextTextType
  {
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("formatted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Formatted { get; set; }

    [Newtonsoft.Json.JsonProperty("textFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TextFormat TextFormat { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FormattedTextTextType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FormattedTextTextType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum TextFormat
  {
    [System.Runtime.Serialization.EnumMember(Value = @"PlainText")]
    PlainText = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"HTML")]
    HTML = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ListItemExtension : FormattedTextTextType
  {
    [Newtonsoft.Json.JsonProperty("listItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ListItem { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ListItemExtension FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemExtension>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ChargeUnitGroup
  {
    [Newtonsoft.Json.JsonProperty("chargeUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string ChargeUnit { get; set; }

    [Newtonsoft.Json.JsonProperty("chargeFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string ChargeFrequency { get; set; }

    [Newtonsoft.Json.JsonProperty("chargeUnitExempt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
    public int? ChargeUnitExempt { get; set; }

    [Newtonsoft.Json.JsonProperty("chargeFrequencyExempt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
    public int? ChargeFrequencyExempt { get; set; }

    [Newtonsoft.Json.JsonProperty("maxChargeUnitApplies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
    public int? MaxChargeUnitApplies { get; set; }

    [Newtonsoft.Json.JsonProperty("maxChargeFrequencyApplies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
    public int? MaxChargeFrequencyApplies { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ChargeUnitGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ChargeUnitGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CurrencyAmountGroup
  {
    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{3}$")]
    public string CurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
    public int? DecimalPlaces { get; set; }

    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? Amount { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CurrencyAmountGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyAmountGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Remarks
  {
    [Newtonsoft.Json.JsonProperty("value_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value_id { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Remarks FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Remarks>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Redemption
  {
    [Newtonsoft.Json.JsonProperty("availableUnits", Required = Newtonsoft.Json.Required.Always)]
    public int AvailableUnits { get; set; }

    [Newtonsoft.Json.JsonProperty("unitControlled", Required = Newtonsoft.Json.Required.Always)]
    public bool UnitControlled { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Redemption FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Redemption>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ItinTotalFare : FareType
  {
    [Newtonsoft.Json.JsonProperty("aC_FareFamily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ACFareFamily AC_FareFamily { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_ChargesRefundSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ACChargesRefundSummary AC_ChargesRefundSummary { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_ImportantInformationOfConfirmationPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ACImportantInformationOfConfirmationPage AC_ImportantInformationOfConfirmationPage { get; set; }

    [Newtonsoft.Json.JsonProperty("discounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DiscountInfoGroup> Discounts { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_Discounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ACDiscounts> AC_Discounts { get; set; }

    [Newtonsoft.Json.JsonProperty("tourCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TourCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ItinTotalFare FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ItinTotalFare>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACFareFamily : FareFamilyType
  {
    [Newtonsoft.Json.JsonProperty("flightRefRPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string FlightRefRPH { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACFareFamily FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACFareFamily>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FareFamilyType
  {
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string FlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("resBookDesigCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string ResBookDesigCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FareFamilyType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FareFamilyType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACChargesRefundSummary
  {
    [Newtonsoft.Json.JsonProperty("charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Charges> Charges { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACChargesRefundSummary FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACChargesRefundSummary>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Charges
  {
    [Newtonsoft.Json.JsonProperty("baseFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BaseFare BaseFare { get; set; }

    [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Taxes Taxes { get; set; }

    [Newtonsoft.Json.JsonProperty("fees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Fees Fees { get; set; }

    [Newtonsoft.Json.JsonProperty("totalExtraCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TotalExtraCharges TotalExtraCharges { get; set; }

    [Newtonsoft.Json.JsonProperty("subTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TotalExtraCharges SubTotal { get; set; }

    [Newtonsoft.Json.JsonProperty("equivFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TotalExtraCharges EquivFare { get; set; }

    [Newtonsoft.Json.JsonProperty("totalFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TotalExtraCharges TotalFare { get; set; }

    [Newtonsoft.Json.JsonProperty("flight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Flight2> Flight { get; set; }

    [Newtonsoft.Json.JsonProperty("ChargeType", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ChargeType ChargeType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Charges FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Charges>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class BaseFare : TotalExtraCharges
  {
    [Newtonsoft.Json.JsonProperty("fareAmountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FareAmountType FareAmountType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseFare FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseFare>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum FareAmountType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"NOADC")]
    NOADC = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Bulk")]
    Bulk = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"IT")]
    IT = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Additional_Collection")]
    Additional_Collection = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"Charter_Fare")]
    Charter_Fare = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"No_Fare")]
    No_Fare = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TotalExtraCharges
  {
    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{3}$")]
    public string CurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
    public int? DecimalPlaces { get; set; }

    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? Amount { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TotalExtraCharges FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TotalExtraCharges>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Fees : TotalExtraCharges
  {
    [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<AirFeeType> Fee { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Fees FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Fees>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirFeeType : CurrencyAmountGroup
  {
    [Newtonsoft.Json.JsonProperty("feeTransactionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FeeTransactionType FeeTransactionType { get; set; }

    [Newtonsoft.Json.JsonProperty("feeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string FeeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("ShortDescriptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64)]
    public string ShortDescriptionType { get; set; }

    [Newtonsoft.Json.JsonProperty("taxPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0.0D, 100.0D)]
    public decimal? TaxPercentage { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirFeeType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirFeeType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum FeeTransactionType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"charge")]
    Charge = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"exempt")]
    Exempt = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"refund")]
    Refund = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"reserve")]
    Reserve = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Flight2
  {
    [Newtonsoft.Json.JsonProperty("discounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Discounts Discounts { get; set; }

    [Newtonsoft.Json.JsonProperty("StringLength0to128", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(128)]
    public string StringLength0to128 { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Flight2 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Flight2>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Discounts
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Discounts FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Discounts>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum ChargeType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"AddCharges")]
    AddCharges = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Refund")]
    Refund = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Air")]
    Air = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
    Discount = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACImportantInformationOfConfirmationPage
  {
    [Newtonsoft.Json.JsonProperty("carryOnBaggagePolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CarryOnBaggagePolicy CarryOnBaggagePolicy { get; set; }

    [Newtonsoft.Json.JsonProperty("checkedBaggagePolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CheckedBaggagePolicy CheckedBaggagePolicy { get; set; }

    [Newtonsoft.Json.JsonProperty("checkedBaggageAllowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CheckedBaggageAllowance> CheckedBaggageAllowance { get; set; }

    [Newtonsoft.Json.JsonProperty("checkInAndBoardingTimes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CheckInAndBoardingTimes CheckInAndBoardingTimes { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACImportantInformationOfConfirmationPage FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACImportantInformationOfConfirmationPage>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CarryOnBaggagePolicy
  {
    [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Text { get; set; }

    [Newtonsoft.Json.JsonProperty("carryOnBaggageRestrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CarryOnBaggageRestrictions CarryOnBaggageRestrictions { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CarryOnBaggagePolicy FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CarryOnBaggagePolicy>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CarryOnBaggageRestrictions
  {
    [Newtonsoft.Json.JsonProperty("standardArticle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public StandardArticle StandardArticle { get; set; }

    [Newtonsoft.Json.JsonProperty("personalArticle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PersonalArticle PersonalArticle { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CarryOnBaggageRestrictions FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CarryOnBaggageRestrictions>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class StandardArticle : ArticleType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static StandardArticle FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardArticle>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ArticleType
  {
    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? Number { get; set; }

    [Newtonsoft.Json.JsonProperty("maximumSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MaximumSize MaximumSize { get; set; }

    [Newtonsoft.Json.JsonProperty("maximumWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MaximumWeight MaximumWeight { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ArticleType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ArticleType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class MaximumSize
  {
    [Newtonsoft.Json.JsonProperty("inCentimeter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? InCentimeter { get; set; }

    [Newtonsoft.Json.JsonProperty("inInches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? InInches { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MaximumSize FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<MaximumSize>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class MaximumWeight
  {
    [Newtonsoft.Json.JsonProperty("inKG", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? InKG { get; set; }

    [Newtonsoft.Json.JsonProperty("inLB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? InLB { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MaximumWeight FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<MaximumWeight>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PersonalArticle : ArticleType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PersonalArticle FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PersonalArticle>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CheckedBaggagePolicy
  {
    [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Text { get; set; }

    [Newtonsoft.Json.JsonProperty("checkedBaggageRestrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CheckedBaggageRestrictions CheckedBaggageRestrictions { get; set; }

    [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Notes { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CheckedBaggagePolicy FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CheckedBaggagePolicy>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CheckedBaggageRestrictions
  {
    [Newtonsoft.Json.JsonProperty("economyclass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Economyclass Economyclass { get; set; }

    [Newtonsoft.Json.JsonProperty("executiveClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ExecutiveClass ExecutiveClass { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CheckedBaggageRestrictions FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CheckedBaggageRestrictions>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Economyclass : BaggageClassType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Economyclass FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Economyclass>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class BaggageClassType
  {
    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? Number { get; set; }

    [Newtonsoft.Json.JsonProperty("maximumSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MaximumSize0 MaximumSize { get; set; }

    [Newtonsoft.Json.JsonProperty("maximumWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MaximumWeight0 MaximumWeight { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaggageClassType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaggageClassType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class MaximumSize0
  {
    [Newtonsoft.Json.JsonProperty("iN_CENT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? IN_CENT { get; set; }

    [Newtonsoft.Json.JsonProperty("inInches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? InInches { get; set; }

    [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Info { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MaximumSize0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<MaximumSize0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class MaximumWeight0
  {
    [Newtonsoft.Json.JsonProperty("inKG", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? InKG { get; set; }

    [Newtonsoft.Json.JsonProperty("inLB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? InLB { get; set; }

    [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Info { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MaximumWeight0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<MaximumWeight0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ExecutiveClass : BaggageClassType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ExecutiveClass FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ExecutiveClass>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CheckedBaggageAllowance
  {
    [Newtonsoft.Json.JsonProperty("checkInAirline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CheckInAirline CheckInAirline { get; set; }

    [Newtonsoft.Json.JsonProperty("checkedBag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CheckedBag> CheckedBag { get; set; }

    [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string Origin { get; set; }

    [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string Destination { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CheckedBaggageAllowance FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CheckedBaggageAllowance>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CheckInAirline
  {
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("companyShortName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string CompanyShortName { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CheckInAirline FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CheckInAirline>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CheckedBag
  {
    [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Fee Fee { get; set; }

    [Newtonsoft.Json.JsonProperty("baggageInfoUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
    public string BaggageInfoUrl { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CheckedBag FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CheckedBag>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Fee : TotalExtraCharges
  {
    [Newtonsoft.Json.JsonProperty("feeTransactionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FeeTransactionType FeeTransactionType { get; set; }

    [Newtonsoft.Json.JsonProperty("feeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string FeeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("ShortDescriptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64)]
    public string ShortDescriptionType { get; set; }

    [Newtonsoft.Json.JsonProperty("taxPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0.0D, 100.0D)]
    public decimal? TaxPercentage { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Fee FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Fee>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CheckInAndBoardingTimes
  {
    [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Text { get; set; }

    [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Region> Region { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CheckInAndBoardingTimes FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CheckInAndBoardingTimes>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Region
  {
    [Newtonsoft.Json.JsonProperty("checkIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CheckIn CheckIn { get; set; }

    [Newtonsoft.Json.JsonProperty("boardingGate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BoardingGate BoardingGate { get; set; }

    [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Info { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Region FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Region>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CheckIn
  {
    [Newtonsoft.Json.JsonProperty("recommended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Recommended { get; set; }

    [Newtonsoft.Json.JsonProperty("cutOffTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? CutOffTime { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CheckIn FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CheckIn>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class BoardingGate
  {
    [Newtonsoft.Json.JsonProperty("cutOffTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? CutOffTime { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BoardingGate FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BoardingGate>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DiscountInfoGroup
  {
    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? Amount { get; set; }

    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{3}$")]
    public string CurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
    public int? DecimalPlaces { get; set; }

    [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0.0D, 100.0D)]
    public decimal? Percent { get; set; }

    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string Description { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DiscountInfoGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DiscountInfoGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACDiscounts
  {
    [Newtonsoft.Json.JsonProperty("aC_UpgradeCabin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AC_UpgradeCabin { get; set; }

    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("discount_Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Discount_Name { get; set; }

    [Newtonsoft.Json.JsonProperty("specialCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SpecialCondition { get; set; }

    [Newtonsoft.Json.JsonProperty("travelerRPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TravelerRPH { get; set; }

    [Newtonsoft.Json.JsonProperty("discount_Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Discount_Type { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_BaggageDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ACBaggageDetails AC_BaggageDetails { get; set; }

    [Newtonsoft.Json.JsonProperty("flightSegmentReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightSegmentReferences> FlightSegmentReferences { get; set; }

    [Newtonsoft.Json.JsonProperty("fareBaggageAllowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FareBaggageAllowance> FareBaggageAllowance { get; set; }

    [Newtonsoft.Json.JsonProperty("seatCharacteristics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SeatCharacteristics> SeatCharacteristics { get; set; }

    [Newtonsoft.Json.JsonProperty("discountLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DiscountLocation DiscountLocation { get; set; }

    [Newtonsoft.Json.JsonProperty("discountFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DiscountFare DiscountFare { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACDiscounts FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACDiscounts>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACBaggageDetails
  {
    [Newtonsoft.Json.JsonProperty("serviceDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceDescription { get; set; }

    [Newtonsoft.Json.JsonProperty("fareBaggageAllowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FareBaggageAllowance> FareBaggageAllowance { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACBaggageDetails FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACBaggageDetails>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FareBaggageAllowance
  {
    [Newtonsoft.Json.JsonProperty("unitOfMeasureQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? UnitOfMeasureQuantity { get; set; }

    [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UnitOfMeasure { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FareBaggageAllowance FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FareBaggageAllowance>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightSegmentReferences
  {
    [Newtonsoft.Json.JsonProperty("flightSegmentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FlightSegmentReference FlightSegmentReference { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightSegmentReferences FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightSegmentReferences>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightSegmentReference
  {
    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightSegmentReference FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightSegmentReference>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SeatCharacteristics
  {
    [Newtonsoft.Json.JsonProperty("seatCharacteristic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SeatCharacteristic SeatCharacteristic { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SeatCharacteristics FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SeatCharacteristics>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SeatCharacteristic
  {
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Content { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SeatCharacteristic FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SeatCharacteristic>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DiscountLocation
  {
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Content { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DiscountLocation FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DiscountLocation>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FareType : NegotiatedFareAttributes
  {
    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Remark { get; set; }

    [Newtonsoft.Json.JsonProperty("fees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Fees Fees { get; set; }

    [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Taxes0 Taxes { get; set; }

    [Newtonsoft.Json.JsonProperty("equivFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<EquivFare> EquivFare { get; set; }

    [Newtonsoft.Json.JsonProperty("baseFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BaseFare BaseFare { get; set; }

    [Newtonsoft.Json.JsonProperty("fareBaggageAllowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FareBaggageAllowance0> FareBaggageAllowance { get; set; }

    [Newtonsoft.Json.JsonProperty("totalFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TotalFare TotalFare { get; set; }

    [Newtonsoft.Json.JsonProperty("unstructuredFareCalc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public UnstructuredFareCalc UnstructuredFareCalc { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FareType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FareType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Taxes0
  {
    [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<AirTaxType> Tax { get; set; }

    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? Amount { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Taxes0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Taxes0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirTaxType : CurrencyAmountGroup
  {
    [Newtonsoft.Json.JsonProperty("taxCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{2}$")]
    public string TaxCountry { get; set; }

    [Newtonsoft.Json.JsonProperty("refundableInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? RefundableInd { get; set; }

    [Newtonsoft.Json.JsonProperty("taxExemptInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? TaxExemptInd { get; set; }

    [Newtonsoft.Json.JsonProperty("taxName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string TaxName { get; set; }

    [Newtonsoft.Json.JsonProperty("ShortDescriptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64)]
    public string ShortDescriptionType { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    [Newtonsoft.Json.JsonProperty("taxCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string TaxCode { get; set; }

    [Newtonsoft.Json.JsonProperty("taxTransactionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TaxTransactionType TaxTransactionType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirTaxType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirTaxType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum TaxTransactionType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"charge")]
    Charge = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"exempt")]
    Exempt = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"refund")]
    Refund = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"reserve")]
    Reserve = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"paid")]
    Paid = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class EquivFare : TotalExtraCharges
  {
    [Newtonsoft.Json.JsonProperty("fareAmountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FareAmountType FareAmountType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static EquivFare FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<EquivFare>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FareBaggageAllowance0
  {
    [Newtonsoft.Json.JsonProperty("flightSegmentRPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string FlightSegmentRPH { get; set; }

    [Newtonsoft.Json.JsonProperty("unitOfMeasureQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? UnitOfMeasureQuantity { get; set; }

    [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(99)]
    public string UnitOfMeasure { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FareBaggageAllowance0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FareBaggageAllowance0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TotalFare : TotalExtraCharges
  {
    [Newtonsoft.Json.JsonProperty("fareAmountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FareAmountType FareAmountType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TotalFare FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TotalFare>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class UnstructuredFareCalc
  {
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("fareCalcMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1}$")]
    public string FareCalcMode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UnstructuredFareCalc FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UnstructuredFareCalc>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class NegotiatedFareAttributes
  {
    [Newtonsoft.Json.JsonProperty("negotiatedFareInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? NegotiatedFareInd { get; set; }

    [Newtonsoft.Json.JsonProperty("negotiatedFareCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string NegotiatedFareCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static NegotiatedFareAttributes FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<NegotiatedFareAttributes>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PTCFareBreakdowns
  {
    [Newtonsoft.Json.JsonProperty("passengerTypeQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PassengerTypeQuantity PassengerTypeQuantity { get; set; }

    [Newtonsoft.Json.JsonProperty("fareBasisCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FareBasisCodeType> FareBasisCodes { get; set; }

    [Newtonsoft.Json.JsonProperty("endorsements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Endorsements Endorsements { get; set; }

    [Newtonsoft.Json.JsonProperty("fareInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FareInfoType> FareInfo { get; set; }

    [Newtonsoft.Json.JsonProperty("flightRefNumberRPHList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> FlightRefNumberRPHList { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PTCFareBreakdowns FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PTCFareBreakdowns>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PassengerTypeQuantity
  {
    [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, 999)]
    public int? Age { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_PricingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1,3}$")]
    public string AC_PricingCode { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Code { get; set; }

    [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
    public int? Quantity { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PassengerTypeQuantity FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PassengerTypeQuantity>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FareBasisCodeType
  {
    [Newtonsoft.Json.JsonProperty("StringLength1to16", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string StringLength1to16 { get; set; }

    [Newtonsoft.Json.JsonProperty("flightSegmentRPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string FlightSegmentRPH { get; set; }

    [Newtonsoft.Json.JsonProperty("notValidBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? NotValidBefore { get; set; }

    [Newtonsoft.Json.JsonProperty("notValidAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? NotValidAfter { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FareBasisCodeType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FareBasisCodeType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Endorsements
  {
    [Newtonsoft.Json.JsonProperty("endorsement", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<Comment0> Endorsement { get; set; } = new System.Collections.ObjectModel.Collection<Comment0>();

    [Newtonsoft.Json.JsonProperty("nonRefundableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? NonRefundableIndicator { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Endorsements FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Endorsements>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Comment0
  {
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Content { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Comment0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Comment0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FareInfoType : NegotiatedFareAttributes
  {
    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{3}$")]
    public string CurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ArrivalAirport0 ArrivalAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? DepartureDate { get; set; }

    [Newtonsoft.Json.JsonProperty("marketingAirline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<MarketingAirline0> MarketingAirline { get; set; }

    [Newtonsoft.Json.JsonProperty("fareInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FareInfo> FareInfo { get; set; }

    [Newtonsoft.Json.JsonProperty("ruleInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public RuleInfo0 RuleInfo { get; set; }

    [Newtonsoft.Json.JsonProperty("fareReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FareReference> FareReference { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_Fees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ACFees> AC_Fees { get; set; }

    [Newtonsoft.Json.JsonProperty("departureAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DepartureAirport DepartureAirport { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FareInfoType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FareInfoType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ArrivalAirport0 : StopLocation
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ArrivalAirport0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ArrivalAirport0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class StopLocation
  {
    [Newtonsoft.Json.JsonProperty("locationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string LocationCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static StopLocation FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<StopLocation>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FareInfo
  {
    [Newtonsoft.Json.JsonProperty("aC_Fees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ACFees> AC_Fees { get; set; }

    [Newtonsoft.Json.JsonProperty("fare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Fare Fare { get; set; }

    [Newtonsoft.Json.JsonProperty("ptc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PTC> Ptc { get; set; }

    [Newtonsoft.Json.JsonProperty("fareBasisCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string FareBasisCode { get; set; }

    [Newtonsoft.Json.JsonProperty("fareType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{1,3}$")]
    public string FareType { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FareInfo FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FareInfo>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACFees
  {
    [Newtonsoft.Json.JsonProperty("feeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string FeeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? Amount { get; set; }

    [Newtonsoft.Json.JsonProperty("originCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string OriginCode { get; set; }

    [Newtonsoft.Json.JsonProperty("destinationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string DestinationCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACFees FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACFees>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Fare
  {
    [Newtonsoft.Json.JsonProperty("baseAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? BaseAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("baseNUC_Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? BaseNUC_Amount { get; set; }

    [Newtonsoft.Json.JsonProperty("taxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? TaxAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("totalFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? TotalFare { get; set; }

    [Newtonsoft.Json.JsonProperty("fareDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64)]
    public string FareDescription { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Fare FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Fare>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PTC
  {
    [Newtonsoft.Json.JsonProperty("passengerTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{3}$")]
    public string PassengerTypeCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PTC FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PTC>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class RuleInfo0 : RuleInfoType
  {
    [Newtonsoft.Json.JsonProperty("tripType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TripType TripType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static RuleInfo0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<RuleInfo0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum TripType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"OneWay")]
    OneWay = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"OneWayOnly")]
    OneWayOnly = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Return")]
    Return = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Circle")]
    Circle = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"OpenJaw")]
    OpenJaw = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"Other")]
    Other = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"Outbound")]
    Outbound = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"OutboundSeasonRoundtrip")]
    OutboundSeasonRoundtrip = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"Non-directional")]
    Non_directional = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"Inbound")]
    Inbound = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"Roundtrip")]
    Roundtrip = 10,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class RuleInfoType
  {
    [Newtonsoft.Json.JsonProperty("aC_Restriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ACRestriction> AC_Restriction { get; set; }

    [Newtonsoft.Json.JsonProperty("resTicketingRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ResTicketingRules ResTicketingRules { get; set; }

    [Newtonsoft.Json.JsonProperty("lengthOfStayRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public LengthOfStayRules LengthOfStayRules { get; set; }

    [Newtonsoft.Json.JsonProperty("chargesRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ChargesRules ChargesRules { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static RuleInfoType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<RuleInfoType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACRestriction
  {
    [Newtonsoft.Json.JsonProperty("restrictionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string RestrictionType { get; set; }

    [Newtonsoft.Json.JsonProperty("applicable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Applicable { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACRestriction FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACRestriction>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ResTicketingRules
  {
    [Newtonsoft.Json.JsonProperty("advResTicketing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AdvResTicketing AdvResTicketing { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ResTicketingRules FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ResTicketingRules>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AdvResTicketing : AdvResTicketingType
  {
    [Newtonsoft.Json.JsonProperty("lastTicketDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object LastTicketDate { get; set; }

    [Newtonsoft.Json.JsonProperty("firstTicketDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object FirstTicketDate { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AdvResTicketing FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AdvResTicketing>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AdvResTicketingType
  {
    [Newtonsoft.Json.JsonProperty("advReservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AdvReservation AdvReservation { get; set; }

    [Newtonsoft.Json.JsonProperty("advTicketing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AdvTicketing AdvTicketing { get; set; }

    [Newtonsoft.Json.JsonProperty("advResInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? AdvResInd { get; set; }

    [Newtonsoft.Json.JsonProperty("advTicketingInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? AdvTicketingInd { get; set; }

    [Newtonsoft.Json.JsonProperty("requestedTicketingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object RequestedTicketingDate { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AdvResTicketingType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AdvResTicketingType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AdvReservation
  {
    [Newtonsoft.Json.JsonProperty("latestTimeOfDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object LatestTimeOfDay { get; set; }

    [Newtonsoft.Json.JsonProperty("latestPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,3}$")]
    public string LatestPeriod { get; set; }

    [Newtonsoft.Json.JsonProperty("latestUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public LatestUnit LatestUnit { get; set; }

    [Newtonsoft.Json.JsonProperty("earliestPeriods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EarliestPeriods { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AdvReservation FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AdvReservation>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum LatestUnit
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Minutes")]
    Minutes = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Hours")]
    Hours = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Days")]
    Days = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Months")]
    Months = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"MON")]
    MON = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TUES")]
    TUES = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"WED")]
    WED = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"THU")]
    THU = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"FRI")]
    FRI = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"SAT")]
    SAT = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"SUN")]
    SUN = 10,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AdvTicketing
  {
    [Newtonsoft.Json.JsonProperty("fromResTimeOfDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object FromResTimeOfDay { get; set; }

    [Newtonsoft.Json.JsonProperty("fromResPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,3}$")]
    public string FromResPeriod { get; set; }

    [Newtonsoft.Json.JsonProperty("fromResUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FromResUnit FromResUnit { get; set; }

    [Newtonsoft.Json.JsonProperty("fromDepartTimeOfDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object FromDepartTimeOfDay { get; set; }

    [Newtonsoft.Json.JsonProperty("fromDepartPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,3}$")]
    public string FromDepartPeriod { get; set; }

    [Newtonsoft.Json.JsonProperty("fromDepartUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FromDepartUnit FromDepartUnit { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AdvTicketing FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AdvTicketing>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum FromResUnit
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Minutes")]
    Minutes = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Hours")]
    Hours = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Days")]
    Days = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Months")]
    Months = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"MON")]
    MON = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TUES")]
    TUES = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"WED")]
    WED = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"THU")]
    THU = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"FRI")]
    FRI = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"SAT")]
    SAT = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"SUN")]
    SUN = 10,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum FromDepartUnit
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Minutes")]
    Minutes = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Hours")]
    Hours = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Days")]
    Days = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Months")]
    Months = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"MON")]
    MON = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TUES")]
    TUES = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"WED")]
    WED = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"THU")]
    THU = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"FRI")]
    FRI = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"SAT")]
    SAT = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"SUN")]
    SUN = 10,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class LengthOfStayRules : StayRestrictionsType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static LengthOfStayRules FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<LengthOfStayRules>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class StayRestrictionsType
  {
    [Newtonsoft.Json.JsonProperty("minimumStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MinimumStay MinimumStay { get; set; }

    [Newtonsoft.Json.JsonProperty("maximumStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MaximumStay MaximumStay { get; set; }

    [Newtonsoft.Json.JsonProperty("stayRestrictionsInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? StayRestrictionsInd { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static StayRestrictionsType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<StayRestrictionsType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class MinimumStay
  {
    [Newtonsoft.Json.JsonProperty("returnTimeOfDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object ReturnTimeOfDay { get; set; }

    [Newtonsoft.Json.JsonProperty("minStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, 99)]
    public int? MinStay { get; set; }

    [Newtonsoft.Json.JsonProperty("stayUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public StayUnit StayUnit { get; set; }

    [Newtonsoft.Json.JsonProperty("minStayDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object MinStayDate { get; set; }

    [Newtonsoft.Json.JsonProperty("complicatedRulesInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? ComplicatedRulesInd { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MinimumStay FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<MinimumStay>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum StayUnit
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Minutes")]
    Minutes = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Hours")]
    Hours = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Days")]
    Days = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Months")]
    Months = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"MON")]
    MON = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TUES")]
    TUES = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"WED")]
    WED = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"THU")]
    THU = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"FRI")]
    FRI = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"SAT")]
    SAT = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"SUN")]
    SUN = 10,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class MaximumStay
  {
    [Newtonsoft.Json.JsonProperty("returnType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ReturnType ReturnType { get; set; }

    [Newtonsoft.Json.JsonProperty("returnTimeOfDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object ReturnTimeOfDay { get; set; }

    [Newtonsoft.Json.JsonProperty("maxStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, 999)]
    public int? MaxStay { get; set; }

    [Newtonsoft.Json.JsonProperty("stayUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public StayUnit StayUnit { get; set; }

    [Newtonsoft.Json.JsonProperty("maxStayDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object MaxStayDate { get; set; }

    [Newtonsoft.Json.JsonProperty("complicatedRulesInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? ComplicatedRulesInd { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MaximumStay FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<MaximumStay>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum ReturnType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"C")]
    C = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"S")]
    S = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ChargesRules
  {
    [Newtonsoft.Json.JsonProperty("voluntaryChanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public VoluntaryChanges VoluntaryChanges { get; set; }

    [Newtonsoft.Json.JsonProperty("voluntaryRefunds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public VoluntaryRefunds VoluntaryRefunds { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ChargesRules FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ChargesRules>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class VoluntaryChanges : PenaltyAmount
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static VoluntaryChanges FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<VoluntaryChanges>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PenaltyAmount
  {
    [Newtonsoft.Json.JsonProperty("penalty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Penalty Penalty { get; set; }

    [Newtonsoft.Json.JsonProperty("volChangeInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? VolChangeInd { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PenaltyAmount FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PenaltyAmount>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Penalty : TotalExtraCharges
  {
    [Newtonsoft.Json.JsonProperty("penaltyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string PenaltyType { get; set; }

    [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0.0D, 100.0D)]
    public decimal? Percent { get; set; }

    [Newtonsoft.Json.JsonProperty("departureStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string DepartureStatus { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Penalty FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Penalty>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class VoluntaryRefunds : PenaltyAmount
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static VoluntaryRefunds FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<VoluntaryRefunds>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FareReference
  {
    [Newtonsoft.Json.JsonProperty("StringLength0to8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8)]
    public string StringLength0to8 { get; set; }

    [Newtonsoft.Json.JsonProperty("resBookDesigCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{1,2}$")]
    public string ResBookDesigCode { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketDesignatorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string TicketDesignatorCode { get; set; }

    [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string AccountCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FareReference FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FareReference>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FareInfos : FareInfoType
  {
    [Newtonsoft.Json.JsonProperty("aC_SegmentRefNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ACSegmentRefNumbers> AC_SegmentRefNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_DateDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ACDateDetails> AC_DateDetails { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_TravelerRefNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ACTravelerRefNumbers> AC_TravelerRefNumbers { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FareInfos FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FareInfos>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACSegmentRefNumbers
  {
    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACSegmentRefNumbers FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACSegmentRefNumbers>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACDateDetails
  {
    [Newtonsoft.Json.JsonProperty("dateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DateType { get; set; }

    [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Date { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACDateDetails FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACDateDetails>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACTravelerRefNumbers
  {
    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACTravelerRefNumbers FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACTravelerRefNumbers>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PriceRequestInformation : PriceRequestInformationType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PriceRequestInformation FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PriceRequestInformation>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PriceRequestInformationType : PriceRequestAttributes
  {
    [Newtonsoft.Json.JsonProperty("negotiatedFareCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<NegotiatedFareCode> NegotiatedFareCode { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketingCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{2}$")]
    public string TicketingCountry { get; set; }

    [Newtonsoft.Json.JsonProperty("cabinType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object CabinType { get; set; }

    [Newtonsoft.Json.JsonProperty("discountPricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DiscountPricing DiscountPricing { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_PromoInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ACPromoInformation> AC_PromoInformation { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PriceRequestInformationType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PriceRequestInformationType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class NegotiatedFareCode
  {
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("codeListAirGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CodeListAirGroup CodeListAirGroup { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketDesignatorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string TicketDesignatorCode { get; set; }

    [Newtonsoft.Json.JsonProperty("overrideRuleInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? OverrideRuleInd { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static NegotiatedFareCode FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<NegotiatedFareCode>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CodeListAirGroup
  {
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
    public int? Quantity { get; set; }

    [Newtonsoft.Json.JsonProperty("secondaryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string SecondaryCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CodeListAirGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CodeListAirGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DiscountPricing : DiscountPricingGroup
  {
    [Newtonsoft.Json.JsonProperty("flightReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightReference> FlightReference { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DiscountPricing FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DiscountPricing>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightReference
  {
    [Newtonsoft.Json.JsonProperty("flightRefNumber", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string FlightRefNumber { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightReference FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightReference>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DiscountPricingGroup
  {
    [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TypeObject Type { get; set; }

    [Newtonsoft.Json.JsonProperty("usage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Usage Usage { get; set; }

    [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Discount { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketDesignatorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string TicketDesignatorCode { get; set; }

    [Newtonsoft.Json.JsonProperty("StringLength1to128", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string StringLength1to128 { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DiscountPricingGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DiscountPricingGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum TypeObject
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Refund")]
    Refund = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Charge")]
    Charge = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Forfeiture")]
    Forfeiture = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum Usage
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Plus")]
    Plus = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Minus")]
    Minus = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PriceRequestAttributes
  {
    [Newtonsoft.Json.JsonProperty("aC_CityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string AC_CityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string AccountCode { get; set; }

    [Newtonsoft.Json.JsonProperty("fareQualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string FareQualifier { get; set; }

    [Newtonsoft.Json.JsonProperty("negotiatedFaresOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? NegotiatedFaresOnly { get; set; }

    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{3}$")]
    public string CurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("PricingSourceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PricingSourceType PricingSourceType { get; set; }

    [Newtonsoft.Json.JsonProperty("requestedTicketingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object RequestedTicketingDate { get; set; }

    [Newtonsoft.Json.JsonProperty("saleCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{2}$")]
    public string SaleCountry { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PriceRequestAttributes FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PriceRequestAttributes>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum PricingSourceType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Published")]
    Published = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Private")]
    Ipprivate = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Both")]
    Both = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TravelerInfo : TravelerInfoType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TravelerInfo FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TravelerInfo>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TravelerInfoType
  {
    [Newtonsoft.Json.JsonProperty("airTraveler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<AirTraveler> AirTraveler { get; set; }

    [Newtonsoft.Json.JsonProperty("specialReqDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SpecialReqDetails> SpecialReqDetails { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TravelerInfoType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TravelerInfoType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirTraveler : AirTravelerType
  {
    [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Gender Gender { get; set; }

    [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CommentType> Comment { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_EmergencyContactInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ACEmergencyContactInfo AC_EmergencyContactInfo { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirTraveler FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirTraveler>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum Gender
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Male")]
    Male = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Female")]
    Female = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
    Unknown = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Male_NoShare")]
    Male_NoShare = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"Female_NoShare")]
    Female_NoShare = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CommentType
  {
    [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<CommentTypeParagraphType> Comment { get; set; } = new System.Collections.ObjectModel.Collection<CommentTypeParagraphType>();

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CommentType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CommentTypeParagraphType : Description1
  {
    [Newtonsoft.Json.JsonProperty("commentOriginatorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string CommentOriginatorCode { get; set; }

    [Newtonsoft.Json.JsonProperty("guestViewable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? GuestViewable { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CommentTypeParagraphType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentTypeParagraphType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Description1
  {
    [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Text Text { get; set; }

    [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Image { get; set; }

    [Newtonsoft.Json.JsonProperty("listItem_Extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ListItemExtension ListItem_Extension { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("paragraphNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
    public int? ParagraphNumber { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Description1 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Description1>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACEmergencyContactInfo
  {
    [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PersonName PersonName { get; set; }

    [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Telephone Telephone { get; set; }

    [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{2}$")]
    public string CountryCode { get; set; }

    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Operation Operation { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACEmergencyContactInfo FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACEmergencyContactInfo>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PersonName : Content0
  {
    [Newtonsoft.Json.JsonProperty("partialName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? PartialName { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PersonName FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PersonName>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Content0
  {
    [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> GivenName { get; set; }

    [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> MiddleName { get; set; }

    [Newtonsoft.Json.JsonProperty("surnamePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string SurnamePrefix { get; set; }

    [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string Surname { get; set; }

    [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> NameTitle { get; set; }

    [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Document Document { get; set; }

    [Newtonsoft.Json.JsonProperty("defaultInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? DefaultInd { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Content0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Content0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Document
  {
    [Newtonsoft.Json.JsonProperty("docID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string DocID { get; set; }

    [Newtonsoft.Json.JsonProperty("docType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string DocType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Document FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Document>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Telephone
  {
    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    [Newtonsoft.Json.JsonProperty("phoneLocationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PhoneLocationType PhoneLocationType { get; set; }

    [Newtonsoft.Json.JsonProperty("phoneTechType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string PhoneTechType { get; set; }

    [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string PhoneNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,5}$")]
    public string Extension { get; set; }

    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string Remark { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Telephone FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Telephone>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum PhoneLocationType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"3")]
    E3 = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"4")]
    E4 = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"5")]
    E5 = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"6")]
    E6 = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"7")]
    E7 = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"P01")]
    P01 = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum Operation
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Add-Update")]
    Add_Update = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Cancel")]
    Cancel = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Delete")]
    ADelete = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Add")]
    Add = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"Replace")]
    Replace = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirTravelerType
  {
    [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Gender Gender { get; set; }

    [Newtonsoft.Json.JsonProperty("eticketInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? EticketInd { get; set; }

    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{3}$")]
    public string CurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PersonName0 PersonName { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<AirTravelerEmailType> Email { get; set; }

    [Newtonsoft.Json.JsonProperty("passengerTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{3}$")]
    public string PassengerTypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("custLoyalty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CustLoyalty1> CustLoyalty { get; set; }

    [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Document0> Document { get; set; }

    [Newtonsoft.Json.JsonProperty("flightSegmentRPHs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> FlightSegmentRPHs { get; set; }

    [Newtonsoft.Json.JsonProperty("travelerRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TravelerRefNumber TravelerRefNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TelephoneType> Telephone { get; set; }

    [Newtonsoft.Json.JsonProperty("accompaniedByInfantInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? AccompaniedByInfantInd { get; set; }

    [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Address0> Address { get; set; }

    [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? BirthDate { get; set; }

    [Newtonsoft.Json.JsonProperty("passengerTypeQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PassengerTypeQuantity PassengerTypeQuantity { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirTravelerType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirTravelerType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PersonName0 : PersonNameType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PersonName0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PersonName0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PersonNameType
  {
    [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> GivenName { get; set; }

    [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> MiddleName { get; set; }

    [Newtonsoft.Json.JsonProperty("surnamePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string SurnamePrefix { get; set; }

    [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string Surname { get; set; }

    [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> NameTitle { get; set; }

    [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Document Document { get; set; }

    [Newtonsoft.Json.JsonProperty("defaultInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? DefaultInd { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PersonNameType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PersonNameType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirTravelerEmailType : EmailType
  {
    [Newtonsoft.Json.JsonProperty("emailType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string EmailType { get; set; }

    [Newtonsoft.Json.JsonProperty("defaultInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? DefaultInd { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirTravelerEmailType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirTravelerEmailType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class EmailType
  {
    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string Remark { get; set; }

    [Newtonsoft.Json.JsonProperty("EmailType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string EmailType1 { get; set; }

    [Newtonsoft.Json.JsonProperty("StringLength1to128", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string StringLength1to128 { get; set; }

    [Newtonsoft.Json.JsonProperty("defaultInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? DefaultInd { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static EmailType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<EmailType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CustLoyalty1 : CustomerLoyaltyGroup
  {
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Operation Operation { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CustLoyalty1 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CustLoyalty1>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CustomerLoyaltyGroup
  {
    [Newtonsoft.Json.JsonProperty("programID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string ProgramID { get; set; }

    [Newtonsoft.Json.JsonProperty("membershipID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string MembershipID { get; set; }

    [Newtonsoft.Json.JsonProperty("vendorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> VendorCode { get; set; }

    [Newtonsoft.Json.JsonProperty("allianceLoyaltyLevelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string AllianceLoyaltyLevelName { get; set; }

    [Newtonsoft.Json.JsonProperty("loyalLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string LoyalLevel { get; set; }

    [Newtonsoft.Json.JsonProperty("loyalLevelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, 3)]
    public int? LoyalLevelCode { get; set; }

    [Newtonsoft.Json.JsonProperty("singleVendorInd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SingleVendorInd SingleVendorInd { get; set; }

    [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? EffectiveDate { get; set; }

    [Newtonsoft.Json.JsonProperty("expireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? ExpireDate { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CustomerLoyaltyGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerLoyaltyGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Document0
  {
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Operation Operation { get; set; }

    [Newtonsoft.Json.JsonProperty("expireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? ExpireDate { get; set; }

    [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Gender Gender { get; set; }

    [Newtonsoft.Json.JsonProperty("docIssueCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{2}$")]
    public string DocIssueCountry { get; set; }

    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string Remark { get; set; }

    [Newtonsoft.Json.JsonProperty("docLimitations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> DocLimitations { get; set; }

    [Newtonsoft.Json.JsonProperty("docHolderNationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{2}$")]
    public string DocHolderNationality { get; set; }

    [Newtonsoft.Json.JsonProperty("docHolderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string DocHolderName { get; set; }

    [Newtonsoft.Json.JsonProperty("docIssueLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string DocIssueLocation { get; set; }

    [Newtonsoft.Json.JsonProperty("docID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string DocID { get; set; }

    [Newtonsoft.Json.JsonProperty("birthCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{2}$")]
    public string BirthCountry { get; set; }

    [Newtonsoft.Json.JsonProperty("holderType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public HolderType HolderType { get; set; }

    [Newtonsoft.Json.JsonProperty("birthPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string BirthPlace { get; set; }

    [Newtonsoft.Json.JsonProperty("contactName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string ContactName { get; set; }

    [Newtonsoft.Json.JsonProperty("docHolderFormattedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DocHolderFormattedName DocHolderFormattedName { get; set; }

    [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? BirthDate { get; set; }

    [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? EffectiveDate { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_DocType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ACDocType AC_DocType { get; set; }

    [Newtonsoft.Json.JsonProperty("additionalPersonNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> AdditionalPersonNames { get; set; }

    [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string PostalCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Document0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Document0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum HolderType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Infant")]
    Infant = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"HeadOfHousehold")]
    HeadOfHousehold = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DocHolderFormattedName : Content0
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DocHolderFormattedName FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DocHolderFormattedName>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum ACDocType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Passport")]
    Passport = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"USPassport")]
    USPassport = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"USAlienCard")]
    USAlienCard = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"CAResidentCard")]
    CAResidentCard = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"Nexus")]
    Nexus = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"IdentityCard")]
    IdentityCard = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"KnownTraveller")]
    KnownTraveller = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"Redress")]
    Redress = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"Visa")]
    Visa = 8,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TravelerRefNumber
  {
    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TravelerRefNumber FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TravelerRefNumber>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TelephoneType : TelephoneInfoGroup
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TelephoneType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TelephoneType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TelephoneInfoGroup
  {
    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    [Newtonsoft.Json.JsonProperty("phoneLocationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PhoneLocationType PhoneLocationType { get; set; }

    [Newtonsoft.Json.JsonProperty("phoneTechType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string PhoneTechType { get; set; }

    [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string PhoneNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,5}$")]
    public string Extension { get; set; }

    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string Remark { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TelephoneInfoGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TelephoneInfoGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Address0
  {
    [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Operation Operation { get; set; }

    [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string County { get; set; }

    [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string CityName { get; set; }

    [Newtonsoft.Json.JsonProperty("countryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CountryName CountryName { get; set; }

    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string Remark { get; set; }

    [Newtonsoft.Json.JsonProperty("formattedInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? FormattedInd { get; set; }

    [Newtonsoft.Json.JsonProperty("streetNmbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public StreetNmbr StreetNmbr { get; set; }

    [Newtonsoft.Json.JsonProperty("bldgRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> BldgRoom { get; set; }

    [Newtonsoft.Json.JsonProperty("addressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> AddressLine { get; set; }

    [Newtonsoft.Json.JsonProperty("stateProv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public StateProv StateProv { get; set; }

    [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string PostalCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Address0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Address0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CountryName
  {
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{2}$")]
    public string Code { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CountryName FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CountryName>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class StreetNmbr : StreetNmbrType
  {
    [Newtonsoft.Json.JsonProperty("streetNmbrSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string StreetNmbrSuffix { get; set; }

    [Newtonsoft.Json.JsonProperty("streetDirection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string StreetDirection { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static StreetNmbr FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<StreetNmbr>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class StreetNmbrType
  {
    [Newtonsoft.Json.JsonProperty("StringLength0to64", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64)]
    public string StringLength0to64 { get; set; }

    [Newtonsoft.Json.JsonProperty("pO_Box", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string PO_Box { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static StreetNmbrType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<StreetNmbrType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class StateProv
  {
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("StateProvCodeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string StateProvCodeType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static StateProv FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<StateProv>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SpecialReqDetails
  {
    [Newtonsoft.Json.JsonProperty("seatRequests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SpecialReqDetailsSeatRequestType> SeatRequests { get; set; }

    [Newtonsoft.Json.JsonProperty("otherServiceInformations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OtherServiceInformations OtherServiceInformations { get; set; }

    [Newtonsoft.Json.JsonProperty("remarks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Remarks> Remarks { get; set; }

    [Newtonsoft.Json.JsonProperty("specialRemarks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SpecialRemarks SpecialRemarks { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SpecialReqDetails FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialReqDetails>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SpecialReqDetailsSeatRequestType : SeatRequestType0
  {
    [Newtonsoft.Json.JsonProperty("travelerRefNumberRPHList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> TravelerRefNumberRPHList { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_PreviousSeatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^([0-9]{1,3}[A-Z]{1})$")]
    public string AC_PreviousSeatNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("flightRefNumberRPHList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> FlightRefNumberRPHList { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SpecialReqDetailsSeatRequestType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialReqDetailsSeatRequestType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SeatRequestType0 : SeatRequestAttributes
  {
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string Status { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ArrivalAirport ArrivalAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object DepartureDate { get; set; }

    [Newtonsoft.Json.JsonProperty("offers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<AirOfferType> Offers { get; set; }

    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^([0-9]{1,4}[A-Z]?|OPEN|ARNK)$")]
    public string FlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("airline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Airline Airline { get; set; }

    [Newtonsoft.Json.JsonProperty("departureAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DepartureAirport DepartureAirport { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SeatRequestType0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SeatRequestType0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirOfferType
  {
    [Newtonsoft.Json.JsonProperty("serviceFamily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ServiceFamily ServiceFamily { get; set; }

    [Newtonsoft.Json.JsonProperty("restriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Restriction> Restriction { get; set; }

    [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ShortDescription ShortDescription { get; set; }

    [Newtonsoft.Json.JsonProperty("termsAndConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TermsAndConditions> TermsAndConditions { get; set; }

    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Name { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirOfferType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirOfferType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ServiceFamily : AirAncillaryServiceType
  {
    [Newtonsoft.Json.JsonProperty("longDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string LongDescription { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string ShortDescription { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ServiceFamily FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceFamily>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AirAncillaryServiceType
  {
    [Newtonsoft.Json.JsonProperty("productGroup", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<ProductGroup> ProductGroup { get; set; } = new System.Collections.ObjectModel.Collection<ProductGroup>();

    [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ServiceCode ServiceCode { get; set; }

    [Newtonsoft.Json.JsonProperty("extServiceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string ExtServiceCode { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Description { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AirAncillaryServiceType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AirAncillaryServiceType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ProductGroup
  {
    [Newtonsoft.Json.JsonProperty("subGroup", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<SubGroup> SubGroup { get; set; } = new System.Collections.ObjectModel.Collection<SubGroup>();

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("brandedFareName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string BrandedFareName { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SubGroup
  {
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("additionalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string AdditionalCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SubGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SubGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum ServiceCode
  {
    [System.Runtime.Serialization.EnumMember(Value = @"All")]
    All = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"A_FreeBaggageAllowance")]
    A_FreeBaggageAllowance = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"C_BaggageCharges")]
    C_BaggageCharges = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"F_FlightRelated")]
    F_FlightRelated = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"T_TicketRelated")]
    T_TicketRelated = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"M_MerchandiseRelated")]
    M_MerchandiseRelated = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"R_RuleBuster")]
    R_RuleBuster = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"P_PrepaidBaggage")]
    P_PrepaidBaggage = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"E_Embargos")]
    E_Embargos = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"GT_GroundTransportationNonAirServices")]
    GT_GroundTransportationNonAirServices = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"IE_InFlightEntertainment")]
    IE_InFlightEntertainment = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"LG_Lounge")]
    LG_Lounge = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"Other_")]
    Other_ = 12,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Restriction
  {
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("tripMinOfferQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
    public int? TripMinOfferQty { get; set; }

    [Newtonsoft.Json.JsonProperty("tripMaxOfferQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
    public int? TripMaxOfferQty { get; set; }

    [Newtonsoft.Json.JsonProperty("travelerMinOfferQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
    public int? TravelerMinOfferQty { get; set; }

    [Newtonsoft.Json.JsonProperty("travelerMaxOfferQty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
    public int? TravelerMaxOfferQty { get; set; }

    [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? EffectiveDate { get; set; }

    [Newtonsoft.Json.JsonProperty("expireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? ExpireDate { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Restriction FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Restriction>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ShortDescription : Comment0
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ShortDescription FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ShortDescription>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TermsAndConditions
  {
    [Newtonsoft.Json.JsonProperty("voluntaryChanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public VoluntaryChanges VoluntaryChanges { get; set; }

    [Newtonsoft.Json.JsonProperty("voluntaryRefunds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public VoluntaryRefunds VoluntaryRefunds { get; set; }

    [Newtonsoft.Json.JsonProperty("other", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Other { get; set; }

    [Newtonsoft.Json.JsonProperty("refundableInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? RefundableInd { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TermsAndConditions FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAndConditions>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Airline
  {
    [Newtonsoft.Json.JsonProperty("StringLength1to32", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string StringLength1to32 { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Airline FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Airline>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SeatRequestAttributes
  {
    [Newtonsoft.Json.JsonProperty("seatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^([0-9]{1,3}[A-Z]{1})$")]
    public string SeatNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("seatPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> SeatPreference { get; set; }

    [Newtonsoft.Json.JsonProperty("deckLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string DeckLevel { get; set; }

    [Newtonsoft.Json.JsonProperty("rowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, 999)]
    public int? RowNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("seatInRow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{1}$")]
    public string SeatInRow { get; set; }

    [Newtonsoft.Json.JsonProperty("smokingAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SmokingAllowed { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SeatRequestAttributes FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SeatRequestAttributes>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class OtherServiceInformations
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static OtherServiceInformations FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<OtherServiceInformations>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SpecialRemarks
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SpecialRemarks FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialRemarks>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Fulfillment : FulfillmentType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Fulfillment FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Fulfillment>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FulfillmentType
  {
    [Newtonsoft.Json.JsonProperty("paymentDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<PaymentDetails> PaymentDetails { get; set; } = new System.Collections.ObjectModel.Collection<PaymentDetails>();

    [Newtonsoft.Json.JsonProperty("deliveryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DeliveryAddress DeliveryAddress { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Name Name { get; set; }

    [Newtonsoft.Json.JsonProperty("receipt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Receipt Receipt { get; set; }

    [Newtonsoft.Json.JsonProperty("paymentText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PaymentTextFormattedTextTextType> PaymentText { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FulfillmentType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PaymentDetails
  {
    [Newtonsoft.Json.JsonProperty("PaymentCardType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PaymentCard PaymentCardType { get; set; }

    [Newtonsoft.Json.JsonProperty("voucher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Voucher Voucher { get; set; }

    [Newtonsoft.Json.JsonProperty("loyaltyRedemption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public LoyaltyRedemption LoyaltyRedemption { get; set; }

    [Newtonsoft.Json.JsonProperty("cash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cash Cash { get; set; }

    [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PaymentDetailTypePaymentAmount> PaymentAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string PaymentType { get; set; }

    [Newtonsoft.Json.JsonProperty("paymentTransactionTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PaymentTransactionTypeCode PaymentTransactionTypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("primaryPaymentInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? PrimaryPaymentInd { get; set; }

    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string Remark { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    [Newtonsoft.Json.JsonProperty("splitPaymentInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SplitPaymentInd { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PaymentDetails FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentDetails>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PaymentCard : PaymentCardType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PaymentCard FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentCard>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PaymentCardType : PaymentCardDateGroup
  {
    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string Remark { get; set; }

    [Newtonsoft.Json.JsonProperty("aC_PayerAuthentication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ACPayerAuthentication AC_PayerAuthentication { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Email> Email { get; set; }

    [Newtonsoft.Json.JsonProperty("cardNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CardNumber CardNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("seriesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SeriesCode SeriesCode { get; set; }

    [Newtonsoft.Json.JsonProperty("threeDomainSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ThreeDomainSecurity ThreeDomainSecurity { get; set; }

    [Newtonsoft.Json.JsonProperty("cardType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CardType CardType { get; set; }

    [Newtonsoft.Json.JsonProperty("custLoyalty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CustLoyalty> CustLoyalty { get; set; }

    [Newtonsoft.Json.JsonProperty("extendedPaymentInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? ExtendedPaymentInd { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    [Newtonsoft.Json.JsonProperty("cardHolderRPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string CardHolderRPH { get; set; }

    [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Telephone> Telephone { get; set; }

    [Newtonsoft.Json.JsonProperty("cardCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CardCode CardCode { get; set; }

    [Newtonsoft.Json.JsonProperty("magneticStripe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<MagneticStripe> MagneticStripe { get; set; }

    [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Address Address { get; set; }

    [Newtonsoft.Json.JsonProperty("secureInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SecureInd { get; set; }

    [Newtonsoft.Json.JsonProperty("cardHolderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string CardHolderName { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PaymentCardType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentCardType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ACPayerAuthentication
  {
    [Newtonsoft.Json.JsonProperty("acsUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AcsUrl { get; set; }

    [Newtonsoft.Json.JsonProperty("paReq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PaReq { get; set; }

    [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TransactionID { get; set; }

    [Newtonsoft.Json.JsonProperty("requestID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string RequestID { get; set; }

    [Newtonsoft.Json.JsonProperty("merchangeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MerchangeID { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ACPayerAuthentication FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ACPayerAuthentication>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Email : DefaultIndGroup
  {
    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string Remark { get; set; }

    [Newtonsoft.Json.JsonProperty("emailType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string EmailType { get; set; }

    [Newtonsoft.Json.JsonProperty("StringLength1to128", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string StringLength1to128 { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Email FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Email>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DefaultIndGroup
  {
    [Newtonsoft.Json.JsonProperty("defaultInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? DefaultInd { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DefaultIndGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultIndGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CardNumber : MagneticStripe
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CardNumber FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CardNumber>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class MagneticStripe
  {
    [Newtonsoft.Json.JsonProperty("plainText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string PlainText { get; set; }

    [Newtonsoft.Json.JsonProperty("warning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Warning Warning { get; set; }

    [Newtonsoft.Json.JsonProperty("encryptedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string EncryptedValue { get; set; }

    [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1,32}$")]
    public string Token { get; set; }

    [Newtonsoft.Json.JsonProperty("authenticationMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AuthenticationMethod AuthenticationMethod { get; set; }

    [Newtonsoft.Json.JsonProperty("xidLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? XidLength { get; set; }

    [Newtonsoft.Json.JsonProperty("xidEncrypted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string XidEncrypted { get; set; }

    [Newtonsoft.Json.JsonProperty("pareqLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? PareqLength { get; set; }

    [Newtonsoft.Json.JsonProperty("pareqEncrypted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string PareqEncrypted { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MagneticStripe FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<MagneticStripe>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Warning : ErrorWarningAttributeGroup
  {
    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Warning FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Warning>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum AuthenticationMethod
  {
    [System.Runtime.Serialization.EnumMember(Value = @"SecurityCode")]
    SecurityCode = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MagneticStripe")]
    MagneticStripe = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SeriesCode : MagneticStripe
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SeriesCode FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SeriesCode>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ThreeDomainSecurity
  {
    [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Gateway Gateway { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Results Results { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ThreeDomainSecurity FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ThreeDomainSecurity>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Gateway
  {
    [Newtonsoft.Json.JsonProperty("authenticationVerificationValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AuthenticationVerificationValue AuthenticationVerificationValue { get; set; }

    [Newtonsoft.Json.JsonProperty("eci", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1}$")]
    public string Eci { get; set; }

    [Newtonsoft.Json.JsonProperty("merchantID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string MerchantID { get; set; }

    [Newtonsoft.Json.JsonProperty("processorID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string ProcessorID { get; set; }

    [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Url { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Gateway FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Gateway>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AuthenticationVerificationValue
  {
    [Newtonsoft.Json.JsonProperty("secure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Secure Secure { get; set; }

    [Newtonsoft.Json.JsonProperty("plainText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,19}$")]
    public string PlainText { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AuthenticationVerificationValue FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AuthenticationVerificationValue>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Secure : MagneticStripe
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Secure FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Secure>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Results
  {
    [Newtonsoft.Json.JsonProperty("cavv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Cavv { get; set; }

    [Newtonsoft.Json.JsonProperty("paResStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1}$")]
    public string PaResStatus { get; set; }

    [Newtonsoft.Json.JsonProperty("signatureVerfication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string SignatureVerfication { get; set; }

    [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string TransactionID { get; set; }

    [Newtonsoft.Json.JsonProperty("xid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Xid { get; set; }

    [Newtonsoft.Json.JsonProperty("creditCardCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string CreditCardCompany { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Results FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Results>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CardType : OTACodeExtGroup
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CardType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CardType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class OTACodeExtGroup
  {
    [Newtonsoft.Json.JsonProperty("removalInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? RemovalInd { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("descriptionDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string DescriptionDetail { get; set; }

    [Newtonsoft.Json.JsonProperty("sourceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string SourceName { get; set; }

    [Newtonsoft.Json.JsonProperty("sourceURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w+:(\/?\/?)[^\s]+$")]
    public string SourceURL { get; set; }

    [Newtonsoft.Json.JsonProperty("resourceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string ResourceName { get; set; }

    [Newtonsoft.Json.JsonProperty("resourceURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w+:(\/?\/?)[^\s]+$")]
    public string ResourceURL { get; set; }

    [Newtonsoft.Json.JsonProperty("uniqueID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string UniqueID { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static OTACodeExtGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<OTACodeExtGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum CardCode
  {
    [System.Runtime.Serialization.EnumMember(Value = @"AX")]
    AX = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"CA")]
    CA = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"DC")]
    DC = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"DS")]
    DS = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"TP")]
    TP = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"VI")]
    VI = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Address : AddressType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Address FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Address>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AddressType : FormattedInd
  {
    [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string County { get; set; }

    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string Remark { get; set; }

    [Newtonsoft.Json.JsonProperty("countryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CountryName CountryName { get; set; }

    [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string CityName { get; set; }

    [Newtonsoft.Json.JsonProperty("bldgRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> BldgRoom { get; set; }

    [Newtonsoft.Json.JsonProperty("streetNmbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public StreetNmbr StreetNmbr { get; set; }

    [Newtonsoft.Json.JsonProperty("stateProv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public StateProv StateProv { get; set; }

    [Newtonsoft.Json.JsonProperty("addressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> AddressLine { get; set; }

    [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string PostalCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AddressType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AddressType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FormattedInd
  {
    [Newtonsoft.Json.JsonProperty("FormattedInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? FormattedInd1 { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FormattedInd FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FormattedInd>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PaymentCardDateGroup
  {
    [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^(0[1-9]|1[0-2])[0-9][0-9]$")]
    public string EffectiveDate { get; set; }

    [Newtonsoft.Json.JsonProperty("expireDate", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^(0[1-9]|1[0-2])[0-9][0-9]$")]
    public string ExpireDate { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PaymentCardDateGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentCardDateGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Voucher : VoucherGroup
  {
    [Newtonsoft.Json.JsonProperty("groupDaysApplyInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? GroupDaysApplyInd { get; set; }

    [Newtonsoft.Json.JsonProperty("valueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string ValueType { get; set; }

    [Newtonsoft.Json.JsonProperty("billingAccountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BillingAccountName BillingAccountName { get; set; }

    [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string Identifier { get; set; }

    [Newtonsoft.Json.JsonProperty("electronicIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? ElectronicIndicator { get; set; }

    [Newtonsoft.Json.JsonProperty("billingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string BillingNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("billingAccountAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BillingAccountAddress BillingAccountAddress { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Voucher FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Voucher>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class BillingAccountName : CompanyIDAttributesGroup
  {
    [Newtonsoft.Json.JsonProperty("contactName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string ContactName { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BillingAccountName FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BillingAccountName>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class BillingAccountAddress : AddressType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BillingAccountAddress FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BillingAccountAddress>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class VoucherGroup
  {
    [Newtonsoft.Json.JsonProperty("seriesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string SeriesCode { get; set; }

    [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? EffectiveDate { get; set; }

    [Newtonsoft.Json.JsonProperty("expireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? ExpireDate { get; set; }

    [Newtonsoft.Json.JsonProperty("expireDateExclusiveIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? ExpireDateExclusiveIndicator { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static VoucherGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<VoucherGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class LoyaltyRedemption : PromotionCodeGroup
  {
    [Newtonsoft.Json.JsonProperty("loyaltyCertificate", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<LoyaltyRedemptionLoyaltyCertificateGroup> LoyaltyCertificate { get; set; } = new System.Collections.ObjectModel.Collection<LoyaltyRedemptionLoyaltyCertificateGroup>();

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static LoyaltyRedemption FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<LoyaltyRedemption>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class LoyaltyRedemptionLoyaltyCertificateGroup : LoyaltyCertificateGroup
  {
    [Newtonsoft.Json.JsonProperty("redemptionQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
    public int? RedemptionQuantity { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static LoyaltyRedemptionLoyaltyCertificateGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<LoyaltyRedemptionLoyaltyCertificateGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class LoyaltyCertificateGroup
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("iD_Context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string ID_Context { get; set; }

    [Newtonsoft.Json.JsonProperty("certificateNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string CertificateNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("memberNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string MemberNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("programName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string ProgramName { get; set; }

    [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? EffectiveDate { get; set; }

    [Newtonsoft.Json.JsonProperty("expireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? ExpireDate { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string Status { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static LoyaltyCertificateGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<LoyaltyCertificateGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PromotionCodeGroup
  {
    [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string PromotionCode { get; set; }

    [Newtonsoft.Json.JsonProperty("promotionVendorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> PromotionVendorCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PromotionCodeGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PromotionCodeGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Cash
  {
    [Newtonsoft.Json.JsonProperty("cashIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? CashIndicator { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Cash FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Cash>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PaymentDetailTypePaymentAmount : TotalExtraCharges
  {
    [Newtonsoft.Json.JsonProperty("approvalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string ApprovalCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PaymentDetailTypePaymentAmount FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentDetailTypePaymentAmount>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum PaymentTransactionTypeCode
  {
    [System.Runtime.Serialization.EnumMember(Value = @"charge")]
    Charge = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"reserve")]
    Reserve = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"refund")]
    Refund = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Air")]
    Air = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"Ancillary")]
    Ancillary = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"Fee")]
    Fee = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"LAS")]
    LAS = 6,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DeliveryAddress
  {
    [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string County { get; set; }

    [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string CityName { get; set; }

    [Newtonsoft.Json.JsonProperty("countryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CountryName CountryName { get; set; }

    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string Remark { get; set; }

    [Newtonsoft.Json.JsonProperty("formattedInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? FormattedInd { get; set; }

    [Newtonsoft.Json.JsonProperty("streetNmbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public StreetNmbr StreetNmbr { get; set; }

    [Newtonsoft.Json.JsonProperty("bldgRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> BldgRoom { get; set; }

    [Newtonsoft.Json.JsonProperty("addressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> AddressLine { get; set; }

    [Newtonsoft.Json.JsonProperty("stateProv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public StateProv StateProv { get; set; }

    [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string PostalCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DeliveryAddress FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DeliveryAddress>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Name : PersonNameType
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Name FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Name>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Receipt
  {
    [Newtonsoft.Json.JsonProperty("distribType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string DistribType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Receipt FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Receipt>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PaymentTextFormattedTextTextType : Description0
  {
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string Name { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PaymentTextFormattedTextTextType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentTextFormattedTextTextType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Description0
  {
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("formatted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Formatted { get; set; }

    [Newtonsoft.Json.JsonProperty("textFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TextFormat TextFormat { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Description0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Description0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Ticketing
  {
    [Newtonsoft.Json.JsonProperty("ticketAdvisory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TicketAdvisoryType> TicketAdvisory { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketingVendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TicketingVendor TicketingVendor { get; set; }

    [Newtonsoft.Json.JsonProperty("totalFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TotalFare TotalFare { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketTimeLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? TicketTimeLimit { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TicketType TicketType { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string TicketingStatus { get; set; }

    [Newtonsoft.Json.JsonProperty("flightSegmentRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> FlightSegmentRefNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("travelerRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> TravelerRefNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("pseudoCityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string PseudoCityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("requestedTicketingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object RequestedTicketingDate { get; set; }

    [Newtonsoft.Json.JsonProperty("bookingChangeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public BookingChangeType BookingChangeType { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketDocumentNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string TicketDocumentNbr { get; set; }

    [Newtonsoft.Json.JsonProperty("passengerTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{3}$")]
    public string PassengerTypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("miscTicketingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> MiscTicketingCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Ticketing FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Ticketing>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TicketAdvisoryType : Content
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TicketAdvisoryType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TicketAdvisoryType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Content
  {
    [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Content1 { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Content FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Content>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TicketingVendor
  {
    [Newtonsoft.Json.JsonProperty("companyShortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(70)]
    public string CompanyShortName { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("codeContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string CodeContext { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TicketingVendor FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TicketingVendor>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum TicketType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"eTicket")]
    ETicket = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Paper")]
    Paper = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"MCO")]
    MCO = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"EMD-A")]
    EMD_A = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"EMD-S")]
    EMD_S = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"EMD")]
    EMD = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum BookingChangeType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"FlightSegment")]
    FlightSegment = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"TravelerName")]
    TravelerName = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Both")]
    Both = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class BookingReferenceIDUniqueIDType : UniqueIDGroup
  {
    [Newtonsoft.Json.JsonProperty("flightRefNumberRPHList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> FlightRefNumberRPHList { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BookingReferenceIDUniqueIDType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BookingReferenceIDUniqueIDType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class UniqueIDGroup
  {
    [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("iD_Context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string ID_Context { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UniqueIDGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UniqueIDGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class EMDInfo0 : QuantityGroup
  {
    [Newtonsoft.Json.JsonProperty("emD_Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public EMDType EmD_Type { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketingModeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1}$")]
    public string TicketingModeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("paymentDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PaymentDetailType> PaymentDetail { get; set; }

    [Newtonsoft.Json.JsonProperty("taxCouponInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TaxCouponInformation TaxCouponInformation { get; set; }

    [Newtonsoft.Json.JsonProperty("quoteInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? QuoteInd { get; set; }

    [Newtonsoft.Json.JsonProperty("responseComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ResponseComment ResponseComment { get; set; }

    [Newtonsoft.Json.JsonProperty("custLoyalty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CustLoyalty> CustLoyalty { get; set; }

    [Newtonsoft.Json.JsonProperty("carrierFeeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CarrierFeeInfo CarrierFeeInfo { get; set; }

    [Newtonsoft.Json.JsonProperty("totalFltSegQty", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0, 99)]
    public int TotalFltSegQty { get; set; }

    [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Taxes Taxes { get; set; }

    [Newtonsoft.Json.JsonProperty("addReferenceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Content1> AddReferenceID { get; set; }

    [Newtonsoft.Json.JsonProperty("fareInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FareInfo FareInfo { get; set; }

    [Newtonsoft.Json.JsonProperty("fareComponent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FareComponent FareComponent { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    [Newtonsoft.Json.JsonProperty("totalFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TotalFareCurrencyAmountGroup> TotalFare { get; set; }

    [Newtonsoft.Json.JsonProperty("endorsement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Endorsement Endorsement { get; set; }

    [Newtonsoft.Json.JsonProperty("travelerRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TravelerRefNumber TravelerRefNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("specificData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string SpecificData { get; set; }

    [Newtonsoft.Json.JsonProperty("agentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Content1> AgentID { get; set; }

    [Newtonsoft.Json.JsonProperty("originDestination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OriginDestination OriginDestination { get; set; }

    [Newtonsoft.Json.JsonProperty("unstructuredFareCalc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<UnstructuredFareCalc> UnstructuredFareCalc { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static EMDInfo0 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<EMDInfo0>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum EMDType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"EMD-S")]
    EMD_S = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"EMD-A")]
    EMD_A = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PaymentDetailType
  {
    [Newtonsoft.Json.JsonProperty("PaymentCardType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PaymentCardType PaymentCardType { get; set; }

    [Newtonsoft.Json.JsonProperty("voucher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Voucher Voucher { get; set; }

    [Newtonsoft.Json.JsonProperty("loyaltyRedemption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public LoyaltyRedemption LoyaltyRedemption { get; set; }

    [Newtonsoft.Json.JsonProperty("cash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cash Cash { get; set; }

    [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PaymentDetailTypePaymentAmount> PaymentAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string PaymentType { get; set; }

    [Newtonsoft.Json.JsonProperty("paymentTransactionTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PaymentTransactionTypeCode PaymentTransactionTypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("primaryPaymentInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? PrimaryPaymentInd { get; set; }

    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
    public string Remark { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    [Newtonsoft.Json.JsonProperty("splitPaymentInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SplitPaymentInd { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PaymentDetailType FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentDetailType>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TaxCouponInformation
  {
    [Newtonsoft.Json.JsonProperty("ticketDocument", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<TicketDocument> TicketDocument { get; set; } = new System.Collections.ObjectModel.Collection<TicketDocument>();

    [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? BirthDate { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TaxCouponInformation FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxCouponInformation>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TicketDocument
  {
    [Newtonsoft.Json.JsonProperty("couponNumber", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<CouponNumber> CouponNumber { get; set; } = new System.Collections.ObjectModel.Collection<CouponNumber>();

    [Newtonsoft.Json.JsonProperty("ticketDocumentNbr", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string TicketDocumentNbr { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TicketDocument FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TicketDocument>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CouponNumber
  {
    [Newtonsoft.Json.JsonProperty("taxCouponInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TaxCouponInfo TaxCouponInfo { get; set; }

    [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<Tax> Tax { get; set; } = new System.Collections.ObjectModel.Collection<Tax>();

    [Newtonsoft.Json.JsonProperty("unticketedPointInfo", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<UnticketedPointInfo> UnticketedPointInfo { get; set; } = new System.Collections.ObjectModel.Collection<UnticketedPointInfo>();

    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1, 4)]
    public int Number { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CouponNumber FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CouponNumber>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TaxCouponInfo
  {
    [Newtonsoft.Json.JsonProperty("cabin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Cabin { get; set; }

    [Newtonsoft.Json.JsonProperty("airEquipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string AirEquipType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TaxCouponInfo FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxCouponInfo>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Tax : TotalExtraCharges
  {
    [Newtonsoft.Json.JsonProperty("taxCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{2}$")]
    public string TaxCountry { get; set; }

    [Newtonsoft.Json.JsonProperty("refundableInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? RefundableInd { get; set; }

    [Newtonsoft.Json.JsonProperty("taxExemptInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? TaxExemptInd { get; set; }

    [Newtonsoft.Json.JsonProperty("taxName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
    public string TaxName { get; set; }

    [Newtonsoft.Json.JsonProperty("ShortDescriptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(64)]
    public string ShortDescriptionType { get; set; }

    [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public string Rph { get; set; }

    [Newtonsoft.Json.JsonProperty("taxCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string TaxCode { get; set; }

    [Newtonsoft.Json.JsonProperty("taxTransactionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TaxTransactionType TaxTransactionType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Tax FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Tax>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class UnticketedPointInfo
  {
    [Newtonsoft.Json.JsonProperty("cityAirportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string CityAirportCode { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object ArrivalDate { get; set; }

    [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object DepartureDate { get; set; }

    [Newtonsoft.Json.JsonProperty("airEquipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string AirEquipType { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UnticketedPointInfo FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UnticketedPointInfo>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ResponseComment : Comment0
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ResponseComment FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseComment>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CarrierFeeInfo
  {
    [Newtonsoft.Json.JsonProperty("paymentDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PaymentDetail PaymentDetail { get; set; }

    [Newtonsoft.Json.JsonProperty("carrierFee", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<EMDTypeCarrierFee> CarrierFee { get; set; } = new System.Collections.ObjectModel.Collection<EMDTypeCarrierFee>();

    [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Taxes Taxes { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CarrierFeeInfo FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CarrierFeeInfo>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PaymentDetail : PaymentDetails
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PaymentDetail FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentDetail>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class EMDTypeCarrierFee : CompanyIDAttributesGroup
  {
    [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Z]{1,3}(\.[A-Z]{3}(\.X){0,1}){0,1}$")]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("reportingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1}$")]
    public string ReportingCode { get; set; }

    [Newtonsoft.Json.JsonProperty("ruleCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1,3}$")]
    public string RuleCode { get; set; }

    [Newtonsoft.Json.JsonProperty("fareClassCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string FareClassCode { get; set; }

    [Newtonsoft.Json.JsonProperty("tariffNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,3}$")]
    public string TariffNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, 4)]
    public int? Number { get; set; }

    [Newtonsoft.Json.JsonProperty("feeAmount", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<EMDTypeCarrierFeeFeeAmount> FeeAmount { get; set; } = new System.Collections.ObjectModel.Collection<EMDTypeCarrierFeeFeeAmount>();

    [Newtonsoft.Json.JsonProperty("ruleNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1,8}$")]
    public string RuleNumber { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static EMDTypeCarrierFee FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<EMDTypeCarrierFee>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class EMDTypeCarrierFeeFeeAmount
  {
    [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1,3}$")]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("originCityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string OriginCityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("destinationCityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string DestinationCityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
    public decimal Amount { get; set; }

    [Newtonsoft.Json.JsonProperty("applicationCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<string> ApplicationCode { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static EMDTypeCarrierFeeFeeAmount FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<EMDTypeCarrierFeeFeeAmount>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Content1 : UniqueIDGroup
  {
    [Newtonsoft.Json.JsonProperty("dateSplit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    public System.DateTimeOffset? DateSplit { get; set; }

    [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CompanyName CompanyName { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Content1 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Content1>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CompanyName : CompanyIDAttributesGroup
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CompanyName FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CompanyName>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FareComponent
  {
    [Newtonsoft.Json.JsonProperty("priceQuoteDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object PriceQuoteDate { get; set; }

    [Newtonsoft.Json.JsonProperty("pricingDesignator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string PricingDesignator { get; set; }

    [Newtonsoft.Json.JsonProperty("priceableUnit", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<PriceableUnit> PriceableUnit { get; set; } = new System.Collections.ObjectModel.Collection<PriceableUnit>();

    [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
    public string AccountCode { get; set; }

    [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
    public int? Quantity { get; set; }

    [Newtonsoft.Json.JsonProperty("totalConstructionAmount", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<TotalConstructionAmountCurrencyAmountGroup> TotalConstructionAmount { get; set; } = new System.Collections.ObjectModel.Collection<TotalConstructionAmountCurrencyAmountGroup>();

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FareComponent FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FareComponent>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PriceableUnit
  {
    [Newtonsoft.Json.JsonProperty("fareComponentDetail", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<FareComponentDetailCompanyIDAttributesGroup> FareComponentDetail { get; set; } = new System.Collections.ObjectModel.Collection<FareComponentDetailCompanyIDAttributesGroup>();

    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1,8}$")]
    public string Number { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PriceableUnit FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PriceableUnit>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FareComponentDetailCompanyIDAttributesGroup : CompanyIDAttributesGroup
  {
    [Newtonsoft.Json.JsonProperty("fareBasisCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string FareBasisCode { get; set; }

    [Newtonsoft.Json.JsonProperty("constructionPrinciple", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ConstructionPrincipleOriginDestinationGroup> ConstructionPrinciple { get; set; }

    [Newtonsoft.Json.JsonProperty("passengerTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{3}$")]
    public string PassengerTypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("ruleCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1,3}$")]
    public string RuleCode { get; set; }

    [Newtonsoft.Json.JsonProperty("agreementCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string AgreementCode { get; set; }

    [Newtonsoft.Json.JsonProperty("couponSequence", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<CouponSequenceOriginDestinationGroupCompanyIDAtrributesGroup> CouponSequence { get; set; } = new System.Collections.ObjectModel.Collection<CouponSequenceOriginDestinationGroupCompanyIDAtrributesGroup>();

    [Newtonsoft.Json.JsonProperty("ticketDesignator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TicketDesignator> TicketDesignator { get; set; }

    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0, 32)]
    public int Number { get; set; }

    [Newtonsoft.Json.JsonProperty("tariffNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,3}$")]
    public string TariffNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("ruleNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1,8}$")]
    public string RuleNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("waiverCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1,19}$")]
    public string WaiverCode { get; set; }

    [Newtonsoft.Json.JsonProperty("baseAmount", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<BaseAmountCurrencyAmountGroup> BaseAmount { get; set; } = new System.Collections.ObjectModel.Collection<BaseAmountCurrencyAmountGroup>();

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FareComponentDetailCompanyIDAttributesGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FareComponentDetailCompanyIDAttributesGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ConstructionPrincipleOriginDestinationGroup
  {
    [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0.0D, 100.0D)]
    public decimal? Percent { get; set; }

    [Newtonsoft.Json.JsonProperty("originCityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string OriginCityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("destinationCityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string DestinationCityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1,3}$")]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? Amount { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ConstructionPrincipleOriginDestinationGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ConstructionPrincipleOriginDestinationGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CouponSequenceOriginDestinationGroupCompanyIDAtrributesGroup : CompanyIDAttributesGroup
  {
    [Newtonsoft.Json.JsonProperty("resBookDesigCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{1,2}$")]
    public string ResBookDesigCode { get; set; }

    [Newtonsoft.Json.JsonProperty("originCityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string OriginCityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("destinationCityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string DestinationCityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("couponItinerarySeqNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, 99)]
    public int? CouponItinerarySeqNbr { get; set; }

    [Newtonsoft.Json.JsonProperty("stopoverInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? StopoverInd { get; set; }

    [Newtonsoft.Json.JsonProperty("sequenceNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string SequenceNbr { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CouponSequenceOriginDestinationGroupCompanyIDAtrributesGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CouponSequenceOriginDestinationGroupCompanyIDAtrributesGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TicketDesignator
  {
    [Newtonsoft.Json.JsonProperty("ticketDesignatorCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
    public string TicketDesignatorCode { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketDesignatorQualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(0)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-zA-Z]{1,3}$")]
    public string TicketDesignatorQualifier { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TicketDesignator FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TicketDesignator>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class BaseAmountCurrencyAmountGroup : CurrencyAmountGroup
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseAmountCurrencyAmountGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseAmountCurrencyAmountGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TotalConstructionAmountCurrencyAmountGroup : CurrencyAmountGroup
  {
    [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Purpose Purpose { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TotalConstructionAmountCurrencyAmountGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TotalConstructionAmountCurrencyAmountGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum Purpose
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Sell")]
    Sell = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Net")]
    Net = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Base")]
    Ipbase = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Refund")]
    Refund = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"Additional")]
    Additional = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TotalFareCurrencyAmountGroup : TotalExtraCharges
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TotalFareCurrencyAmountGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TotalFareCurrencyAmountGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Endorsement
  {
    [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
    public string Info { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Endorsement FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Endorsement>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class OriginDestination : OriginDestinationGroup
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static OriginDestination FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginDestination>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class OriginDestinationGroup
  {
    [Newtonsoft.Json.JsonProperty("originCityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string OriginCityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("destinationCityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
    public string DestinationCityCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static OriginDestinationGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginDestinationGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class QuantityGroup
  {
    [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
    public int? Quantity { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static QuantityGroup FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<QuantityGroup>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfItineraryModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ItineraryModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfItineraryModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfItineraryModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class MigratedPnrModel
  {
    [Newtonsoft.Json.JsonProperty("reS3_PNR_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ReS3_PNR_NO { get; set; }

    [Newtonsoft.Json.JsonProperty("reS3_CREATE_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ReS3_CREATE_DATE { get; set; }

    [Newtonsoft.Json.JsonProperty("alteA_PNR_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AlteA_PNR_NO { get; set; }

    [Newtonsoft.Json.JsonProperty("alteA_CREATE_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? AlteA_CREATE_DATE { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MigratedPnrModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<MigratedPnrModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfFlightOpsItineraryModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsItineraryModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfFlightOpsItineraryModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfFlightOpsItineraryModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightOpsItineraryModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("pnrNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PnrNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("pnrCreationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? PnrCreationDate { get; set; }

    [Newtonsoft.Json.JsonProperty("passengers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsPassengerModel> Passengers { get; set; }

    [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsFlownLegModel> Legs { get; set; }

    [Newtonsoft.Json.JsonProperty("cancelledLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsCancelledLegModel> CancelledLegs { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightOpsItineraryModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOpsItineraryModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class PagedSearchResultOfOriginDestinationRootModel : SearchResultOfOriginDestinationRootModel
  {
    [Newtonsoft.Json.JsonProperty("top", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Top { get; set; }

    [Newtonsoft.Json.JsonProperty("skip", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Skip { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static PagedSearchResultOfOriginDestinationRootModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<PagedSearchResultOfOriginDestinationRootModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfOriginDestinationRootModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<OriginDestinationRootModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfOriginDestinationRootModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfOriginDestinationRootModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class OriginDestinationRootModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("controlDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ControlDate { get; set; }

    [Newtonsoft.Json.JsonProperty("snapshotAdvanceDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? SnapshotAdvanceDays { get; set; }

    [Newtonsoft.Json.JsonProperty("originDestinationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OriginDestinationType? OriginDestinationCode { get; set; }

    [Newtonsoft.Json.JsonProperty("pnrNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PnrNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("pnrCreationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? PnrCreationDate { get; set; }

    [Newtonsoft.Json.JsonProperty("passengers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PassengerModel> Passengers { get; set; }

    [Newtonsoft.Json.JsonProperty("segments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SegmentModel> Segments { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static OriginDestinationRootModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginDestinationRootModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class IncidentResponseModel : IncidentRequestModel
  {
    [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Error { get; set; }

    [Newtonsoft.Json.JsonProperty("createdDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? CreatedDateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("updatedDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? UpdatedDateTime { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static IncidentResponseModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<IncidentResponseModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class IncidentRequestModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("dateFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? DateFrom { get; set; }

    [Newtonsoft.Json.JsonProperty("dateTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? DateTo { get; set; }

    [Newtonsoft.Json.JsonProperty("regime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Regime { get; set; }

    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? FlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("disruptionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisruptionCode { get; set; }

    [Newtonsoft.Json.JsonProperty("overrideOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OverrideOption { get; set; }

    [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CreatedBy { get; set; }

    [Newtonsoft.Json.JsonProperty("updatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UpdatedBy { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Status { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static IncidentRequestModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<IncidentRequestModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfIncidentResponseModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<IncidentResponseModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfIncidentResponseModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfIncidentResponseModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ApplicationInfoModel
  {
    /// <summary>The system name</summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Name { get; set; }

    /// <summary>The system version</summary>
    [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Version { get; set; }

    /// <summary>The name of the environment</summary>
    [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Environment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ApplicationInfoModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationInfoModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ExpenseResponseModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("delayTimeCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DelayTimeCategory { get; set; }

    [Newtonsoft.Json.JsonProperty("delayTimeMinValueInMins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DelayTimeMinValueInMins { get; set; }

    [Newtonsoft.Json.JsonProperty("delayTimeMaxValueInMins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DelayTimeMaxValueInMins { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ExpenseTypeId { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExpenseTypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("regionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? RegionId { get; set; }

    [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Region { get; set; }

    [Newtonsoft.Json.JsonProperty("thresholdValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ThresholdValue { get; set; }

    [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? EffectiveDate { get; set; }

    [Newtonsoft.Json.JsonProperty("updatedDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? UpdatedDateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("updatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UpdatedBy { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("airportCodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? AirportCodeId { get; set; }

    [Newtonsoft.Json.JsonProperty("airportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AirportCode { get; set; }

    [Newtonsoft.Json.JsonProperty("linkId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? LinkId { get; set; }

    [Newtonsoft.Json.JsonProperty("currentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CurrentStatus { get; set; }

    [Newtonsoft.Json.JsonProperty("endEffectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? EndEffectiveDate { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ExpenseResponseModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseResponseModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfExpenseResponseModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ExpenseResponseModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfExpenseResponseModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfExpenseResponseModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ClaimAssessmentModel
  {
    [Newtonsoft.Json.JsonProperty("applicationClientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ApplicationClientId { get; set; }

    [Newtonsoft.Json.JsonProperty("apiVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ApiVersion { get; set; }

    [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? ReportDate { get; set; }

    [Newtonsoft.Json.JsonProperty("pnr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Pnr { get; set; }

    [Newtonsoft.Json.JsonProperty("originDestinationCorrelationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? OriginDestinationCorrelationId { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("airline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Airline { get; set; }

    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? FlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("departureAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DepartureAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? DepartureDate { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ArrivalAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastName { get; set; }

    [Newtonsoft.Json.JsonProperty("claimDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? ClaimDate { get; set; }

    [Newtonsoft.Json.JsonProperty("matchAndClaimEligibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? MatchAndClaimEligibility { get; set; }

    [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ErrorMessage { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsCaseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicsCaseId { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsCaseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DynamicsCaseNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("hasDepartureAirportInEURegulation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? HasDepartureAirportInEURegulation { get; set; }

    [Newtonsoft.Json.JsonProperty("snapshotAdvanceDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? SnapshotAdvanceDays { get; set; }

    [Newtonsoft.Json.JsonProperty("totalDelayInMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalDelayInMinutes { get; set; }

    [Newtonsoft.Json.JsonProperty("compensationRuleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? CompensationRuleId { get; set; }

    [Newtonsoft.Json.JsonProperty("cashCompensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? CashCompensation { get; set; }

    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("cashCompensationInCurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? CashCompensationInCurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsWebRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicsWebRequestId { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseClaimedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? ExpenseClaimedAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseReimbursedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? ExpenseReimbursedAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseRejectedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? ExpenseRejectedAmount { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ClaimAssessmentModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ClaimAssessmentModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfClaimAssessmentsSummaryModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ClaimAssessmentsSummaryModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfClaimAssessmentsSummaryModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfClaimAssessmentsSummaryModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ClaimAssessmentsSummaryModel
  {
    [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ClaimAssessmentClientIdType? ClientId { get; set; }

    [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ClaimAssessmentsSummaryCategory? Category { get; set; }

    [Newtonsoft.Json.JsonProperty("subcategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ClaimAssessmentsSummarySubcategory? Subcategory { get; set; }

    [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? ReportDate { get; set; }

    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Count { get; set; }

    [Newtonsoft.Json.JsonProperty("cashCompensation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? CashCompensation { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ClaimAssessmentsSummaryModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ClaimAssessmentsSummaryModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum ClaimAssessmentClientIdType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Dynamics")]
    Dynamics = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"FDAT")]
    FDAT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"SSET")]
    SSET = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"All")]
    All = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum ClaimAssessmentsSummaryCategory
  {
    Match = 0,

    Pending = 1,

    OutOfScope = 2,

    MissingInformation = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum ClaimAssessmentsSummarySubcategory
  {
    EligibleControllable = 0,

    NotEligibleMinimumDelayNotReached = 1,

    NotEligibleNoDelayAtArrivalWithDelayOnFlights = 2,

    NotEligibleNoDelayAtArrivalNoDelayOnFlights = 3,

    NotEligibleFlightDateBeforeRegulationEnforcement = 4,

    NotEligibleSafety = 5,

    NotEligibleUncontrollable = 6,

    NotEligibleFlightDateTooOld = 7,

    NotEligibleFutureFlightOutsideProtectionPeriod = 8,

    FlightTooRecentBefore3Days = 9,

    FlightTooRecentBefore5Days = 10,

    FlightTooRecentBefore5DaysOrNoDelayReasonUpTo14Days = 11,

    FutureFlightInsideProtectionPeriod = 12,

    NotProcessedRoutesHaveOtherCarrierFlights = 13,

    NotProcessedRoutesHaveOtherCarrierFlightsAndPossibleCancellation = 14,

    NotDeterminableRegulationIsNotAutomated = 15,

    NotDeterminableFlightDateTooOldEU = 16,

    NoReasonCodeAfter3Days = 17,

    NoReasonCodeAfter5Days = 18,

    NoReasonCodeAfter14Days = 19,

    NotProcessedRoutesDoNotMatch = 20,

    NotProcessedRoutesDoNotMatchPossibleCancellation = 21,

    NotProcessedDuplicateClaim = 22,

    SnapshotFoundPaxFoundActualFlightFoundPaxNotFound = 23,

    SnapshotFoundPaxFoundActualFlightNotFound = 24,

    SnapshotFoundPaxNotFoundActualFlightFoundPaxFound = 25,

    SnapshotFoundPaxNotFoundActualFlightFoundPaxNotFound = 26,

    SnapshotFoundPaxNotFoundActualFlightNotFound = 27,

    SnapshotNotFoundActualFlightFoundPaxFound = 28,

    SnapshotNotFoundActualFlightFoundPaxNotFound = 29,

    SnapshotNotFoundActualFlightNotFound = 30,

    OverrideReasonPending = 31,

    OverrideEligiblewGoodwill = 32,

    OverrideNotEligibleNoPayout = 33,

    OverrideNotEligiblewGoodwill = 31002,

    OverrideNotEligibleRequiredforSafetywGoodwill = 31003,

    ExpenseDuplicateClaimFound = 40001,

    ExpenseEligibleEqualorBelowThreshold = 50000,

    ExpenseNotEligible = 50001,

    ExpenseNoDetermination = 50002,

    ExpensePartialEligibleAboveThreshold = 50003,

    ReceiptReaderRejected = 51000,

    ExpenseCaseAlreadyExists = 60000,

    FlightDisruptionCaseAlreadyExists = 60001,

    FlightDisruptionAndExpenseCaseAlreadyExists = 60002,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ClaimAssessmentsCountModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("matchCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? MatchCount { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ClaimAssessmentsCountModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ClaimAssessmentsCountModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CompensationRegulationSearchResponse
  {
    [Newtonsoft.Json.JsonProperty("regulations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CompensationRegulationModel> Regulations { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CompensationRegulationSearchResponse FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CompensationRegulationSearchResponse>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CompensationRegulationModel : CompensationRegulationSubmissionModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("endEffectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? EndEffectiveDate { get; set; }

    [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? LastModifiedDate { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CompensationRegulationModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CompensationRegulationModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CompensationRegulationSubmissionModel
  {
    [Newtonsoft.Json.JsonProperty("jurisdiction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CompensationJurisdictionType? Jurisdiction { get; set; }

    [Newtonsoft.Json.JsonProperty("countryCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> CountryCodes { get; set; }

    [Newtonsoft.Json.JsonProperty("startEffectiveDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? StartEffectiveDate { get; set; }

    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string CurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CompensationRuleModel> Rules { get; set; }

    [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, string> Descriptions { get; set; }

    [Newtonsoft.Json.JsonProperty("snapshotAdvanceDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? SnapshotAdvanceDays { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CompensationRegulationSubmissionModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CompensationRegulationSubmissionModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum CompensationJurisdictionType
  {
    Appr = 0,

    Usa = 1,

    Eu = 2,

    UnitedKingdom = 3,

    Guadeloupe = 4,

    Israel = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CompensationRuleModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("delayMinutesStartingFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DelayMinutesStartingFrom { get; set; }

    [Newtonsoft.Json.JsonProperty("delayMinutesLowerThan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DelayMinutesLowerThan { get; set; }

    [Newtonsoft.Json.JsonProperty("cashCompensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? CashCompensation { get; set; }

    [Newtonsoft.Json.JsonProperty("cashCompensationCoefficient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? CashCompensationCoefficient { get; set; }

    [Newtonsoft.Json.JsonProperty("maxCashCompensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? MaxCashCompensation { get; set; }

    [Newtonsoft.Json.JsonProperty("emcoCompensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? EmcoCompensation { get; set; }

    [Newtonsoft.Json.JsonProperty("emcoCompensationCoefficient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? EmcoCompensationCoefficient { get; set; }

    [Newtonsoft.Json.JsonProperty("maxEmcoCompensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? MaxEmcoCompensation { get; set; }

    [Newtonsoft.Json.JsonProperty("cashCompensationInCurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? CashCompensationInCurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("positon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Positon { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CompensationRuleModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CompensationRuleModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightDisruptionResult
  {
    [Newtonsoft.Json.JsonProperty("snapshotItinerary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ItineraryModel SnapshotItinerary { get; set; }

    [Newtonsoft.Json.JsonProperty("actualItinerary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FlightOpsItineraryModel ActualItinerary { get; set; }

    [Newtonsoft.Json.JsonProperty("flightDisruptionCompensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightDisruptionCompensation> FlightDisruptionCompensation { get; set; }

    [Newtonsoft.Json.JsonProperty("flightDisruptionExpenseCompensationAssessment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightDisruptionExpenseCompensationAssessment> FlightDisruptionExpenseCompensationAssessment { get; set; }

    [Newtonsoft.Json.JsonProperty("snapshotFlightDisruptionItineraryAnalysisResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FlightDisruptionItineraryAnalysisResult SnapshotFlightDisruptionItineraryAnalysisResult { get; set; }

    [Newtonsoft.Json.JsonProperty("actualFlightDisruptionItineraryAnalysisResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FlightDisruptionItineraryAnalysisResult ActualFlightDisruptionItineraryAnalysisResult { get; set; }

    [Newtonsoft.Json.JsonProperty("matchAndClaimEligibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FlightDisruptionMatchAndEligibilityStatus? MatchAndClaimEligibility { get; set; }

    [Newtonsoft.Json.JsonProperty("eligibilityEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? EligibilityEndDate { get; set; }

    [Newtonsoft.Json.JsonProperty("matchAndClaimEligibilityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? MatchAndClaimEligibilityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("snapshotAndActualTotalMatch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SnapshotAndActualTotalMatch { get; set; }

    [Newtonsoft.Json.JsonProperty("totalDelayInMinutes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalDelayInMinutes { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsWebRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicsWebRequestId { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsCaseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicsCaseId { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsCaseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DynamicsCaseNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("assessmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? AssessmentId { get; set; }

    [Newtonsoft.Json.JsonProperty("hasDepartureAirportInEURegulation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? HasDepartureAirportInEURegulation { get; set; }

    [Newtonsoft.Json.JsonProperty("originalDynamicCaseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? OriginalDynamicCaseId { get; set; }

    [Newtonsoft.Json.JsonProperty("originalDynamicCaseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OriginalDynamicCaseNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("reprotectedFlights", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? ReprotectedFlights { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseEligibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ExpenseEligibility? ExpenseEligibility { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseEligibilityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ExpenseEligibilityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("totalExpenseClaimedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? TotalExpenseClaimedAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("totalExpenseReimbursedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? TotalExpenseReimbursedAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("totalExpenseRejectedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? TotalExpenseRejectedAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseDynamicsCaseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? ExpenseDynamicsCaseId { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseDynamicsCaseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExpenseDynamicsCaseNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("isExpenseExist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsExpenseExist { get; set; }

    [Newtonsoft.Json.JsonProperty("isSpecialCustomerExpenseEligible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsSpecialCustomerExpenseEligible { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightDisruptionResult FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightDisruptionResult>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightDisruptionCompensation
  {
    [Newtonsoft.Json.JsonProperty("compensationRegulation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CompensationRegulationModel CompensationRegulation { get; set; }

    [Newtonsoft.Json.JsonProperty("applicableCompensationRuleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ApplicableCompensationRuleId { get; set; }

    [Newtonsoft.Json.JsonProperty("claimEligibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FlightDisruptionClaimEligibility? ClaimEligibility { get; set; }

    [Newtonsoft.Json.JsonProperty("uncontrollableCompensationRuleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UncontrollableCompensationRuleId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightDisruptionCompensation FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightDisruptionCompensation>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum FlightDisruptionClaimEligibility
  {
    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedDataMismatch")]
    NotProcessedDataMismatch = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedRoutesDoNotMatch")]
    NotProcessedRoutesDoNotMatch = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ToBeProcessedRoutesMatch")]
    ToBeProcessedRoutesMatch = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedRoutesDoNotMatchPossibleCancellation")]
    NotProcessedRoutesDoNotMatchPossibleCancellation = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedRoutesHaveOtherCarrierFlights")]
    NotProcessedRoutesHaveOtherCarrierFlights = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedRoutesHaveOtherCarrierFlightsAndPossibleCancellation")]
    NotProcessedRoutesHaveOtherCarrierFlightsAndPossibleCancellation = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"NotDeterminableACDelayFoundRoutesHaveOtherCarrierFlights")]
    NotDeterminableACDelayFoundRoutesHaveOtherCarrierFlights = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"NotDeterminableACDelayNotFoundRoutesHaveOtherCarrierFlights")]
    NotDeterminableACDelayNotFoundRoutesHaveOtherCarrierFlights = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"NotEligibleNoDelayAtArrivalNoDelayOnFlights")]
    NotEligibleNoDelayAtArrivalNoDelayOnFlights = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"NotEligibleNoDelayAtArrivalWithDelayOnFlights")]
    NotEligibleNoDelayAtArrivalWithDelayOnFlights = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"NotDeterminableReasonNotYetKnown")]
    NotDeterminableReasonNotYetKnown = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"NotDeterminableReasonPending")]
    NotDeterminableReasonPending = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"NotDeterminableRegulationIsNotAutomated")]
    NotDeterminableRegulationIsNotAutomated = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"FutureFlightOutsideProtectionPeriod")]
    FutureFlightOutsideProtectionPeriod = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"FutureFlightInsideProtectionPeriod")]
    FutureFlightInsideProtectionPeriod = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"NotEligibleMinimumDelayNotReached")]
    NotEligibleMinimumDelayNotReached = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"NotEligibleFlightDateTooOld")]
    NotEligibleFlightDateTooOld = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"NotDeterminableFlightDateTooOldEU")]
    NotDeterminableFlightDateTooOldEU = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"NotEligibleSafety")]
    NotEligibleSafety = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"NotEligibleUncontrollable")]
    NotEligibleUncontrollable = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"NotEligibleFlightDateBeforeRegulationEnforcement")]
    NotEligibleFlightDateBeforeRegulationEnforcement = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"EligibleControllable")]
    EligibleControllable = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedDuplicateClaim")]
    NotProcessedDuplicateClaim = 22,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightDisruptionExpenseCompensationAssessment
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExpenseTypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExpenseTypeDescription { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseCurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExpenseCurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseCompensationRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ExpenseCompensationRuleModel ExpenseCompensationRule { get; set; }

    [Newtonsoft.Json.JsonProperty("claimedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? ClaimedAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("reimbursedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? ReimbursedAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("rejectedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? RejectedAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("thresholdAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? ThresholdAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("responseDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ResponseDescription { get; set; }

    [Newtonsoft.Json.JsonProperty("claimEligibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ClaimAssessmentsSummarySubcategory? ClaimEligibility { get; set; }

    [Newtonsoft.Json.JsonProperty("flightDisruptionExpenseLineCompensationAssessment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightDisruptionExpenseLineCompensationAssessment> FlightDisruptionExpenseLineCompensationAssessment { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightDisruptionExpenseCompensationAssessment FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightDisruptionExpenseCompensationAssessment>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ExpenseCompensationRuleModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ExpenseTypeId { get; set; }

    [Newtonsoft.Json.JsonProperty("regionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? RegionId { get; set; }

    [Newtonsoft.Json.JsonProperty("delayTimeCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DelayTimeCategory { get; set; }

    [Newtonsoft.Json.JsonProperty("airportCodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? AirportCodeId { get; set; }

    [Newtonsoft.Json.JsonProperty("thresholdValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ThresholdValue { get; set; }

    [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? EffectiveDate { get; set; }

    [Newtonsoft.Json.JsonProperty("updatedDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? UpdatedDateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("updatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UpdatedBy { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ExpenseCompensationRuleModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseCompensationRuleModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightDisruptionExpenseLineCompensationAssessment
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExpenseTypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExpenseTypeDescription { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseCurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExpenseCurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("ssetOperationExpenseId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? SsetOperationExpenseId { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicExpenseWebRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicExpenseWebRequestId { get; set; }

    [Newtonsoft.Json.JsonProperty("claimedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? ClaimedAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("reimbursedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? ReimbursedAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("rejectedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? RejectedAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("thresholdAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? ThresholdAmount { get; set; }

    [Newtonsoft.Json.JsonProperty("claimStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ClaimStatus { get; set; }

    [Newtonsoft.Json.JsonProperty("claimEligibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ClaimAssessmentsSummarySubcategory? ClaimEligibility { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightDisruptionExpenseLineCompensationAssessment FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightDisruptionExpenseLineCompensationAssessment>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class FlightDisruptionItineraryAnalysisResult
  {
    [Newtonsoft.Json.JsonProperty("itineraryMatchType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FlightDisruptionItineraryMatchType? ItineraryMatchType { get; set; }

    [Newtonsoft.Json.JsonProperty("itineraryMatchStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FlightDisruptionItineraryMatchStatus? ItineraryMatchStatus { get; set; }

    [Newtonsoft.Json.JsonProperty("passengerMatchStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FlightDisruptionPassengerMatchStatus? PassengerMatchStatus { get; set; }

    [Newtonsoft.Json.JsonProperty("flightMatchStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FlightDisruptionFlightMatchStatus? FlightMatchStatus { get; set; }

    [Newtonsoft.Json.JsonProperty("totalMatch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? TotalMatch { get; set; }

    [Newtonsoft.Json.JsonProperty("flightId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FlightId { get; set; }

    [Newtonsoft.Json.JsonProperty("passengerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PassengerId { get; set; }

    [Newtonsoft.Json.JsonProperty("originDestinationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OriginDestinationId { get; set; }

    [Newtonsoft.Json.JsonProperty("actualLegsMatchedToSnapshotOD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsFlownLegModel> ActualLegsMatchedToSnapshotOD { get; set; }

    [Newtonsoft.Json.JsonProperty("actualNotBoardedLegsMatchedToSnapshotOD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsFlownLegModel> ActualNotBoardedLegsMatchedToSnapshotOD { get; set; }

    [Newtonsoft.Json.JsonProperty("cancelledLegsMatchedToSnapshotOD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsCancelledLegModel> CancelledLegsMatchedToSnapshotOD { get; set; }

    [Newtonsoft.Json.JsonProperty("snapshotSegmentsMatchToOD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SegmentModel> SnapshotSegmentsMatchToOD { get; set; }

    [Newtonsoft.Json.JsonProperty("mostSignificantLegId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MostSignificantLegId { get; set; }

    [Newtonsoft.Json.JsonProperty("mostSignificantLegSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FlightDisruptionMostSignificantLegSource? MostSignificantLegSource { get; set; }

    [Newtonsoft.Json.JsonProperty("mostSignificantLegBasedOnMissedConnection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? MostSignificantLegBasedOnMissedConnection { get; set; }

    [Newtonsoft.Json.JsonProperty("handleReprotectedLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<FlightOpsFlownLegModel> HandleReprotectedLegs { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FlightDisruptionItineraryAnalysisResult FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightDisruptionItineraryAnalysisResult>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum FlightDisruptionItineraryMatchType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"PNRMatch")]
    PNRMatch = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"TicketMatch")]
    TicketMatch = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum FlightDisruptionItineraryMatchStatus
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Match")]
    Match = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"NoMatch")]
    NoMatch = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum FlightDisruptionPassengerMatchStatus
  {
    [System.Runtime.Serialization.EnumMember(Value = @"NoMatch")]
    NoMatch = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Match")]
    Match = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ReversedNameMatch")]
    ReversedNameMatch = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"SubstringNameMatch")]
    SubstringNameMatch = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"DocumentNameMatch")]
    DocumentNameMatch = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"FirstAndLastNameInLastNameMatch")]
    FirstAndLastNameInLastNameMatch = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum FlightDisruptionFlightMatchStatus
  {
    [System.Runtime.Serialization.EnumMember(Value = @"FlightNotFound")]
    FlightNotFound = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightFound")]
    FlightFound = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightFoundArrivalAirport")]
    FlightFoundArrivalAirport = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightFoundFutureFlight")]
    FlightFoundFutureFlight = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightFoundODAirport")]
    FlightFoundODAirport = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum FlightDisruptionMostSignificantLegSource
  {
    [System.Runtime.Serialization.EnumMember(Value = @"NotDetermined")]
    NotDetermined = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"FlownFlights")]
    FlownFlights = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CancelledFlights")]
    CancelledFlights = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum FlightDisruptionMatchAndEligibilityStatus
  {
    [System.Runtime.Serialization.EnumMember(Value = @"InProcess")]
    InProcess = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundEligibleControllable")]
    FlightAndPaxFoundEligibleControllable = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundEligibleControllablePossibleCancellation")]
    FlightAndPaxFoundEligibleControllablePossibleCancellation = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotEligibleMinimumDelayNotReached")]
    FlightAndPaxFoundNotEligibleMinimumDelayNotReached = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotEligibleFlightDateTooOld")]
    FlightAndPaxFoundNotEligibleFlightDateTooOld = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotEligibleSafety")]
    FlightAndPaxFoundNotEligibleSafety = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotEligibleUncontrollable")]
    FlightAndPaxFoundNotEligibleUncontrollable = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotEligibleNoDelayAtArrivalWithDelayOnFlights")]
    FlightAndPaxFoundNotEligibleNoDelayAtArrivalWithDelayOnFlights = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotEligibleNoDelayAtArrivalNoDelayOnFlights")]
    FlightAndPaxFoundNotEligibleNoDelayAtArrivalNoDelayOnFlights = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"NotEligibleFlightDateBeforeRegulationEnforcement")]
    NotEligibleFlightDateBeforeRegulationEnforcement = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotEligibleMinimumDelayNotReachedFlightNumberFallback")]
    FlightAndPaxFoundNotEligibleMinimumDelayNotReachedFlightNumberFallback = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotEligibleFlightDateTooOldFlightNumberFallback")]
    FlightAndPaxFoundNotEligibleFlightDateTooOldFlightNumberFallback = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotEligibleSafetyFlightNumberFallback")]
    FlightAndPaxFoundNotEligibleSafetyFlightNumberFallback = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotEligibleUncontrollableFlightNumberFallback")]
    FlightAndPaxFoundNotEligibleUncontrollableFlightNumberFallback = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotEligibleNoDelayAtArrivalWithDelayOnFlightsFlightNumberFallback")]
    FlightAndPaxFoundNotEligibleNoDelayAtArrivalWithDelayOnFlightsFlightNumberFallback = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotEligibleNoDelayAtArrivalNoDelayOnFlightsFlightNumberFallback")]
    FlightAndPaxFoundNotEligibleNoDelayAtArrivalNoDelayOnFlightsFlightNumberFallback = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"NotEligibleFlightDateBeforeRegulationEnforcementFlightNumberFallback")]
    NotEligibleFlightDateBeforeRegulationEnforcementFlightNumberFallback = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotDeterminableFlightDateTooOldEUFlightNumberFallback")]
    FlightAndPaxFoundNotDeterminableFlightDateTooOldEUFlightNumberFallback = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotDeterminableReasonNotYetKnown")]
    FlightAndPaxFoundNotDeterminableReasonNotYetKnown = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotDeterminableReasonPending")]
    FlightAndPaxFoundNotDeterminableReasonPending = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundEligibleControllableFlightNumberFallback")]
    FlightAndPaxFoundEligibleControllableFlightNumberFallback = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotDeterminableACDelayFoundRoutesHaveOtherCarrierFlights")]
    FlightAndPaxFoundNotDeterminableACDelayFoundRoutesHaveOtherCarrierFlights = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotDeterminableACDelayNotFoundRoutesHaveOtherCarrierFlights")]
    FlightAndPaxFoundNotDeterminableACDelayNotFoundRoutesHaveOtherCarrierFlights = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"IncidentsHandlingOverrideReasonPending")]
    IncidentsHandlingOverrideReasonPending = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"IncidentsHandlingOverrideEligiblewGoodwill")]
    IncidentsHandlingOverrideEligiblewGoodwill = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"IncidentsHandlingOverrideNotEligibleNoPayout")]
    IncidentsHandlingOverrideNotEligibleNoPayout = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"IncidentsHandlingOverrideNotEligiblewGoodwill")]
    IncidentsHandlingOverrideNotEligiblewGoodwill = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"IncidentsHandlingOverrideNotEligibleRequiredforSafetywGoodwill")]
    IncidentsHandlingOverrideNotEligibleRequiredforSafetywGoodwill = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundDuplicateClaimFound")]
    FlightAndPaxFoundDuplicateClaimFound = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"ExpenseDuplicateClaimFound")]
    ExpenseDuplicateClaimFound = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"ExpenseEligibleEqualorBelowThreshold")]
    ExpenseEligibleEqualorBelowThreshold = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"ExpenseNotEligible")]
    ExpenseNotEligible = 31,

    [System.Runtime.Serialization.EnumMember(Value = @"ExpenseNoDetermination")]
    ExpenseNoDetermination = 32,

    [System.Runtime.Serialization.EnumMember(Value = @"ExpensePartialEligibleAboveThreshold")]
    ExpensePartialEligibleAboveThreshold = 33,

    [System.Runtime.Serialization.EnumMember(Value = @"ReceiptReaderRejected")]
    ReceiptReaderRejected = 34,

    [System.Runtime.Serialization.EnumMember(Value = @"ExpenseCaseAlreadyExists")]
    ExpenseCaseAlreadyExists = 35,

    [System.Runtime.Serialization.EnumMember(Value = @"DisruptionCaseAlreadyExists")]
    DisruptionCaseAlreadyExists = 36,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightDisruptionAndExpenseCaseAlreadyExists")]
    FlightDisruptionAndExpenseCaseAlreadyExists = 37,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundNotDeterminableRegulationIsNotAutomated")]
    FlightAndPaxFoundNotDeterminableRegulationIsNotAutomated = 38,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundFutureFlightOutsideProtectionPeriod")]
    FlightAndPaxFoundFutureFlightOutsideProtectionPeriod = 39,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundFutureFlightInsideProtectionPeriod")]
    FlightAndPaxFoundFutureFlightInsideProtectionPeriod = 40,

    [System.Runtime.Serialization.EnumMember(Value = @"FlightAndPaxFoundFlightDateTooOldEU")]
    FlightAndPaxFoundFlightDateTooOldEU = 41,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedRoutesDoNotMatch")]
    NotProcessedRoutesDoNotMatch = 42,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedRoutesDoNotMatchPossibleCancellation")]
    NotProcessedRoutesDoNotMatchPossibleCancellation = 43,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedRoutesHaveOtherCarrierFlights")]
    NotProcessedRoutesHaveOtherCarrierFlights = 44,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedRoutesHaveOtherCarrierFlightsAndPossibleCancellation")]
    NotProcessedRoutesHaveOtherCarrierFlightsAndPossibleCancellation = 45,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightNotFoundSnapPaxNotFoundActualFlightNotFoundActualPaxNotFound")]
    NotProcessedSnapFlightNotFoundSnapPaxNotFoundActualFlightNotFoundActualPaxNotFound = 46,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightNotFoundSnapPaxNotFoundActualFlightNotFoundActualPaxFound")]
    NotProcessedSnapFlightNotFoundSnapPaxNotFoundActualFlightNotFoundActualPaxFound = 47,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightNotFoundSnapPaxNotFoundActualFlightFoundActualPaxNotFound")]
    NotProcessedSnapFlightNotFoundSnapPaxNotFoundActualFlightFoundActualPaxNotFound = 48,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightNotFoundSnapPaxNotFoundActualFlightFoundActualPaxFound")]
    NotProcessedSnapFlightNotFoundSnapPaxNotFoundActualFlightFoundActualPaxFound = 49,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightNotFoundSnapPaxFoundActualFlightNotFoundActualPaxNotFound")]
    NotProcessedSnapFlightNotFoundSnapPaxFoundActualFlightNotFoundActualPaxNotFound = 50,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightNotFoundSnapPaxFoundActualFlightNotFoundActualPaxFound")]
    NotProcessedSnapFlightNotFoundSnapPaxFoundActualFlightNotFoundActualPaxFound = 51,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightNotFoundSnapPaxFoundActualFlightFoundActualPaxNotFound")]
    NotProcessedSnapFlightNotFoundSnapPaxFoundActualFlightFoundActualPaxNotFound = 52,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightNotFoundSnapPaxFoundActualFlightFoundActualPaxFound")]
    NotProcessedSnapFlightNotFoundSnapPaxFoundActualFlightFoundActualPaxFound = 53,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightFoundSnapPaxNotFoundActualFlightNotFoundActualPaxNotFound")]
    NotProcessedSnapFlightFoundSnapPaxNotFoundActualFlightNotFoundActualPaxNotFound = 54,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightFoundSnapPaxNotFoundActualFlightNotFoundActualPaxFound")]
    NotProcessedSnapFlightFoundSnapPaxNotFoundActualFlightNotFoundActualPaxFound = 55,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightFoundSnapPaxNotFoundActualFlightFoundActualPaxNotFound")]
    NotProcessedSnapFlightFoundSnapPaxNotFoundActualFlightFoundActualPaxNotFound = 56,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightFoundSnapPaxNotFoundActualFlightFoundActualPaxFound")]
    NotProcessedSnapFlightFoundSnapPaxNotFoundActualFlightFoundActualPaxFound = 57,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightFoundSnapPaxFoundActualFlightNotFoundActualPaxNotFound")]
    NotProcessedSnapFlightFoundSnapPaxFoundActualFlightNotFoundActualPaxNotFound = 58,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightFoundSnapPaxFoundActualFlightNotFoundActualPaxFound")]
    NotProcessedSnapFlightFoundSnapPaxFoundActualFlightNotFoundActualPaxFound = 59,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedSnapFlightFoundSnapPaxFoundActualFlightFoundActualPaxNotFound")]
    NotProcessedSnapFlightFoundSnapPaxFoundActualFlightFoundActualPaxNotFound = 60,

    [System.Runtime.Serialization.EnumMember(Value = @"NotProcessedDataMismatch")]
    NotProcessedDataMismatch = 61,

    [System.Runtime.Serialization.EnumMember(Value = @"Error")]
    Error = 62,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum ExpenseEligibility
  {
    [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
    Pending = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"NoDetermination")]
    NoDetermination = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Eligible")]
    Eligible = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NotEligible")]
    NotEligible = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfExposureGroupModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ExposureGroupModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfExposureGroupModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfExposureGroupModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ExposureGroupModel
  {
    [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? DepartureDate { get; set; }

    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? FlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("cabinClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CabinClass { get; set; }

    [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CarrierCode { get; set; }

    [Newtonsoft.Json.JsonProperty("departureAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DepartureAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ArrivalAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("departureDateTimeOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? DepartureDateTimeOffset { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalDateTimeOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ArrivalDateTimeOffset { get; set; }

    [Newtonsoft.Json.JsonProperty("actualDepartureDateTimeOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ActualDepartureDateTimeOffset { get; set; }

    [Newtonsoft.Json.JsonProperty("actualArrivalDateTimeOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? ActualArrivalDateTimeOffset { get; set; }

    [Newtonsoft.Json.JsonProperty("delaySubCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DelaySubCode { get; set; }

    [Newtonsoft.Json.JsonProperty("departureDelayIataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DepartureDelayIataCode { get; set; }

    [Newtonsoft.Json.JsonProperty("delayIataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DelayIataCode { get; set; }

    [Newtonsoft.Json.JsonProperty("secondaryCancellationReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SecondaryCancellationReasonCode { get; set; }

    [Newtonsoft.Json.JsonProperty("aircraftType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AircraftType { get; set; }

    [Newtonsoft.Json.JsonProperty("delayRemarks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DelayRemarks { get; set; }

    [Newtonsoft.Json.JsonProperty("operationRemarks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationRemarks { get; set; }

    [Newtonsoft.Json.JsonProperty("passengerFlightCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? PassengerFlightCount { get; set; }

    [Newtonsoft.Json.JsonProperty("eligiblePassengerCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? EligiblePassengerCount { get; set; }

    [Newtonsoft.Json.JsonProperty("eligibleCompensation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? EligibleCompensation { get; set; }

    [Newtonsoft.Json.JsonProperty("claimedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ClaimedCount { get; set; }

    [Newtonsoft.Json.JsonProperty("claimedCompensation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? ClaimedCompensation { get; set; }

    [Newtonsoft.Json.JsonProperty("uncontrollableCashCompensation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? UncontrollableCashCompensation { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ExposureGroupModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ExposureGroupModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum ExposureGroupingType
  {
    DepartureDate = 0,

    Flight = 1,

    CabinClass = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum ExposureRegimeType
  {
    APPR = 0,

    EU = 1,

    ISRAEL = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ExposureQuery
  {
    [Newtonsoft.Json.JsonProperty("departureDateStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DepartureDateStart { get; set; }

    [Newtonsoft.Json.JsonProperty("departureDateEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DepartureDateEnd { get; set; }

    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<int> FlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("departureAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> DepartureAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> ArrivalAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("departureIataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<int> DepartureIataCode { get; set; }

    [Newtonsoft.Json.JsonProperty("subCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<int> SubCode { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalIataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<int> ArrivalIataCode { get; set; }

    [Newtonsoft.Json.JsonProperty("cancellationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> CancellationCode { get; set; }

    [Newtonsoft.Json.JsonProperty("aircraftType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> AircraftType { get; set; }

    [Newtonsoft.Json.JsonProperty("mslOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? MslOnly { get; set; }

    [Newtonsoft.Json.JsonProperty("isOrigin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsOrigin { get; set; }

    [Newtonsoft.Json.JsonProperty("groupBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ExposureGroupingType> GroupBy { get; set; }

    [Newtonsoft.Json.JsonProperty("regime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ExposureRegimeType> Regime { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ExposureQuery FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ExposureQuery>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfExposurePassengerModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ExposurePassengerModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfExposurePassengerModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfExposurePassengerModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ExposurePassengerModel
  {
    [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? DepartureDate { get; set; }

    [Newtonsoft.Json.JsonProperty("odDepartureDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? OdDepartureDate { get; set; }

    [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CarrierCode { get; set; }

    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? FlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastName { get; set; }

    [Newtonsoft.Json.JsonProperty("pnrNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PnrNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("pnrCreationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? PnrCreationDate { get; set; }

    [Newtonsoft.Json.JsonProperty("applicableCompensationRuleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? ApplicableCompensationRuleId { get; set; }

    [Newtonsoft.Json.JsonProperty("delayMinutesStartingFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DelayMinutesStartingFrom { get; set; }

    [Newtonsoft.Json.JsonProperty("delayMinutesLowerThan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DelayMinutesLowerThan { get; set; }

    [Newtonsoft.Json.JsonProperty("cashCompensation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? CashCompensation { get; set; }

    [Newtonsoft.Json.JsonProperty("isClaimed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsClaimed { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ExposurePassengerModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ExposurePassengerModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SsetOperationModel
  {
    [Newtonsoft.Json.JsonProperty("sessionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SessionId { get; set; }

    [Newtonsoft.Json.JsonProperty("operationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SsetOperationType? OperationType { get; set; }

    [Newtonsoft.Json.JsonProperty("pnr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Pnr { get; set; }

    [Newtonsoft.Json.JsonProperty("originDestinationCorrelationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? OriginDestinationCorrelationId { get; set; }

    [Newtonsoft.Json.JsonProperty("originDestinationDepartureAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OriginDestinationDepartureAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("originDestinationArrivalAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OriginDestinationArrivalAirport { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("flightDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? FlightDate { get; set; }

    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastName { get; set; }

    [Newtonsoft.Json.JsonProperty("acStarAllianceTierDynamicsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? AcStarAllianceTierDynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("loyaltyMemberId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LoyaltyMemberId { get; set; }

    [Newtonsoft.Json.JsonProperty("loyaltyProgramCarrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LoyaltyProgramCarrierCode { get; set; }

    [Newtonsoft.Json.JsonProperty("assessmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? AssessmentId { get; set; }

    [Newtonsoft.Json.JsonProperty("isSsetV2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsSsetV2 { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsWebRequestID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicsWebRequestID { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsWebRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DynamicsWebRequest { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsWebResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DynamicsWebResponse { get; set; }

    [Newtonsoft.Json.JsonProperty("isManualFlow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsManualFlow { get; set; }

    [Newtonsoft.Json.JsonProperty("ssetExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SsetExpense> SsetExpenses { get; set; }

    [Newtonsoft.Json.JsonProperty("additionalPassengers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SsetAdditionalPassengerDto> AdditionalPassengers { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SsetOperationModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SsetOperationModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum SsetOperationType
  {
    Assessment = 0,

    CaseCreation = 1,

    ExpenseCreation = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SsetExpense
  {
    [Newtonsoft.Json.JsonProperty("expenseTypeDynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? ExpenseTypeDynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? Amount { get; set; }

    [Newtonsoft.Json.JsonProperty("portalLanguageDynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? PortalLanguageDynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("flightDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? FlightDate { get; set; }

    [Newtonsoft.Json.JsonProperty("transportationTypeDynamicsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? TransportationTypeDynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? TransactionDate { get; set; }

    [Newtonsoft.Json.JsonProperty("mealTypeDynamicsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? MealTypeDynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("disruptionCityAirportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisruptionCityAirportCode { get; set; }

    [Newtonsoft.Json.JsonProperty("checkInDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? CheckInDate { get; set; }

    [Newtonsoft.Json.JsonProperty("checkOutDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? CheckOutDate { get; set; }

    [Newtonsoft.Json.JsonProperty("isEuRegulation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsEuRegulation { get; set; }

    [Newtonsoft.Json.JsonProperty("receipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SsetReceipt> Receipts { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicExpenseWebRequestID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicExpenseWebRequestID { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseWebRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExpenseWebRequest { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseWebResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExpenseWebResponse { get; set; }

    [Newtonsoft.Json.JsonProperty("assessmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? AssessmentId { get; set; }

    [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? CurrencyId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SsetExpense FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SsetExpense>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SsetReceipt
  {
    [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FileName { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DynamicsFileName { get; set; }

    [Newtonsoft.Json.JsonProperty("documentBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public byte[] DocumentBody { get; set; }

    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subject { get; set; }

    [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MimeType { get; set; }

    [Newtonsoft.Json.JsonProperty("documentLanguageId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? DocumentLanguageId { get; set; }

    [Newtonsoft.Json.JsonProperty("storageIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string StorageIdentifier { get; set; }

    [Newtonsoft.Json.JsonProperty("storageContainer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string StorageContainer { get; set; }

    [Newtonsoft.Json.JsonProperty("storagePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string StoragePath { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsAnnotationWebRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicsAnnotationWebRequestId { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsAnnotationRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DynamicsAnnotationRequest { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsAnnotationResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DynamicsAnnotationResponse { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SsetReceipt FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SsetReceipt>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SsetAdditionalPassengerDto
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("ssetOperationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? SsetOperationId { get; set; }

    [Newtonsoft.Json.JsonProperty("titleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? TitleId { get; set; }

    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastName { get; set; }

    [Newtonsoft.Json.JsonProperty("addressStreet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AddressStreet { get; set; }

    [Newtonsoft.Json.JsonProperty("isAddressSameAsPrimaryApplicant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsAddressSameAsPrimaryApplicant { get; set; }

    [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string City { get; set; }

    [Newtonsoft.Json.JsonProperty("provinceState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProvinceState { get; set; }

    [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ZipCode { get; set; }

    [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? CountryId { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    [Newtonsoft.Json.JsonProperty("aeroPlanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AeroPlanNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsAdditionalPassengerWebRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicsAdditionalPassengerWebRequestId { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsAdditionalPassengerRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DynamicsAdditionalPassengerRequest { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsAdditionalPassengerResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DynamicsAdditionalPassengerResponse { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SsetAdditionalPassengerDto FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SsetAdditionalPassengerDto>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfLanguageModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<LanguageModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfLanguageModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfLanguageModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class LanguageModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? DynamicsId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static LanguageModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfTitleModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TitleModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfTitleModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfTitleModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TitleModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? DynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TitleModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TitleModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfRelationshipModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<RelationshipModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfRelationshipModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfRelationshipModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class RelationshipModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? DynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static RelationshipModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationshipModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfExpenseTypeModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ExpenseTypeModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfExpenseTypeModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfExpenseTypeModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ExpenseTypeModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? DynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ExpenseTypeModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ExpenseTypeModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfMealTypeModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<MealTypeModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfMealTypeModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfMealTypeModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class MealTypeModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? DynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MealTypeModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<MealTypeModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfTransportationTypeModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TransportationTypeModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfTransportationTypeModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfTransportationTypeModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class TransportationTypeModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? DynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TransportationTypeModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TransportationTypeModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfStarAllianceTierModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<StarAllianceTierModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfStarAllianceTierModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfStarAllianceTierModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class StarAllianceTierModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? DynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static StarAllianceTierModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<StarAllianceTierModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfCountryModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CountryModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfCountryModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfCountryModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CountryModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? DynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? SortOrder { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CountryModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CountryModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfProvinceModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ProvinceModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfProvinceModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfProvinceModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ProvinceModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountryCode { get; set; }

    [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProvinceModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ProvinceModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfRegimeModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<RegimeModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfRegimeModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfRegimeModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class RegimeModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("regimeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string RegimeCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static RegimeModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<RegimeModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfCurrencyModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CurrencyModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfCurrencyModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfCurrencyModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class CurrencyModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Symbol { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? SortOrder { get; set; }

    [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CurrencyModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SsetResponse
  {
    [Newtonsoft.Json.JsonProperty("originDestinations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SsetOriginDestinationResponse> OriginDestinations { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SsetResponse FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SsetResponse>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SsetOriginDestinationResponse
  {
    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("flightDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? FlightDate { get; set; }

    [Newtonsoft.Json.JsonProperty("pnrNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PnrNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("departureAirportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DepartureAirportCode { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalAirportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ArrivalAirportCode { get; set; }

    [Newtonsoft.Json.JsonProperty("passengers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DynamicsPassengerResponse> Passengers { get; set; }

    [Newtonsoft.Json.JsonProperty("additionalPassengers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DynamicsExpenseAdditionalPassengerResponse> AdditionalPassengers { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SsetOriginDestinationResponse FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SsetOriginDestinationResponse>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DynamicsPassengerResponse
  {
    [Newtonsoft.Json.JsonProperty("isPrimaryApplicant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsPrimaryApplicant { get; set; }

    [Newtonsoft.Json.JsonProperty("isClaimingCompensation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsClaimingCompensation { get; set; }

    [Newtonsoft.Json.JsonProperty("isClaimingExpenses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsClaimingExpenses { get; set; }

    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastName { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("primaryPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PrimaryPhone { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    [Newtonsoft.Json.JsonProperty("compensationClaimWebResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DynamicsWebResponseShort CompensationClaimWebResult { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseClaimWebResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DynamicsWebResponseShort ExpenseClaimWebResult { get; set; }

    [Newtonsoft.Json.JsonProperty("expenseClaimResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DynamicsExpenseResponse ExpenseClaimResult { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DynamicsPassengerResponse FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicsPassengerResponse>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DynamicsWebResponseShort
  {
    [Newtonsoft.Json.JsonProperty("dynamicsWebRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicsWebRequestId { get; set; }

    [Newtonsoft.Json.JsonProperty("isSuccessful", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsSuccessful { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DynamicsWebResponseShort FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicsWebResponseShort>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DynamicsExpenseResponse
  {
    [Newtonsoft.Json.JsonProperty("expenseTypeDynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? ExpenseTypeDynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public decimal? Amount { get; set; }

    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CurrencyCode { get; set; }

    [Newtonsoft.Json.JsonProperty("dynamcisExpenseWebRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamcisExpenseWebRequestId { get; set; }

    [Newtonsoft.Json.JsonProperty("isSuccessful", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsSuccessful { get; set; }

    [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DynamicsAnnotationResponse> Documents { get; set; }

    [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ErrorDetails { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DynamicsExpenseResponse FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicsExpenseResponse>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DynamicsAnnotationResponse
  {
    [Newtonsoft.Json.JsonProperty("dynamicsAnnotationWebRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicsAnnotationWebRequestId { get; set; }

    [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FileName { get; set; }

    [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MimeType { get; set; }

    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subject { get; set; }

    [Newtonsoft.Json.JsonProperty("isSuccessful", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsSuccessful { get; set; }

    [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ErrorDetails { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DynamicsAnnotationResponse FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicsAnnotationResponse>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class DynamicsExpenseAdditionalPassengerResponse
  {
    [Newtonsoft.Json.JsonProperty("dynamicsExpenseAdditionalPassengerWebRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? DynamicsExpenseAdditionalPassengerWebRequestId { get; set; }

    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastName { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("isSuccessful", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsSuccessful { get; set; }

    [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ErrorDetails { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static DynamicsExpenseAdditionalPassengerResponse FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicsExpenseAdditionalPassengerResponse>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SsetRequest
  {
    [Newtonsoft.Json.JsonProperty("sessionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SessionId { get; set; }

    [Newtonsoft.Json.JsonProperty("originDestinations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SsetOriginDestination> OriginDestinations { get; set; }

    [Newtonsoft.Json.JsonProperty("passengers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SsetPassenger> Passengers { get; set; }

    [Newtonsoft.Json.JsonProperty("isManualFlow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsManualFlow { get; set; }

    [Newtonsoft.Json.JsonProperty("portalLanguageDynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? PortalLanguageDynamicsId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SsetRequest FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SsetRequest>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SsetOriginDestination
  {
    [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FlightNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("flightDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? FlightDate { get; set; }

    [Newtonsoft.Json.JsonProperty("departureAirportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DepartureAirportCode { get; set; }

    [Newtonsoft.Json.JsonProperty("arrivalAirportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ArrivalAirportCode { get; set; }

    [Newtonsoft.Json.JsonProperty("pnrNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PnrNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("assessmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? AssessmentId { get; set; }

    [Newtonsoft.Json.JsonProperty("isEuRegulation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsEuRegulation { get; set; }

    [Newtonsoft.Json.JsonProperty("expenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SsetExpense> Expenses { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SsetOriginDestination FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SsetOriginDestination>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SsetPassenger
  {
    [Newtonsoft.Json.JsonProperty("isPrimaryApplicant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsPrimaryApplicant { get; set; }

    [Newtonsoft.Json.JsonProperty("isClaimingCompensation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsClaimingCompensation { get; set; }

    [Newtonsoft.Json.JsonProperty("isClaimingExpenses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsClaimingExpenses { get; set; }

    [Newtonsoft.Json.JsonProperty("titleDynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? TitleDynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("countryDynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? CountryDynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastName { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TicketNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("addressStreet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AddressStreet { get; set; }

    [Newtonsoft.Json.JsonProperty("isAddressSameAsPrimaryApplicant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsAddressSameAsPrimaryApplicant { get; set; }

    [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string City { get; set; }

    [Newtonsoft.Json.JsonProperty("provinceState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProvinceState { get; set; }

    [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ZipCode { get; set; }

    [Newtonsoft.Json.JsonProperty("primaryPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PrimaryPhone { get; set; }

    [Newtonsoft.Json.JsonProperty("mobilePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MobilePhone { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    [Newtonsoft.Json.JsonProperty("confirmEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ConfirmEmail { get; set; }

    [Newtonsoft.Json.JsonProperty("aeroPlanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AeroPlanNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("acStarAllianceTierDynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? AcStarAllianceTierDynamicsId { get; set; }

    [Newtonsoft.Json.JsonProperty("loyaltyProgramCarrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LoyaltyProgramCarrierCode { get; set; }

    [Newtonsoft.Json.JsonProperty("portalLanguageDynamicsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? PortalLanguageDynamicsId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SsetPassenger FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SsetPassenger>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SearchResultOfOverrideOptionModel
  {
    [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<OverrideOptionModel> Items { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SearchResultOfOverrideOptionModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfOverrideOptionModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class OverrideOptionModel
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("overrideOptionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OverrideOptionCode { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static OverrideOptionModel FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<OverrideOptionModel>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AzureFileResponse
  {
    [Newtonsoft.Json.JsonProperty("storageContainerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string StorageContainerName { get; set; }

    [Newtonsoft.Json.JsonProperty("storageFolderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string StorageFolderName { get; set; }

    [Newtonsoft.Json.JsonProperty("storageFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string StorageFileName { get; set; }

    [Newtonsoft.Json.JsonProperty("byteContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public byte[] ByteContent { get; set; }

    [Newtonsoft.Json.JsonProperty("streamContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Stream StreamContent { get; set; }

    [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Uri { get; set; }

    [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ContentType { get; set; }

    [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ErrorMessage { get; set; }

    [Newtonsoft.Json.JsonProperty("isSuccessful", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsSuccessful { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AzureFileResponse FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AzureFileResponse>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class Stream : MarshalByRefObject
  {
    [Newtonsoft.Json.JsonProperty("canTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? CanTimeout { get; set; }

    [Newtonsoft.Json.JsonProperty("readTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ReadTimeout { get; set; }

    [Newtonsoft.Json.JsonProperty("writeTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? WriteTimeout { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Stream FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Stream>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public abstract partial class MarshalByRefObject
  {
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MarshalByRefObject FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<MarshalByRefObject>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AzureFileRequest
  {
    [Newtonsoft.Json.JsonProperty("storageContainerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string StorageContainerName { get; set; }

    [Newtonsoft.Json.JsonProperty("storageFolderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string StorageFolderName { get; set; }

    [Newtonsoft.Json.JsonProperty("storageFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string StorageFileName { get; set; }

    [Newtonsoft.Json.JsonProperty("byteContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public byte[] ByteContent { get; set; }

    [Newtonsoft.Json.JsonProperty("streamContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Stream StreamContent { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AzureFileRequest FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<AzureFileRequest>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class HealthReport
  {
    [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, HealthReportEntry> Entries { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public HealthStatus? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("totalDuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.TimeSpan? TotalDuration { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static HealthReport FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<HealthReport>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class HealthReportEntry
  {
    [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.TimeSpan? Duration { get; set; }

    [Newtonsoft.Json.JsonProperty("exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Exception Exception { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public HealthStatus? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static HealthReportEntry FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<HealthReportEntry>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public enum HealthStatus
  {
    Unhealthy = 0,

    Degraded = 1,

    Healthy = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response2
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response2 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response2>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response3
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response3 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response3>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response4
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response4 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response4>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response5
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response5 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response5>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response6
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response6 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response6>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response7
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response7 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response7>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response8
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response8 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response8>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response9
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response9 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response9>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response10
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response10 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response10>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response11
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response11 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response11>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response12
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response12 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response12>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response13
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response13 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response13>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response14
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response14 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response14>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response15
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response15 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response15>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response16
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response16 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response16>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response17
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response17 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response17>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response18
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response18 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response18>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response19
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response19 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response19>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response20
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response20 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response20>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response21
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response21 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response21>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response22
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response22 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response22>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response23
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response23 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response23>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response24
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response24 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response24>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response25
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response25 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response25>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response26
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }

    /// <summary>The unique, technical Operation Id associated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OperationId { get; set; }

    /// <summary>A human-readable identifier associated with this error that can be correlated with the request.</summary>
    [Newtonsoft.Json.JsonProperty("helpDeskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HelpDeskId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response26 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response26>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response27
  {
    [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, HealthReportEntry> Entries { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public HealthStatus? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("totalDuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.TimeSpan? TotalDuration { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response27 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response27>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class Response28
  {
    [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, HealthReportEntry> Entries { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public HealthStatus? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("totalDuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.TimeSpan? TotalDuration { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Response28 FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Response28>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  [Newtonsoft.Json.JsonObjectAttribute]
  public partial class Exception
  {
    [Newtonsoft.Json.JsonProperty("StackTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string StackTrace { get; set; }

    [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Message { get; set; }

    [Newtonsoft.Json.JsonProperty("InnerException", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Exception InnerException { get; set; }

    [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Source { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static Exception FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<Exception>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
  internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
  {
    public DateFormatConverter()
    {
      DateTimeFormat = "yyyy-MM-dd";
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class ApiException : System.Exception
  {
    public int StatusCode { get; private set; }

    public string Response { get; private set; }

    public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

    public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
        : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
    {
      StatusCode = statusCode;
      Response = response;
      Headers = headers;
    }

    public override string ToString()
    {
      return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class ApiException<TResult> : ApiException
  {
    public TResult Result { get; private set; }

    public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
        : base(message, statusCode, response, headers, innerException)
    {
      Result = result;
    }
  }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108