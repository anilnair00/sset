# This workflow will build a .NET Core project and deploy it to an Azure Functions App on Windows or Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-csharp?tabs=in-process
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: Deploy DotNet project to Azure Function App

on:
  push:
    branches: ["main"]
    
permissions:
  checks: write
  contents: read

env:
  AZURE_FUNCTIONAPP_NAME: 'your-app-name'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'       # set this to the path to your function app project, defaults to the repository root
  # DOTNET_VERSION: '6.0.x'                   # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')
  DOTNET_VERSION: '3.1.x'                   # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')
  PROJECTS: 'SelfServeEligibilityTool'

jobs:
  build:
    runs-on: windows-2019 # For Linux, use ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    # If you want to use Azure RBAC instead of Publish Profile, then uncomment the task below
    # - name: 'Login via Azure CLI'
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }} # set up AZURE_RBAC_CREDENTIALS secrets in your repository

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4.3.1
      with:
        # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
        dotnet-version: ${{ env.DOTNET_VERSION }}
        # Optional global.json location, if your global.json isn't located in the root of the repo.
        global-json-file: SelfServeEligibilityTool/global.json
      
    # - name: Build .NET Projects
    #   run: |
    #     foreach ($project in Get-ChildItem -Recurse -Filter '*.csproj') {
    #     dotnet build "$project" --configuration Release
    #     # Your code to handle each $project here
    #     }

    - name: Build .NET Projects
      shell: pwsh
      run: |
          Get-ChildItem -Recurse -Filter *.csproj | ForEach-Object {
            dotnet build $_.FullName --configuration Release
          }
          
    - name: Run .NET Tests
      shell: pwsh
      run: |
        # dotnet test "SelfServeEligibilityTool/Core.Tests/Core.Tests.csproj" `
          Get-ChildItem -Recurse -Filter Core.Tests.csproj | ForEach-Object {
            dotnet test $_.FullName `
          --configuration Release `
          --no-build `
          --logger "trx;LogFileName=test_results.trx" `
          --results-directory "./TestResults" `
          || true
          }
      continue-on-error: true

    - name: Test Report
      uses: dorny/test-reporter@v1.9.1
      if: always()
      with:
        name: DotNet Tests
        path: './TestResults/test_results.trx'
        reporter: dotnet-trx
        fail-on-error: true

    - name: Publish Functions
      shell: pwsh
      # run: dotnet publish --configuration Release --no-build --output ${{ github.workspace }}/Functions 'SelfServeEligibilityTool/Functions/Functions.csproj'
      run: |
            dotnet publish --configuration Release --no-build --output publish_output 'SelfServeEligibilityTool/Functions/Functions.csproj'
            New-Item -ItemType Directory -Path APPX\Functions -Force
            Compress-Archive -Path publish_output\* -DestinationPath APPX\Functions\functions.zip

      
    # - name: Zip Functions Artifact
    #   run: |
    #       cd ${{ github.workspace }}/Functions
    #       zip -r ../Functions.zip .

    # - name: Zip Functions folder
    #   run: Compress-Archive -Path * -DestinationPath ../Functions.zip
    #   working-directory: ${{ github.workspace }}/Functions
    #   shell: pwsh
         
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.11.0

    - name: Install Node dependencies
      run: npm install
      working-directory: ./front

    - name: Test Angular
      run: npm run test-ci
      working-directory: front
      continue-on-error: true

    # - name: Build Angular Project working
    #   run: |
    #     if [[ ${{ github.ref }} == 'refs/heads/release' ]]; then
    #       npm run build:uat -- --output-path=${{ github.workspace }}/Front
    #     elif [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
    #       npm run build:prod -- --output-path=${{ github.workspace }}/Front
    #     else
    #       npm run build:sit -- --output-path=${{ github.workspace }}/Front
    #     fi
    #   working-directory: front
    #   shell: bash

    - name: Build Angular for SIT/UAT/PROD based on branch
      shell: pwsh
      run: |
        $branch = "${{ github.ref }}"
        # $outputPath = "Front"
        $outputPath = "${{ github.workspace }}\APPX\Front"    
        if ($branch -eq 'refs/heads/release') {
          npm run build:uat -- --output-path=$outputPath
        } elseif ($branch -eq 'refs/heads/master') {
          npm run build:prod -- --output-path=$outputPath
        } else {
          npm run build:sit -- --output-path=$outputPath
        }
      working-directory: ./front

    - name: Upload Front Artifact
      uses: actions/upload-artifact@v4
      with:
       name: APPX
       path: APPX/
  
  deployOnDev:
    runs-on: self-hosted
    needs: build
    if: success() && github.ref == 'refs/heads/main'

    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4.0.0
      with:
        name: APPX
        path: APPX/

     # Log in to Azure
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}  # Must be set in your GitHub secrets

    # Deploy Azure Function App
    - name: Deploy Functions
      uses: azure/functions-action@v1
      with:
          app-name: myfncapp001
          package: APPX/Functions/Functions.zip
          # publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}  # Optional alternative to login
          # deployment-method: 'runFromPackage'  # This is default behavior for zip deployment

      # Install AzCopy (optional if it's already on the runner)
    - name: Install AzCopy
      run: |
          choco install azcopy10 -y
      shell: pwsh

      # Deploy Frontend via AzCopy
    - name: Deploy Frontend
      shell: pwsh
      env:
          URL: ${{ secrets.AZCOPY_TARGET_URL }}  # Should be the blob or static website URL with SAS token
      run: |
          azcopy copy "APPX\Front\*.js" "$env:URL" --content-type="application/javascript; charset=utf8"
          azcopy sync "APPX\Front" "$env:URL" --delete-destination=true

      # Check Frontend
    - name: Check Frontend
      shell: pwsh
      continue-on-error: true
      run: |
          $response = Invoke-WebRequest -Uri https://kuberrgaf7e.z20.web.core.windows.net/index.html -Method Head
          if ($response.StatusCode -ne 200) {
            throw "Frontend check failed with status code $($response.StatusCode)"
          }

