# This workflow will build a .NET Core project and deploy it to an Azure Functions App on Windows or Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-csharp?tabs=in-process
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: Deploy DotNet project to Azure Function App

on:
  push:
    branches: ["main"]

env:
  AZURE_FUNCTIONAPP_NAME: 'your-app-name'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'       # set this to the path to your function app project, defaults to the repository root
  # DOTNET_VERSION: '6.0.x'                   # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')
  DOTNET_VERSION: '3.1.x'                   # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')

jobs:
  build-and-deploy:
    runs-on: windows-latest # For Linux, use ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    # If you want to use Azure RBAC instead of Publish Profile, then uncomment the task below
    # - name: 'Login via Azure CLI'
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }} # set up AZURE_RBAC_CREDENTIALS secrets in your repository

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4.3.1
      with:
        # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
        dotnet-version: ${{ env.DOTNET_VERSION }}
        # Optional global.json location, if your global.json isn't located in the root of the repo.
        global-json-file: SelfServeEligibilityTool/global.json

          
    # - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
    #   uses: actions/setup-dotnet@v4
    #   with:
    #     dotnet-version: ${{ env.DOTNET_VERSION }}
    #     global-json-file: global.json

    - name: Build DotNet Projects
      run: dotnet build --configuration Release 'SelfServeEligibilityTool/**/*.csproj'

    - name: Run .NET Tests
      run: dotnet test --configuration Release --no-build 'SelfServeEligibilityTool/**/Core.Tests.csproj'
      continue-on-error: true
      
    - name: Publish .NET Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: '**/*.trx'
        
    - name: Publish Functions
      run: dotnet publish --configuration Release --no-build --output ${{ github.workspace }}/Functions '**/Functions.csproj'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.11.0

    - name: Install Node dependencies
      run: npm install
      working-directory: ${{ github.workspace }}/clientAppFolder

    - name: Build Angular Project
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/release' ]]; then
          npm run build:uat -- --output-path=${{ github.workspace }}/Front
        elif [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
          npm run build:prod -- --output-path=${{ github.workspace }}/Front
        else
          npm run build:sit -- --output-path=${{ github.workspace }}/Front
      working-directory: ${{ github.workspace }}/clientAppFolder

    - name: Publish Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SSET
        path: ${{ github.workspace }}/Front
        
    # - name: 'Resolve Project Dependencies Using Dotnet'
    #   shell: pwsh # For Linux, use bash
    #   run: |
    #     pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
    #     dotnet build --configuration Release --output ./output
    #     popd

    # - name: 'Run Azure Functions Action'
    #   uses: Azure/functions-action@v1
    #   id: fa
    #   with:
    #     app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
    #     package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
    #     publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }} # Remove publish-profile to use Azure RBAC
